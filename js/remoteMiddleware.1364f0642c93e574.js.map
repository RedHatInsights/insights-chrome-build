{"version":3,"file":"remoteMiddleware.1364f0642c93e574.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACG;AACC;AACU;AACtD;AACP;AACA,WAAW,gDAAS;AACpB;AACA;AACA,eAAe,kDAAW;AAC1B;AACA;AACA,wBAAwB,2DAAQ;AAChC;AACA;AACA,2BAA2B,sEAAsB;AACjD;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,0DAA0D,OAAO,gDAAS;AAC1E;AACA,+BAA+B,kDAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,4DAAU;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA","sources":["webpack://insights-chrome/./node_modules/@segment/analytics-next/dist/pkg/plugins/remote-middleware/index.js"],"sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { isServer } from '../../core/environment';\nimport { loadScript } from '../../lib/load-script';\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn';\nexport function remoteMiddlewares(ctx, settings, obfuscate) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var path, remoteMiddleware, names, scripts, middleware;\n        var _this = this;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    if (isServer()) {\n                        return [2 /*return*/, []];\n                    }\n                    path = getNextIntegrationsURL();\n                    remoteMiddleware = (_a = settings.enabledMiddleware) !== null && _a !== void 0 ? _a : {};\n                    names = Object.entries(remoteMiddleware)\n                        .filter(function (_a) {\n                        var _ = _a[0], enabled = _a[1];\n                        return enabled;\n                    })\n                        .map(function (_a) {\n                        var name = _a[0];\n                        return name;\n                    });\n                    scripts = names.map(function (name) { return __awaiter(_this, void 0, void 0, function () {\n                        var nonNamespaced, bundleName, fullPath, error_1;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    nonNamespaced = name.replace('@segment/', '');\n                                    bundleName = nonNamespaced;\n                                    if (obfuscate) {\n                                        bundleName = btoa(nonNamespaced).replace(/=/g, '');\n                                    }\n                                    fullPath = \"\".concat(path, \"/middleware/\").concat(bundleName, \"/latest/\").concat(bundleName, \".js.gz\");\n                                    _a.label = 1;\n                                case 1:\n                                    _a.trys.push([1, 3, , 4]);\n                                    return [4 /*yield*/, loadScript(fullPath)\n                                        // @ts-ignore\n                                    ];\n                                case 2:\n                                    _a.sent();\n                                    // @ts-ignore\n                                    return [2 /*return*/, window[\"\".concat(nonNamespaced, \"Middleware\")]];\n                                case 3:\n                                    error_1 = _a.sent();\n                                    ctx.log('error', error_1);\n                                    ctx.stats.increment('failed_remote_middleware');\n                                    return [3 /*break*/, 4];\n                                case 4: return [2 /*return*/];\n                            }\n                        });\n                    }); });\n                    return [4 /*yield*/, Promise.all(scripts)];\n                case 1:\n                    middleware = _b.sent();\n                    middleware = middleware.filter(Boolean);\n                    return [2 /*return*/, middleware];\n            }\n        });\n    });\n}\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}