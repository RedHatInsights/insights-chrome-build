{"version":3,"file":"schemaFilter.deb89cd8a37f91a8.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACfiC;AACoC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,wCAAwC;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yEAAyE;AAC1G;AACA;AACA;AACA,KAAK,IAAI;AACT;AACO;AACP;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAkB;AACnC,gDAAgD,+CAAQ,CAAC,+CAAQ,GAAG,6BAA6B,gCAAgC;AACjI;AACA;AACA;AACA;AACA,gDAAgD,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,GAAG;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,4BAA4B,2BAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://insights-chrome/./node_modules/@segment/analytics-next/dist/pkg/lib/is-plan-event-enabled.js","webpack://insights-chrome/./node_modules/@segment/analytics-next/dist/pkg/plugins/schema-filter/index.js"],"sourcesContent":["/**\n * Determines whether a track event is allowed to be sent based on the\n * user's tracking plan.\n * If the user does not have a tracking plan or the event is allowed based\n * on the tracking plan configuration, returns true.\n */\nexport function isPlanEventEnabled(plan, planEvent) {\n    var _a, _b;\n    // Always prioritize the event's `enabled` status\n    if (typeof (planEvent === null || planEvent === void 0 ? void 0 : planEvent.enabled) === 'boolean') {\n        return planEvent.enabled;\n    }\n    // Assume absence of a tracking plan means events are enabled\n    return (_b = (_a = plan === null || plan === void 0 ? void 0 : plan.__default) === null || _a === void 0 ? void 0 : _a.enabled) !== null && _b !== void 0 ? _b : true;\n}\n//# sourceMappingURL=is-plan-event-enabled.js.map","import { __assign } from \"tslib\";\nimport { isPlanEventEnabled } from '../../lib/is-plan-event-enabled';\nfunction disabledActionDestinations(plan, settings) {\n    var _a, _b;\n    if (!plan || !Object.keys(plan)) {\n        return {};\n    }\n    var disabledIntegrations = plan.integrations\n        ? Object.keys(plan.integrations).filter(function (i) { return plan.integrations[i] === false; })\n        : [];\n    // This accounts for cases like Fullstory, where the settings.integrations\n    // contains a \"Fullstory\" object but settings.remotePlugins contains \"Fullstory (Actions)\"\n    var disabledRemotePlugins = [];\n    ((_a = settings.remotePlugins) !== null && _a !== void 0 ? _a : []).forEach(function (p) {\n        disabledIntegrations.forEach(function (int) {\n            if (p.creationName == int) {\n                disabledRemotePlugins.push(p.name);\n            }\n        });\n    });\n    return ((_b = settings.remotePlugins) !== null && _b !== void 0 ? _b : []).reduce(function (acc, p) {\n        if (p.settings['subscriptions']) {\n            if (disabledRemotePlugins.includes(p.name)) {\n                // @ts-expect-error element implicitly has an 'any' type because p.settings is a JSONObject\n                p.settings['subscriptions'].forEach(\n                // @ts-expect-error parameter 'sub' implicitly has an 'any' type\n                function (sub) { return (acc[\"\".concat(p.name, \" \").concat(sub.partnerAction)] = false); });\n            }\n        }\n        return acc;\n    }, {});\n}\nexport function schemaFilter(track, settings) {\n    function filter(ctx) {\n        var plan = track;\n        var ev = ctx.event.event;\n        if (plan && ev) {\n            var planEvent = plan[ev];\n            if (!isPlanEventEnabled(plan, planEvent)) {\n                ctx.updateEvent('integrations', __assign(__assign({}, ctx.event.integrations), { All: false, 'Segment.io': true }));\n                return ctx;\n            }\n            else {\n                var disabledActions = disabledActionDestinations(planEvent, settings);\n                ctx.updateEvent('integrations', __assign(__assign(__assign({}, ctx.event.integrations), planEvent === null || planEvent === void 0 ? void 0 : planEvent.integrations), disabledActions));\n            }\n        }\n        return ctx;\n    }\n    return {\n        name: 'Schema Filter',\n        version: '0.1.0',\n        isLoaded: function () { return true; },\n        load: function () { return Promise.resolve(); },\n        type: 'before',\n        page: filter,\n        alias: filter,\n        track: filter,\n        identify: filter,\n        group: filter,\n    };\n}\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}