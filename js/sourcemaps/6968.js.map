{"version":3,"sources":["webpack:///./src/js/App/GlobalFilter/constants.js","webpack:///./src/js/consts.js","webpack:///./src/js/jwt/constants.js","webpack:///./src/js/jwt/insights/entitlements.js","webpack:///./src/js/jwt/insights/offline.js","webpack:///./src/js/jwt/insights/url.js","webpack:///./src/js/jwt/insights/user.js","webpack:///./src/js/jwt/jwt.js","webpack:///./src/js/jwt/logger.js","webpack:///./src/js/jwt/modules/useChromeAuth.js","webpack:///./src/js/redux/globalFilterReducers.js","webpack:///./src/js/utils.js","webpack:///./src/js/utils/cache.js"],"names":["GLOBAL_FILTER_KEY","memoize","filter","encode","format","Workloads","SID","SID_KEY","tags","mappedTags","flatMap","Object","entries","namespace","item","isSelected","map","tagKey","tagValue","value","encodeURIComponent","reduce","acc","key","val","join","matcherMapper","isEmpty","isNotEmpty","matchValue","matcher","match","insights","chrome","auth","getUser","identity","user","is_org_admin","is_active","is_internal","appName","entitlements","Boolean","is_entitled","url","method","accessor","options","instance","then","response","get","catch","err","console","log","freeze","noAuthParam","offlineToken","allowedUnauthedPaths","DEFAULT_ROUTES","prod","sso","qa","ci","qaprodauth","stage","realm","clientId","cookieName","BASE_PATH","cachePrefix","cache","bootstrapCache","axios","adapter","interceptors","use","request","fromCache","last","lastActive","keys","localStorage","endsWith","deleteLocalStorageItems","data","ServicesApi","undefined","priv","wipePostbackParamsThatAreNotForUs","getWindow","location","href","indexOf","consts","postbackUrl","hash","urijs","removeQuery","history","pushState","toString","getOfflineToken","ret","Promise","reject","obj","tokenURL","insightsUrl","params","split","result","parts","getPostDataObject","code","entry","config","headers","window","grant_type","client_id","redirect_uri","logger","env","ssoEnv","find","includes","hostname","pathMapper","openshift","migrations","ansible","subscriptions","settings","internal","tryBounceIfUnentitled","section","service","replace","document","baseURI","token","account_number","type","username","email","first_name","last_name","locale","org_id","account_id","buildUser","pathName","pathname","shift","pageAllowsUnentitled","resolve","isValidAccountNumber","servicesApi","jti","servicesGet","res","DEFAULT_COOKIE_NAME","authChannel","BroadcastChannel","decodeToken","str","length","slice","decodeURIComponent","escape","atob","JSON","parse","onmessage","e","logout","login","updateToken","doOffline","removeSearch","addSearch","defaultOptions","promiseType","redirectUri","kc","Keycloak","init","scope","cookie","routes","onLoad","checkLoginIframe","isBeta","silentCheckSsoRedirectUri","host","getItem","keycloak","onTokenExpired","onAuthSuccess","loginAllTabs","onAuthRefreshSuccess","refreshTokens","isExistingValid","authenticated","initSuccess","initError","parsed","exp","now","Date","substr","tokenParsed","refreshToken","setCookie","secure","bounce","clearToken","startsWith","eightSeconds","getTime","expires","logoutAllTabs","postMessage","getUserInfo","jwtCookie","insightsUser","pageRequiresAuthentication","isAuthenticated","expiredToken","refreshed","date","setUTCSeconds","toGMTString","getEncodedToken","Sentry","Error","getUrl","fileName","msg","TIMER_STR","bouncer","allowUnauthed","jwt","timeEnd","flatten","initChromeAuth","time","initPromise","num","Number","isInteger","sections","removeItem","searchString","fallback","curr","accDate","currObj","endpoint","cacheKey","store","createCacheStore","setupCache","maxAge","name","localforage","driver"],"mappings":"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","file":"6968.ad6978f4054f4f90c680.js","sourcesContent":["import { deleteLocalStorageItems } from '../../utils';\nimport { decodeToken } from '../../jwt/jwt';\nimport omit from 'lodash/omit';\nimport flatMap from 'lodash/flatMap';\nimport memoize from 'lodash/memoize';\nimport { SID_KEY } from '../../redux/globalFilterReducers';\n\nexport const GLOBAL_FILTER_KEY = 'chrome:global-filter';\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const workloads = [\n  {\n    name: 'Workloads',\n    noFilter: true,\n    tags: [\n      {\n        tag: { key: 'SAP' },\n      },\n    ],\n    type: 'checkbox',\n  },\n];\n\nexport const updateSelected = (original, namespace, key, value, isSelected, extra) => ({\n  ...original,\n  [namespace]: {\n    ...original?.[namespace],\n    [key]: {\n      ...original?.[namespace]?.[key],\n      isSelected,\n      value,\n      ...extra,\n    },\n  },\n});\n\nexport const createTagsFilter = (tags = []) =>\n  tags.reduce((acc, curr) => {\n    const [namespace, tag] = curr.split('/');\n    const [tagKey, tagValue] = tag?.split('=') || [];\n    return {\n      ...acc,\n      [namespace]: {\n        ...(acc[namespace] || {}),\n        ...(tagKey?.length > 0 && {\n          [`${tagKey}${tagValue ? `=${tagValue}` : ''}`]: {\n            isSelected: true,\n            group: { value: namespace, label: namespace, type: 'checkbox' },\n            item: { tagValue, tagKey },\n          },\n        }),\n      },\n    };\n  }, {});\n\nexport const storeFilter = (tags, token, isEnabled, history) => {\n  deleteLocalStorageItems(Object.keys(localStorage).filter((key) => key.startsWith(GLOBAL_FILTER_KEY)));\n  if (isEnabled) {\n    const searchParams = new URLSearchParams();\n    const [, SIDs, mappedTags] = flatTags(tags, false, true);\n    if (tags?.Workloads) {\n      const currWorkloads = Object.entries(tags?.Workloads || {})?.find(([, { isSelected }]) => isSelected)?.[0];\n      if (currWorkloads) {\n        searchParams.append('workloads', currWorkloads);\n      }\n    }\n    searchParams.append('SIDs', SIDs);\n    searchParams.append('tags', mappedTags);\n\n    history.push({\n      ...history.location,\n      hash: searchParams.toString(),\n    });\n  }\n\n  localStorage.setItem(\n    `${GLOBAL_FILTER_KEY}/${token}`,\n    JSON.stringify(\n      Object.entries(tags).reduce(\n        (acc, [key, value]) => ({\n          ...acc,\n          [key]: {\n            ...Object.entries(value || {}).reduce(\n              (\n                currValue,\n                // eslint-disable-next-line no-unused-vars\n                [itemKey, { item, value: tagValue, group: { items, ...group } = {}, ...rest }]\n              ) => ({\n                ...currValue,\n                [itemKey]: {\n                  ...rest,\n                  item: { tagValue: item?.tagValue || tagValue, tagKey: item?.tagKey || itemKey },\n                  group,\n                },\n              }),\n              {}\n            ),\n          },\n        }),\n        {}\n      )\n    )\n  );\n};\n\nexport const generateFilter = async () => {\n  const searchParams = new URLSearchParams(location.hash?.substring(1));\n  const currToken = decodeToken(await insights.chrome.auth.getToken())?.session_state;\n  let data;\n  try {\n    data = JSON.parse(localStorage.getItem(`${GLOBAL_FILTER_KEY}/${currToken}`) || '{}');\n  } catch (e) {\n    data = {};\n  }\n\n  let { Workloads, [SID_KEY]: SIDs, ...tags } = data;\n\n  if (searchParams.get('workloads')) {\n    const { tag } = workloads[0].tags.find(({ tag: { key } }) => key === searchParams.get('workloads')) || {};\n    Workloads = tag?.key\n      ? {\n          [tag?.key]: {\n            group: omit(workloads[0], 'tags'),\n            isSelected: true,\n            item: { tagKey: tag?.key },\n          },\n        }\n      : data.Workloads;\n  }\n\n  if (typeof searchParams.get('tags') === 'string') {\n    tags = createTagsFilter(searchParams.get('tags')?.split(','));\n  }\n\n  if (typeof searchParams.get('SIDs') === 'string') {\n    SIDs = createTagsFilter(\n      searchParams\n        .get('SIDs')\n        ?.split(',')\n        .map((sid) => `${SID_KEY}/${sid}`)\n    )?.[SID_KEY];\n  }\n\n  return [\n    {\n      Workloads,\n      ...(SIDs && { [SID_KEY]: SIDs }),\n      ...tags,\n    },\n    currToken,\n  ];\n};\n\nexport const flatTags = memoize(\n  (filter, encode = false, format = false) => {\n    const { Workloads, [SID_KEY]: SID, ...tags } = filter;\n    const mappedTags = flatMap(Object.entries({ ...tags, ...(!format && { Workloads }) } || {}), ([namespace, item]) =>\n      Object.entries(item || {})\n        .filter(([, { isSelected }]) => isSelected)\n        .map(\n          ([tagKey, { item, value: tagValue }]) =>\n            `${namespace ? `${encode ? encodeURIComponent(namespace) : namespace}/` : ''}${\n              encode ? encodeURIComponent(item?.tagKey || tagKey) : item?.tagKey || tagKey\n            }${item?.tagValue || tagValue ? `=${encode ? encodeURIComponent(item?.tagValue || tagValue) : item?.tagValue || tagValue}` : ''}`\n        )\n    );\n    return format\n      ? [\n          Workloads,\n          Object.entries(SID || {})\n            .filter(([, { isSelected }]) => isSelected)\n            .reduce((acc, [key]) => [...acc, key], []),\n          mappedTags,\n        ]\n      : mappedTags;\n  },\n  (filter = {}, encode, format) =>\n    `${Object.entries(filter)\n      .map(\n        ([namespace, val]) =>\n          `${namespace}.${Object.entries(val || {})\n            .filter(([, { isSelected }]) => isSelected)\n            .map(([key]) => key)\n            .join('')}`\n      )\n      .join(',')}${encode ? '_encode' : ''}${format ? '_format' : ''}`\n);\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nconst obj = {\n  noAuthParam: 'noauth',\n  offlineToken: '2402500adeacc30eb5c5a8a5e2e0ec1f',\n  allowedUnauthedPaths: ['/', '/logout', '/beta', '/security/insights', '/beta/security/insights'],\n};\n\nconst matcherMapper = {\n  isEmpty,\n  isNotEmpty: (value) => !isEmpty(value),\n};\n/**\n * returns true/false if value matches required criteria. If invalid or no matcher is provided it returns the original value.\n * @param {any} value variable to be matched with matcher function\n * @param {string} matcher id of matcher\n */\nconst matchValue = (value, matcher) => {\n  const match = matcherMapper[matcher];\n  return typeof match === 'function' ? match(value) : value;\n};\n\n/**\n * Check if is permitted to see navigation link\n * @param {array} permissions array checked user permissions\n * @param {every|some} require type of permissions requirement\n * @returns {boolean}\n */\nconst checkPermissions = async (permissions = [], require = 'every') => {\n  const userPermissions = await insights.chrome.getUserPermissions();\n  return userPermissions && permissions[require]((item) => userPermissions.find(({ permission }) => permission === item));\n};\n\nexport const visibilityFunctions = {\n  isOrgAdmin: async () => {\n    const { identity } = await insights.chrome.auth.getUser();\n    try {\n      return identity.user.is_org_admin;\n    } catch {\n      return false;\n    }\n  },\n  isActive: async () => {\n    const { identity } = await insights.chrome.auth.getUser();\n    try {\n      return identity.user.is_active;\n    } catch {\n      return false;\n    }\n  },\n  isInternal: async () => {\n    const { identity } = await insights.chrome.auth.getUser();\n    try {\n      return identity.user.is_internal;\n    } catch {\n      return false;\n    }\n  },\n  isEntitled: async (appName) => {\n    const { entitlements } = await insights.chrome.auth.getUser();\n    return entitlements && appName\n      ? Boolean(entitlements[appName] && entitlements[appName].is_entitled)\n      : // eslint-disable-next-line camelcase\n        Object.entries(entitlements || {}).reduce((acc, [key, { is_entitled }]) => ({ ...acc, [key]: is_entitled }), {});\n  },\n  isProd: () => insights.chrome.isProd,\n  isBeta: () => insights.chrome.isBeta(),\n  loosePermissions: (permissions) => checkPermissions(permissions, 'some'),\n  hasPermissions: checkPermissions,\n  apiRequest: async ({ url, method, accessor, matcher, ...options }) => {\n    return instance({\n      url,\n      method: method || 'GET',\n      ...options,\n    })\n      .then((response) => matchValue(accessor ? get(response || {}, accessor) : response, matcher))\n      .catch((err) => {\n        console.log(err);\n        return false;\n      });\n  },\n};\n\nexport const isVisible = (limitedApps, app, visibility) => {\n  if (limitedApps && limitedApps.includes(app)) {\n    if (visibility instanceof Object) {\n      return Boolean(visibility[app]);\n    }\n\n    return visibility;\n  }\n\n  return true;\n};\n\nexport default Object.freeze(obj);\n","// Global Defaults\nexport const DEFAULT_ROUTES = {\n  prod: {\n    url: ['access.redhat.com', 'prod.foo.redhat.com', 'cloud.redhat.com'],\n    sso: 'https://sso.redhat.com/auth',\n  },\n  qa: {\n    url: ['qa.foo.redhat.com', 'qa.cloud.redhat.com'],\n    sso: 'https://sso.qa.redhat.com/auth',\n  },\n  ci: {\n    url: ['ci.foo.redhat.com', 'ci.cloud.redhat.com'],\n    sso: 'https://sso.qa.redhat.com/auth',\n  },\n  qaprodauth: {\n    url: ['qaprodauth.foo.redhat.com', 'qaprodauth.cloud.redhat.com'],\n    sso: 'https://sso.redhat.com/auth',\n  },\n  stage: {\n    url: ['cloud.stage.redhat.com'],\n    sso: 'https://sso.stage.redhat.com/auth',\n  },\n};\n\nexport const options = {\n  realm: 'redhat-external',\n  clientId: 'cloud-services',\n  cookieName: 'cs_jwt',\n};\n\nexport const noAuthParam = 'noauth';\n\nexport const offlineToken = '2402500adeacc30eb5c5a8a5e2e0ec1f';\n\nexport const allowedUnauthedPaths = ['/', '/logout', '/beta', '/security/insights', '/beta/security/insights'];\n","import axios from 'axios';\nimport { ServicesApi } from '@redhat-cloud-services/entitlements-client';\nimport { deleteLocalStorageItems, bootstrapCache, lastActive } from '../../utils';\n\nconst BASE_PATH = '/api/entitlements/v1';\n\nexport default (cachePrefix) => {\n  const cache = bootstrapCache(BASE_PATH, `${cachePrefix}-entitlements`);\n\n  const instance = axios.create({ adapter: cache.adapter });\n  instance.interceptors.response.use((response) => {\n    if (response && response.request && response.request.fromCache !== true) {\n      const last = lastActive('/api/entitlements/v1/services', 'fallback');\n      const keys = Object.keys(localStorage).filter((key) => key.endsWith('/api/entitlements/v1/services') && key !== last);\n\n      deleteLocalStorageItems(keys);\n    }\n\n    return response.data || response;\n  });\n  return new ServicesApi(undefined, BASE_PATH, instance);\n};\n","import consts from '../../consts';\nimport { DEFAULT_ROUTES } from '../constants';\nimport insightsUrl from './url';\nimport axios from 'axios';\nimport urijs from 'urijs';\n\nconst priv = {};\n// note this function is not exposed\n// it is a run everytime and produce some side affect thing\n// if a special condition is encountered\n//\n// it would be great to not have this behave this way\n// but the order that this needs to run in is very specific\n// so that is somewhat difficult\nexport function wipePostbackParamsThatAreNotForUs() {\n  if (getWindow().location.href.indexOf(consts.offlineToken) !== -1) {\n    // this is a UHC offline token postback\n    // we need to not let the JWT lib see this\n    // and try to use it\n    priv.postbackUrl = getWindow().location.href;\n\n    // we do this because keycloak.js looks at the hash for its parameters\n    // and if found uses the params for its own use\n    //\n    // in the UHC offline post back case we *dont*\n    // want the params to be used by keycloak.js\n    // so we have to destroy this stuff and let regular auth routines happen\n    getWindow().location.hash = '';\n\n    // nuke the params so that people dont see the ugly\n    const url = urijs(getWindow().location.href);\n    url.removeQuery(consts.noAuthParam);\n    getWindow().history.pushState('offlinePostback', '', url.toString());\n  }\n}\n\nexport function getOfflineToken(realm, clientId) {\n  const postbackUrl = getPostbackUrl();\n\n  if (!postbackUrl) {\n    // we need this postback URL because it contains parameters needed to\n    // call KC for the actual offline token\n    // thus we cant continue if it is missing\n    return Promise.reject('not available');\n  }\n\n  const tokenURL = `${insightsUrl(DEFAULT_ROUTES)}/realms/${realm}/protocol/openid-connect/token`;\n  const params = parseHashString(postbackUrl);\n\n  return axios({\n    method: 'post',\n    url: tokenURL,\n    data: getPostDataString(getPostDataObject(postbackUrl, clientId, params.code)),\n    config: { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } },\n  });\n}\n\nfunction getWindow() {\n  return window;\n}\n\nfunction getPostbackUrl() {\n  // let folks only do this once\n  const ret = priv.postbackUrl;\n  delete priv.postbackUrl;\n  return ret;\n}\n\nfunction getPostDataObject(url, clientId, code) {\n  return {\n    code: code,\n    grant_type: 'authorization_code', // eslint-disable-line camelcase\n    client_id: clientId, // eslint-disable-line camelcase\n    redirect_uri: encodeURIComponent(url.split('#')[0]), // eslint-disable-line camelcase\n  };\n}\n\nfunction parseHashString(str) {\n  return str\n    .split('#')[1]\n    .split('&')\n    .reduce((result, item) => {\n      const parts = item.split('=');\n      result[parts[0]] = parts[1];\n      return result;\n    }, {});\n}\n\nfunction getPostDataString(obj) {\n  return Object.entries(obj)\n    .map((entry) => {\n      return `${entry[0]}=${entry[1]}`;\n    })\n    .join('&');\n}\n","import logger from '../logger';\nconst log = logger('insights/url.js');\n\n// Parse through keycloak options routes\nexport default (env) => {\n  const ssoEnv = Object.entries(env).find(([, { url }]) => url.includes(location.hostname));\n\n  if (ssoEnv) {\n    log(`SSO Url: ${ssoEnv?.[1].sso}`);\n    log(`Current env: ${ssoEnv?.[0]}`);\n    return ssoEnv?.[1].sso;\n  } else {\n    log('SSO url: not found, defaulting to qa');\n    log('Current env: not found, defaultint to qa');\n    return 'https://sso.qa.redhat.com/auth';\n  }\n};\n","import { pageAllowsUnentitled, isValidAccountNumber } from '../../utils';\nimport servicesApi from './entitlements';\nimport logger from '../logger';\nconst log = logger('insights/user.js');\nconst pathMapper = {\n  'cost-management': 'cost_management',\n  insights: 'insights',\n  openshift: 'openshift',\n  migrations: 'migrations',\n  ansible: 'ansible',\n  subscriptions: 'subscriptions',\n  settings: 'settings',\n  'user-preferences': 'user_preferences',\n  internal: 'internal',\n};\n\nfunction getWindow() {\n  return window;\n}\n\n/* eslint-disable camelcase */\nfunction buildUser(token) {\n  const user = token\n    ? {\n        identity: {\n          account_number: token.account_number,\n          type: token.type,\n          user: {\n            username: token.username,\n            email: token.email,\n            first_name: token.first_name,\n            last_name: token.last_name,\n            is_active: token.is_active,\n            is_org_admin: token.is_org_admin,\n            is_internal: token.is_internal,\n            locale: token.locale,\n          },\n          internal: {\n            org_id: token.org_id,\n            account_id: token.account_id,\n          },\n        },\n      }\n    : null;\n\n  return user;\n}\n/* eslint-enable camelcase */\n\nfunction tryBounceIfUnentitled(data, section) {\n  // only test this on the apps that are in valid sections\n  // we need to keep /apps and other things functional\n  if (\n    section !== 'insights' &&\n    section !== 'openshift' &&\n    section !== 'cost-management' &&\n    section !== 'migrations' &&\n    section !== 'ansible' &&\n    section !== 'subscriptions' &&\n    section !== 'settings' &&\n    section !== 'user-preferences' &&\n    section !== 'internal'\n  ) {\n    return;\n  }\n\n  const service = pathMapper[section];\n  if (data === true) {\n    // this is a force bounce scenario!\n    getWindow().location.replace(`${document.baseURI}?not_entitled=${service}`);\n  }\n\n  if (section && section !== '') {\n    if (data[service] && data[service].is_entitled) {\n      log(`Entitled to: ${service}`);\n    } else {\n      log(`Not entitled to: ${service}`);\n      getWindow().location.replace(`${document.baseURI}?not_entitled=${service}`);\n    }\n  }\n}\n\nexport default (token) => {\n  let user = buildUser(token);\n\n  const pathName = getWindow().location.pathname.split('/');\n  pathName.shift();\n  if (pathName[0] === 'beta') {\n    pathName.shift();\n  }\n\n  if (user) {\n    log(`Account Number: ${user.identity.account_number}`);\n\n    // NOTE: Openshift supports Users with Account Number of -1\n    // thus we need to bypass here\n    // dont call entitlements on / /beta /openshift or /beta/openshift\n    //\n    // Landing Page *does* support accounts with -1\n    // it has to\n    if (pageAllowsUnentitled()) {\n      return new Promise((resolve) => {\n        user.identity = {\n          ...user.identity,\n          entitlements: {},\n        };\n        resolve(user);\n      });\n    }\n\n    // Important this has to come after the above -1 allow checks\n    // Otherwise we get bounced on those paths\n    //\n    // It also needs to not go int he servicesApi call\n    // because 3scale 403s if the Account number is -1\n    //\n    // we \"force\" a bounce here because the entitlements API\n    // was never called\n    if (!isValidAccountNumber(user.identity.account_number)) {\n      tryBounceIfUnentitled(true, pathName[0]);\n      return;\n    }\n\n    return servicesApi(token.jti)\n      .servicesGet()\n      .then((data) => {\n        tryBounceIfUnentitled(data, pathName[0]);\n        return {\n          ...user,\n          entitlements: data,\n        };\n      });\n  } else {\n    log('User not ready');\n  }\n\n  return new Promise((res) => res());\n};\n","// Imports\nimport Keycloak from '@redhat-cloud-services/keycloak-js';\nimport { BroadcastChannel } from 'broadcast-channel';\nimport cookie from 'js-cookie';\nimport { pageRequiresAuthentication } from '../utils';\nimport * as Sentry from '@sentry/browser';\nimport { GLOBAL_FILTER_KEY } from '../App/GlobalFilter/constants';\nimport { deleteLocalStorageItems } from '../utils';\nimport logger from './logger';\n\n// Insights Specific\nimport insightsUrl from './insights/url';\nimport insightsUser from './insights/user';\nimport urijs from 'urijs';\nimport { DEFAULT_ROUTES, options as defaultOptions } from './constants';\n\nconst log = logger('jwt.js');\nconst DEFAULT_COOKIE_NAME = 'cs_jwt';\n\nconst priv = {};\n\n// Broadcast Channel\nconst authChannel = new BroadcastChannel('auth');\nauthChannel.onmessage = (e) => {\n  if (e && e.data && e.data.type) {\n    log(`BroadcastChannel, Received event : ${e.data.type}`);\n\n    switch (e.data.type) {\n      case 'logout':\n        return logout();\n      case 'login':\n        return login();\n      case 'refresh':\n        return updateToken();\n    }\n  }\n};\n\nexport function decodeToken(str) {\n  str = str.split('.')[1];\n  str = str.replace('/-/g', '+');\n  str = str.replace('/_/g', '/');\n  switch (str.length % 4) {\n    case 0:\n      break;\n    case 2:\n      str += '==';\n      break;\n    case 3:\n      str += '=';\n      break;\n    default:\n      throw 'Invalid token';\n  }\n\n  str = (str + '===').slice(0, str.length + (str.length % 4));\n  str = str.replace(/-/g, '+').replace(/_/g, '/');\n  str = decodeURIComponent(escape(atob(str)));\n  str = JSON.parse(str);\n\n  return str;\n}\n\nexport const doOffline = (key, val) => {\n  const url = urijs(window.location.href);\n  url.removeSearch(key);\n  url.addSearch(key, val);\n\n  const options = {\n    ...defaultOptions,\n    promiseType: 'native',\n    redirectUri: url.toString(),\n    url: insightsUrl(DEFAULT_ROUTES),\n  };\n\n  const kc = Keycloak(options);\n  kc.init(options).then(() => {\n    kc.login({\n      scope: 'offline_access',\n    });\n  });\n};\n\n/*** Initialization ***/\nexport const init = (options) => {\n  log('Initializing');\n\n  const cookieName = options.cookieName ? options.cookieName : DEFAULT_COOKIE_NAME;\n\n  priv.cookie = {\n    cookieName,\n  };\n  //constructor for new Keycloak Object?\n  options.url = insightsUrl(options.routes ? options.routes : DEFAULT_ROUTES);\n  options.clientId = 'cloud-services';\n  options.realm = 'redhat-external';\n\n  //options for keycloak.init method\n  options.promiseType = 'native';\n  options.onLoad = 'check-sso';\n  options.checkLoginIframe = false;\n\n  const isBeta = window.location.pathname.split('/')[1] === 'beta' ? '/beta' : '';\n\n  options.silentCheckSsoRedirectUri = `https://${window.location.host}${isBeta}/silent-check-sso.html`;\n\n  if (window.localStorage && window.localStorage.getItem('chrome:jwt:shortSession') === 'true') {\n    options.realm = 'short-session';\n  }\n\n  //priv.keycloak = Keycloak(options);\n  priv.keycloak = Keycloak(options);\n  priv.keycloak.onTokenExpired = updateToken;\n  priv.keycloak.onAuthSuccess = loginAllTabs;\n  priv.keycloak.onAuthRefreshSuccess = refreshTokens;\n\n  if (options.token) {\n    if (isExistingValid(options.token)) {\n      // we still need to init async\n      // so that the renewal times and such fire\n      priv.keycloak.init(options);\n\n      return new Promise((resolve) => {\n        // Here we have an existing key\n        // We need to set up some of the keycloak state\n        // so that the reset of the methods that Chrome uses\n        // to check if things are good get faked out\n        // TODO reafctor the direct access to priv.keycloak\n        // away from the users\n        priv.keycloak.authenticated = true;\n        priv.keycloak.token = options.token;\n        resolve();\n      });\n    } else {\n      delete options.token;\n    }\n  }\n\n  return priv.keycloak.init(options).then(initSuccess).catch(initError);\n};\n\nfunction isExistingValid(token) {\n  log('Checking validity of existing JWT');\n  try {\n    if (!token) {\n      return false;\n    }\n\n    const parsed = decodeToken(token);\n    if (!parsed.exp) {\n      return false;\n    }\n\n    // Date.now() has extra precision...\n    // it includes milis\n    // we need to trim it down to valid seconds from epoch\n    // because we compare to KC's exp which is seconds from epoch\n    const now = Date.now().toString().substr(0, 10);\n    const exp = parsed.exp - now;\n\n    log(`Token expires in ${exp}`);\n\n    // We want to invalidate tokens if they are getting close\n    // to the expiry time\n    // So that we can be someone safe from time skew\n    // issues on our APIs\n    // i.e. the client could have a slight time skew\n    // and the API is true (because NTP) and we could send down\n    // a JWT that is actually exipred\n    if (exp > 90) {\n      priv.keycloak.tokenParsed = parsed;\n      return true;\n    } else {\n      if (exp > 0) {\n        log('token is expiring in < 90 seconds');\n      } else {\n        log('token is expired');\n      }\n\n      return false;\n    }\n  } catch (e) {\n    log(e);\n    return false;\n  }\n}\n\n// keycloak init successful\nfunction initSuccess() {\n  log('JWT Initialized');\n  setCookie(priv.keycloak.token);\n  setRefresh(priv.keycloak.refreshToken);\n}\n\n// keycloak init failed\nfunction initError() {\n  log('JWT init error');\n  logout();\n}\n\n/*** Login/Logout ***/\nexport function login() {\n  log('Logging in');\n  // Redirect to login\n  cookie.set('cs_loggedOut', 'false');\n  return priv.keycloak.login({ redirectUri: location.href });\n}\n\nfunction logout(bounce) {\n  log('Logging out');\n\n  // Clear cookies and tokens\n  priv.keycloak.clearToken();\n  cookie.remove(priv.cookie.cookieName);\n\n  const isBeta = window.location.pathname.split('/')[1] === 'beta' ? '/beta' : '';\n  const keys = Object.keys(localStorage).filter(\n    (key) =>\n      key.endsWith('/api/entitlements/v1/services') ||\n      key.endsWith('/config/main.yml') ||\n      key.endsWith('/chrome') ||\n      key.endsWith('/chrome-store') ||\n      key.startsWith('kc-callback') ||\n      key.startsWith(GLOBAL_FILTER_KEY)\n  );\n  deleteLocalStorageItems(keys);\n  // Redirect to logout\n  if (bounce) {\n    let eightSeconds = new Date(new Date().getTime() + 8 * 1000);\n    cookie.set('cs_loggedOut', 'true', {\n      expires: eightSeconds,\n    });\n    priv.keycloak.logout({\n      redirectUri: `https://${window.location.host}${isBeta}`,\n    });\n  }\n}\n\nexport const logoutAllTabs = (bounce) => {\n  authChannel.postMessage({ type: 'logout' });\n  logout(bounce);\n};\n\nfunction loginAllTabs() {\n  authChannel.postMessage({ type: 'login' });\n}\n\n/*** User Functions ***/\n// Get user information\nexport const getUserInfo = () => {\n  log('Getting User Information');\n  const jwtCookie = cookie.get(DEFAULT_COOKIE_NAME);\n\n  if (jwtCookie && isExistingValid(jwtCookie) && isExistingValid(priv.keycloak.token)) {\n    return insightsUser(priv.keycloak.tokenParsed);\n  }\n\n  return updateToken()\n    .then(() => {\n      insightsUser(priv.keycloak.tokenParsed);\n      log('Successfully updated token');\n    })\n    .catch(() => {\n      if (pageRequiresAuthentication()) {\n        log('Trying to log in user to refresh token');\n        return login();\n      }\n    });\n};\n\n// Check to see if the user is loaded, this is what API calls should wait on\nexport const isAuthenticated = () => {\n  log(`User Ready: ${priv.keycloak.authenticated}`);\n  return priv.keycloak.authenticated;\n};\n\n/*** Check Token Status ***/\n// If a token is expired, logout of all tabs\nexport const expiredToken = () => {\n  log('Token has expired, trying to log out');\n  logout();\n};\n\n// Broadcast message to refresh tokens across tabs\nfunction refreshTokens() {\n  authChannel.postMessage({ type: 'refresh' });\n}\n\n// Actually update the token\nfunction updateToken() {\n  return priv.keycloak\n    .updateToken()\n    .then((refreshed) => {\n      // Important! after we update the token\n      // we have to again populate the Cookie!\n      // Otherwise we just update and dont send\n      // the updated token down stream... and things 401\n      setCookie(priv.keycloak.token);\n\n      log('Attempting to update token');\n\n      if (refreshed) {\n        log('Token was successfully refreshed');\n      } else {\n        log('Token is still valid, not updating');\n      }\n    })\n    .catch(() => {\n      /**\n       * The \"priv.keycloak.updateToken\" promise does not return any error message\n       */\n      log('Token update failed');\n    });\n}\n\nfunction getCookieExpires(exp) {\n  // we want the cookie to expire at the same time as the JWT session\n  // so we take the exp and get a new GTMString from that\n  const date = new Date(0);\n  date.setUTCSeconds(exp);\n  return date.toGMTString();\n}\n\n// Set the cookie for 3scale\nfunction setCookie(token) {\n  log('Setting the cs_jwt cookie');\n  if (token && token.length > 10) {\n    setCookieWrapper(`${priv.cookie.cookieName}=${token};` + `path=/;` + `secure=true;` + `expires=${getCookieExpires(decodeToken(token).exp)}`);\n  }\n}\n\nfunction setRefresh(refreshToken) {\n  log('Setting the refresh token');\n  cookie.set('cs_jwt_refresh', refreshToken, { secure: true });\n}\n\n// do this so we can mock out for test\nfunction setCookieWrapper(str) {\n  document.cookie = str;\n}\n\n// Encoded WIP\nexport const getEncodedToken = () => {\n  log('Trying to get the encoded token');\n\n  if (!isExistingValid(priv.keycloak.token)) {\n    Sentry.captureException(new Error('Fetching token failed - expired token'));\n    log('Failed to get encoded token');\n    updateToken();\n  }\n\n  return priv.keycloak.token;\n};\n\n// Keycloak server URL\nexport const getUrl = () => {\n  return insightsUrl(DEFAULT_ROUTES);\n};\n","// const pub = {};\n\nexport default (fileName) => {\n  return (msg) => {\n    if (window.console) {\n      if (window.localStorage && window.localStorage.getItem('chrome:jwt:debug')) {\n        window.console.log(`[JWT][${fileName}] ${msg}`);\n      }\n    }\n  };\n};\n","import { wipePostbackParamsThatAreNotForUs, getOfflineToken } from '../insights/offline';\n\nimport flatten from 'lodash/flatten';\n\nimport * as jwt from '../jwt';\nimport cookie from 'js-cookie';\nimport { options as defaultOptions, allowedUnauthedPaths } from '../constants';\nconst TIMER_STR = '[JWT][jwt.js] Auth time';\n\nfunction bouncer() {\n  if (allowUnauthed()) {\n    return;\n  }\n\n  if (!jwt.isAuthenticated()) {\n    cookie.remove(defaultOptions.cookieName);\n    jwt.login();\n  }\n\n  console.timeEnd(TIMER_STR); // eslint-disable-line no-console\n}\n\nfunction getAllowedUnauthedPaths() {\n  return flatten(allowedUnauthedPaths.map((e) => [e, e + '/']));\n}\n\nexport function allowUnauthed() {\n  if (getAllowedUnauthedPaths().includes(window.location.pathname)) {\n    return true;\n  }\n\n  return false;\n}\n\nexport const initChromeAuth = () => {\n  console.time(TIMER_STR); // eslint-disable-line no-console\n  let options = {\n    ...defaultOptions,\n  };\n\n  wipePostbackParamsThatAreNotForUs();\n  const token = cookie.get(options.cookieName);\n\n  // If we find an existing token, use it\n  // so that we dont auth even when a valid token is present\n  // otherwise its quick, but we bounce around and get a new token\n  // on every page load\n  if (token && token.length > 10) {\n    options.token = token;\n    options.refreshToken = cookie.get('cs_jwt_refresh');\n  }\n\n  const promise = jwt.init(options).then(bouncer);\n\n  return {\n    initPromise: promise,\n  };\n};\n\nconst useChromeAuth = () => {\n  let options = {\n    ...defaultOptions,\n  };\n\n  return {\n    getOfflineToken: () => {\n      return getOfflineToken(options.realm, options.clientId);\n    },\n    ...jwt,\n  };\n};\n\nexport default useChromeAuth;\n","import groupBy from 'lodash/groupBy';\nexport const SID_KEY = 'SAP ID (SID)';\n\nexport const defaultState = {\n  tags: { isLoaded: false, items: [] },\n  sid: { isLoaded: false, items: [] },\n  workloads: { isLoaded: false, items: {} },\n};\n\nexport function onGetAllTags(state, { payload }) {\n  return {\n    ...state,\n    tags: {\n      isLoaded: true,\n      items: Object.entries(groupBy(payload?.results || [], ({ tag: { namespace } }) => namespace)).map(([key, value]) => ({\n        name: key,\n        tags: value,\n      })),\n      total: payload?.total,\n      count: payload?.count,\n      page: payload?.page,\n      // eslint-disable-next-line camelcase\n      perPage: payload?.per_page,\n    },\n  };\n}\n\nexport function onGetAllTagsPending(state) {\n  return {\n    ...state,\n    tags: {\n      isLoaded: false,\n    },\n  };\n}\n\nexport function onSetGlobalFilterScope(state, { payload }) {\n  return {\n    ...state,\n    scope: payload,\n  };\n}\n\nexport function onGlobalFilterToggle(state, { payload }) {\n  return {\n    ...state,\n    globalFilterHidden: payload.isHidden,\n  };\n}\n\nexport function onTagSelect(state, { payload }) {\n  return {\n    ...state,\n    selectedTags: payload,\n  };\n}\n\nexport function onGetAllSIDs(state, { payload }) {\n  return {\n    ...state,\n    sid: {\n      isLoaded: true,\n      ...(payload?.total > 0 && {\n        items: [\n          {\n            name: SID_KEY,\n            tags: (payload?.results || []).map(({ value, count } = {}) => ({\n              tag: { key: value, namespace: SID_KEY },\n              count,\n            })),\n          },\n        ],\n      }),\n      total: payload?.total,\n      count: payload?.count,\n      page: payload?.page,\n      // eslint-disable-next-line camelcase\n      perPage: payload?.per_page,\n    },\n  };\n}\n\nexport function onGetAllSIDsPending(state) {\n  return {\n    ...state,\n    sid: {\n      isLoaded: false,\n    },\n  };\n}\n\nexport function onGetAllWorkloads(state, { payload }) {\n  return {\n    ...state,\n    workloads: {\n      isLoaded: true,\n      hasSap: payload?.results?.find(({ value } = {}) => value)?.count || 0,\n    },\n  };\n}\n\nexport function onGetAllWorkloadsPending(state) {\n  return {\n    ...state,\n    workloads: {\n      isLoaded: false,\n    },\n  };\n}\n\nexport function onGlobalFilterRemove(state, { payload }) {\n  return {\n    ...state,\n    globalFilterRemoved: payload.isHidden,\n  };\n}\n","import get from 'lodash/get';\nimport { setupCache } from 'axios-cache-adapter';\nimport { createCacheStore } from './utils/cache';\nimport { DEFAULT_ROUTES } from './jwt/constants';\n\nexport function getWindow() {\n  return window;\n}\n\n/* eslint-disable curly */\nexport function isValidAccountNumber(num) {\n  if (!num) return false;\n  if (num === -1) return false;\n  if (num === '-1') return false;\n  return Number.isInteger(Number(num));\n}\n/* eslint-enable curly */\n\nfunction getSection() {\n  const sections = getWindow().location.pathname.split('/');\n  if (sections[1] === 'beta') {\n    return sections[2] || '';\n  }\n\n  return sections[1];\n}\n\nexport function pageAllowsUnentitled() {\n  const pathname = getWindow().location.pathname;\n  if (\n    pathname === '/' ||\n    pathname === '/beta' ||\n    pathname === '/beta/' ||\n    pathname.indexOf('/openshift') === 0 ||\n    pathname.indexOf('/beta/openshift') === 0 ||\n    pathname.indexOf('/security') === 0 ||\n    pathname.indexOf('/beta/security') === 0\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function pageRequiresAuthentication() {\n  const section = getSection();\n  if (\n    section === 'insights' ||\n    section === 'cost-management' ||\n    section === 'apps' ||\n    section === 'ansible' ||\n    section === 'migrations' ||\n    section === 'subscriptions' ||\n    section === 'openshift' ||\n    section === 'settings' ||\n    section === 'user-preferences' ||\n    section === 'internal'\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Creates a redux listener that watches the state on given path (e.g. chrome.appNav) and calls\n * the given function when the state on the given path changes.\n *\n * The function is called with two parameters: current state value on the path, store reference\n */\nexport function createReduxListener(store, path, fn) {\n  let previous = undefined;\n\n  return () => {\n    const state = store.getState();\n    const current = get(state, path);\n\n    if (current !== previous) {\n      previous = current;\n      fn(current, store);\n    }\n  };\n}\n\nexport function deleteLocalStorageItems(keys) {\n  keys.map((key) => localStorage.removeItem(key));\n}\n\nexport function lastActive(searchString, fallback) {\n  return Object.keys(localStorage).reduce((acc, curr) => {\n    if (curr.includes(searchString)) {\n      try {\n        let accDate;\n        try {\n          accDate = new Date(JSON.parse(localStorage.getItem(acc).expires));\n        } catch {\n          accDate = new Date();\n        }\n\n        const currObj = JSON.parse(localStorage.getItem(curr));\n        return accDate >= new Date(currObj.expires) ? acc : curr;\n      } catch (e) {\n        return acc;\n      }\n    }\n\n    return acc;\n  }, fallback);\n}\n\nexport function bootstrapCache(endpoint, cacheKey) {\n  const store = createCacheStore(endpoint, cacheKey);\n  return setupCache({\n    store,\n    maxAge: 10 * 60 * 1000, // 10 minutes\n  });\n}\n\nexport function getUrl(type) {\n  if (window.location.pathname === ('/beta' || '/')) {\n    return 'landing';\n  }\n\n  const sections = window.location.pathname.split('/');\n  if (sections[1] === 'beta') {\n    return type === 'bundle' ? sections[2] : sections[3];\n  }\n\n  return type === 'bundle' ? sections[1] : sections[2];\n}\n\nexport function getEnv() {\n  return Object.entries(DEFAULT_ROUTES).find(([, { url }]) => url.includes(location.hostname))?.[0] || 'qa';\n}\n\nexport function isBeta() {\n  return window.location.pathname.split('/')[1] === 'beta' ? true : false;\n}\n","import { lastActive, deleteLocalStorageItems } from '../utils';\n\nimport localforage from 'localforage';\n\nexport const createCacheStore = (endpoint, cacheKey) => {\n  const name = lastActive(endpoint, cacheKey);\n\n  return localforage.createInstance({\n    driver: [localforage.LOCALSTORAGE],\n    name: name?.split('/')[0] || name,\n  });\n};\n\nlet store;\n\n/**\n * Check if the app has switched between beta/non-beta envs.\n * If it did, we clean the existing chrome cache to prevent stale cache entry.\n * This issue may occur when the user switches between envs without logging out and in.\n */\nconst envSwap = () => {\n  const currentEnv = window.insights.chrome.isBeta() ? 'beta' : 'non-beta';\n  const prevEnv = localStorage.getItem('chrome:prevEnv');\n  if (prevEnv && currentEnv !== prevEnv) {\n    deleteLocalStorageItems(Object.keys(localStorage).filter((item) => item.endsWith('/chrome-store')));\n  }\n  localStorage.setItem('chrome:prevEnv', currentEnv);\n};\n\nexport class CacheAdapter {\n  constructor(endpoint, cacheKey, maxAge = 10 * 60 * 1000) {\n    this.maxAge = maxAge;\n    this.expires = new Date().getTime() + this.maxAge;\n    envSwap();\n    if (!store) {\n      const name = lastActive(endpoint, cacheKey);\n      let cached;\n      try {\n        cached = JSON.parse(localStorage.getItem(name));\n      } catch (e) {\n        cached = localStorage.getItem(name);\n      }\n      this.name = name;\n      this.endpoint = endpoint;\n      this.cacheKey = cacheKey;\n      store = createCacheStore(endpoint, cacheKey);\n      if (new Date(parseInt(cached?.expires, 10)) >= new Date()) {\n        this.setCache(parseInt(cached?.expires, 10), cached?.data);\n      } else {\n        const cacheTime = new Date().getTime() + this.maxAge;\n        this.setCache(cacheTime, {});\n      }\n    }\n  }\n\n  async setCache(expires, data) {\n    this.expires = expires;\n    await store.setItem(this.endpoint, {\n      data,\n      expires,\n    });\n  }\n\n  async invalidateStore() {\n    if (new Date(this.expires) <= new Date()) {\n      deleteLocalStorageItems(Object.keys(localStorage).filter((item) => item.endsWith('/chrome')));\n      await localforage.dropInstance();\n      store = createCacheStore(this.endpoint, this.cacheKey);\n      const cacheTime = new Date().getTime() + this.maxAge;\n      await this.setCache(cacheTime, {});\n    }\n  }\n\n  async setItem(key, data) {\n    await this.invalidateStore();\n    const cachedData = await store.getItem(this.endpoint);\n    cachedData.data = {\n      ...cachedData?.data,\n      [key]: data,\n    };\n    await store.setItem(this.endpoint, cachedData);\n  }\n\n  async getItem(key) {\n    await this.invalidateStore();\n    const cachedData = await store.getItem(this.endpoint);\n    return cachedData?.data?.[key];\n  }\n}\n"],"sourceRoot":""}