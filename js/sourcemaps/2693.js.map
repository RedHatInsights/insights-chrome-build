{"version":3,"sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory-general-info/esm/api/api.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory-general-info/esm/redux/action-types.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory-general-info/esm/redux/actions.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory-general-info/esm/redux/reducers.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory-general-info/node_modules/@redhat-cloud-services/host-inventory-client/dist/api.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory-general-info/node_modules/@redhat-cloud-services/host-inventory-client/dist/base.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory-general-info/node_modules/@redhat-cloud-services/host-inventory-client/dist/configuration.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory-general-info/node_modules/@redhat-cloud-services/host-inventory-client/dist/index.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-utilities/esm/ReducerRegistry/ReducerRegistry.js"],"names":["hosts","HostsApi","undefined","getEntitySystemProfile","item","apiHostGetHostSystemProfileById","asyncInventory","reduce","acc","curr","concat","ACTION_TYPES","SET_DISPLAY_NAME","SET_ANSIBLE_HOST","systemProfile","itemId","type","payload","editDisplayName","id","value","display_name","meta","notifications","fulfilled","variant","title","dismissable","editAnsibleHost","ansible_host","_applyReducerHash","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","defaultState","loaded","sizes","formatBytes","bytes","isNaN","Number","index","Math","floor","log","parseFloat","pow","toFixed","systemProfilePending","state","calculateRepos","repos","enabled","disabled","calculateInterfaces","interfaces","ipv4","ipv4_addresses","Boolean","ipv6","ipv6_addresses","onSystemProfile","_ref","results","system_profile","ramSize","system_memory_bytes","repositories","yum_repos","network","network_interfaces","extendStatics","__extends","this","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","n","call","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","v","op","TypeError","pop","exports","globalImportUrl","axios_1","base_1","SystemProfileSelinuxCurrentModeEnum","SystemProfileSelinuxConfigFileEnum","SystemProfileOperatingSystemNameEnum","DefaultApiAxiosParamCreator","configuration","_this","apiSystemProfileValidateSchema","repoBranch","repoFork","days","options","localVarUrlObj","baseOptions","localVarRequestOptions","localVarHeaderParameter","localVarQueryParameter","localVarApiKeyValue","_a","headersFromBaseOptions","_b","RequiredError","parse","method","apiKey","query","search","headers","url","format","DefaultApiFp","localVarAxiosArgs","axios","basePath","default","BASE_PATH","axiosRequestArgs","request","DefaultApiFactory","DefaultApi","_super","BaseAPI","HostsApiAxiosParamCreator","apiHostDeleteById","hostIdList","branchId","localVarPath","replace","encodeURIComponent","String","apiHostGetHostById","perPage","page","orderBy","orderHow","apiHostGetHostList","displayName","fqdn","hostnameOrId","insightsId","staleness","tags","registeredWith","apiHostGetHostTagCount","apiHostGetHostTags","apiHostHostCheckin","createCheckIn","accessToken","needsSerialization","data","JSON","stringify","apiHostMergeFacts","namespace","apiHostPatchById","patchHostIn","apiHostReplaceFacts","HostsApiFp","HostsApiFactory","SapSystemApiAxiosParamCreator","apiSystemProfileGetSapSids","apiSystemProfileGetSapSystem","SapSystemApiFp","SapSystemApiFactory","SapSystemApi","TagsApiAxiosParamCreator","apiTagGetTags","TagsApiFp","TagsApiFactory","TagsApi","COLLECTION_FORMATS","csv","ssv","tsv","pipes","field","msg","name","Error","Configuration","param","username","password","__export","m","applyReducerHash","reducerHash","initialState","action","dispatchActionsToStore","actions","store","dispatch","ReducerRegistry","initState","middlewares","composeEnhancersDefault","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reducers","newReducers","replaceReducer","entries","reducer","includes","_ref2","val","reduxRegistry"],"mappings":"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","file":"2693.18cac95e527e8a362dd2.js","sourcesContent":["import 'abortcontroller-polyfill/dist/polyfill-patch-fetch';\nexport var INVENTORY_API_BASE = '/api/inventory/v1';\nimport instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\nexport var hosts = new HostsApi(undefined, INVENTORY_API_BASE, instance);\nexport var getEntitySystemProfile = function getEntitySystemProfile(item) {\n  return hosts.apiHostGetHostSystemProfileById([item]);\n};","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar asyncInventory = ['LOAD_SYSTEM_PROFILE'].reduce(function (acc, curr) {\n  return [].concat(_toConsumableArray(acc), [curr, \"\".concat(curr, \"_PENDING\"), \"\".concat(curr, \"_FULFILLED\"), \"\".concat(curr, \"_REJECTED\")]);\n}, []);\nexport var ACTION_TYPES = _toConsumableArray(asyncInventory).reduce(function (acc, curr) {\n  acc[curr] = curr;\n  return acc;\n}, {\n  SET_DISPLAY_NAME: 'SET_DISPLAY_NAME',\n  SET_ANSIBLE_HOST: 'SET_ANSIBLE_HOST'\n});","import { ACTION_TYPES } from './action-types';\nimport { getEntitySystemProfile, hosts } from '../api';\nexport var systemProfile = function systemProfile(itemId) {\n  return {\n    type: ACTION_TYPES.LOAD_SYSTEM_PROFILE,\n    payload: getEntitySystemProfile(itemId, {})\n  };\n};\nexport var editDisplayName = function editDisplayName(id, value) {\n  return {\n    type: ACTION_TYPES.SET_DISPLAY_NAME,\n    payload: hosts.apiHostPatchById([id], {\n      display_name: value\n    }),\n    // eslint-disable-line camelcase\n    meta: {\n      notifications: {\n        fulfilled: {\n          variant: 'success',\n          title: 'Display name has been updated',\n          dismissable: true\n        }\n      }\n    }\n  };\n};\nexport var editAnsibleHost = function editAnsibleHost(id, value) {\n  return {\n    type: ACTION_TYPES.SET_ANSIBLE_HOST,\n    payload: hosts.apiHostPatchById([id], {\n      ansible_host: value\n    }),\n    // eslint-disable-line camelcase\n    meta: {\n      notifications: {\n        fulfilled: {\n          variant: 'success',\n          title: 'Ansible hostname has been updated',\n          dismissable: true\n        }\n      }\n    }\n  };\n};","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _applyReducerHash;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { ACTION_TYPES } from './action-types';\nexport var defaultState = {\n  loaded: false\n};\nexport var sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']; // Kudos to https://stackoverflow.com/a/18650828/2560321\n\nexport var formatBytes = function formatBytes(bytes) {\n  if (bytes === 0 || isNaN(Number(bytes))) {\n    return '0 B';\n  }\n\n  var index = Math.floor(Math.log(bytes) / Math.log(1024));\n  return \"\".concat(parseFloat((bytes / Math.pow(1024, index)).toFixed(2)), \" \").concat(sizes[index]);\n};\nexport function systemProfilePending(state) {\n  return _objectSpread({}, state, {\n    systemProfile: {\n      loaded: false\n    }\n  });\n}\nexport function calculateRepos(repos) {\n  return repos && repos.reduce(function (acc, curr) {\n    return _objectSpread({}, acc, {}, curr.enabled ? {\n      enabled: [].concat(_toConsumableArray(acc.enabled), [curr])\n    } : {\n      disabled: [].concat(_toConsumableArray(acc.disabled), [curr])\n    });\n  }, {\n    enabled: [],\n    disabled: []\n  });\n}\nexport function calculateInterfaces(interfaces) {\n  return interfaces && interfaces.reduce(function (acc, curr) {\n    return {\n      interfaces: [].concat(_toConsumableArray(acc.interfaces), [curr]),\n      ipv4: [].concat(_toConsumableArray(acc.ipv4), _toConsumableArray(curr.ipv4_addresses || [])).filter(Boolean),\n      ipv6: [].concat(_toConsumableArray(acc.ipv6), _toConsumableArray(curr.ipv6_addresses || [])).filter(Boolean)\n    };\n  }, {\n    interfaces: [],\n    ipv4: [],\n    ipv6: []\n  });\n}\nexport function onSystemProfile(state, _ref) {\n  var results = _ref.payload.results;\n  var systemProfile = results && results[0] && results[0].system_profile || {};\n  return _objectSpread({}, state, {\n    systemProfile: _objectSpread({\n      loaded: true\n    }, systemProfile, {\n      ramSize: systemProfile.system_memory_bytes && formatBytes(systemProfile.system_memory_bytes),\n      repositories: calculateRepos(systemProfile.yum_repos),\n      network: calculateInterfaces(systemProfile.network_interfaces)\n    })\n  });\n}\nexport default applyReducerHash((_applyReducerHash = {}, _defineProperty(_applyReducerHash, ACTION_TYPES.LOAD_SYSTEM_PROFILE_FULFILLED, onSystemProfile), _defineProperty(_applyReducerHash, ACTION_TYPES.LOAD_SYSTEM_PROFILE_PENDING, systemProfilePending), _applyReducerHash), {\n  systemProfile: defaultState\n});","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar globalImportUrl = require(\"url\");\nvar axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar base_1 = require(\"./base\");\n/**\n    * @export\n    * @enum {string}\n    */\nvar SystemProfileSelinuxCurrentModeEnum;\n(function (SystemProfileSelinuxCurrentModeEnum) {\n    SystemProfileSelinuxCurrentModeEnum[\"Enforcing\"] = \"enforcing\";\n    SystemProfileSelinuxCurrentModeEnum[\"Permissive\"] = \"permissive\";\n    SystemProfileSelinuxCurrentModeEnum[\"Disabled\"] = \"disabled\";\n})(SystemProfileSelinuxCurrentModeEnum = exports.SystemProfileSelinuxCurrentModeEnum || (exports.SystemProfileSelinuxCurrentModeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar SystemProfileSelinuxConfigFileEnum;\n(function (SystemProfileSelinuxConfigFileEnum) {\n    SystemProfileSelinuxConfigFileEnum[\"Enforcing\"] = \"enforcing\";\n    SystemProfileSelinuxConfigFileEnum[\"Permissive\"] = \"permissive\";\n    SystemProfileSelinuxConfigFileEnum[\"Disabled\"] = \"disabled\";\n})(SystemProfileSelinuxConfigFileEnum = exports.SystemProfileSelinuxConfigFileEnum || (exports.SystemProfileSelinuxConfigFileEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar SystemProfileOperatingSystemNameEnum;\n(function (SystemProfileOperatingSystemNameEnum) {\n    SystemProfileOperatingSystemNameEnum[\"RHEL\"] = \"RHEL\";\n})(SystemProfileOperatingSystemNameEnum = exports.SystemProfileOperatingSystemNameEnum || (exports.SystemProfileOperatingSystemNameEnum = {}));\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexports.DefaultApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary validate system profile schema\n         * @param {string} repoBranch The branch of the inventory-schemas repo to use\n         * @param {string} [repoFork] The fork of the inventory-schemas repo to use\n         * @param {number} [days] How many days worth of kafka messages to validate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileValidateSchema: function (repoBranch, repoFork, days, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'repoBranch' is not null or undefined\n                            if (repoBranch === null || repoBranch === undefined) {\n                                throw new base_1.RequiredError('repoBranch', 'Required parameter repoBranch was null or undefined when calling apiSystemProfileValidateSchema.');\n                            }\n                            localVarPath = \"/system_profile/validate_schema\";\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (repoFork !== undefined) {\n                                localVarQueryParameter['repo_fork'] = repoFork;\n                            }\n                            if (repoBranch !== undefined) {\n                                localVarQueryParameter['repo_branch'] = repoBranch;\n                            }\n                            if (days !== undefined) {\n                                localVarQueryParameter['days'] = days;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexports.DefaultApiFp = function (configuration) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary validate system profile schema\n         * @param {string} repoBranch The branch of the inventory-schemas repo to use\n         * @param {string} [repoFork] The fork of the inventory-schemas repo to use\n         * @param {number} [days] How many days worth of kafka messages to validate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileValidateSchema: function (repoBranch, repoFork, days, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).apiSystemProfileValidateSchema(repoBranch, repoFork, days, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * DefaultApi - factory interface\n * @export\n */\nexports.DefaultApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary validate system profile schema\n         * @param {string} repoBranch The branch of the inventory-schemas repo to use\n         * @param {string} [repoFork] The fork of the inventory-schemas repo to use\n         * @param {number} [days] How many days worth of kafka messages to validate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileValidateSchema: function (repoBranch, repoFork, days, options) {\n            return exports.DefaultApiFp(configuration).apiSystemProfileValidateSchema(repoBranch, repoFork, days, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nvar DefaultApi = /** @class */ (function (_super) {\n    __extends(DefaultApi, _super);\n    function DefaultApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Required permissions: inventory:hosts:read\n     * @summary validate system profile schema\n     * @param {string} repoBranch The branch of the inventory-schemas repo to use\n     * @param {string} [repoFork] The fork of the inventory-schemas repo to use\n     * @param {number} [days] How many days worth of kafka messages to validate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    DefaultApi.prototype.apiSystemProfileValidateSchema = function (repoBranch, repoFork, days, options) {\n        var _this = this;\n        return exports.DefaultApiFp(this.configuration).apiSystemProfileValidateSchema(repoBranch, repoFork, days, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return DefaultApi;\n}(base_1.BaseAPI));\nexports.DefaultApi = DefaultApi;\n/**\n * HostsApi - axios parameter creator\n * @export\n */\nexports.HostsApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Delete hosts by IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostDeleteById: function (hostIdList, branchId, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostDeleteById.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Find hosts by their IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostById: function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostById.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (orderBy !== undefined) {\n                                localVarQueryParameter['order_by'] = orderBy;\n                            }\n                            if (orderHow !== undefined) {\n                                localVarQueryParameter['order_how'] = orderHow;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Read the entire list of hosts\n         * @param {string} [displayName] A part of a searched host’s display name.\n         * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n         * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n         * @param {string} [insightsId] Search for a host by insights_id\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostList: function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            localVarPath = \"/hosts\";\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (displayName !== undefined) {\n                                localVarQueryParameter['display_name'] = displayName;\n                            }\n                            if (fqdn !== undefined) {\n                                localVarQueryParameter['fqdn'] = fqdn;\n                            }\n                            if (hostnameOrId !== undefined) {\n                                localVarQueryParameter['hostname_or_id'] = hostnameOrId;\n                            }\n                            if (insightsId !== undefined) {\n                                localVarQueryParameter['insights_id'] = insightsId;\n                            }\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (orderBy !== undefined) {\n                                localVarQueryParameter['order_by'] = orderBy;\n                            }\n                            if (orderHow !== undefined) {\n                                localVarQueryParameter['order_how'] = orderHow;\n                            }\n                            if (staleness) {\n                                localVarQueryParameter['staleness'] = staleness;\n                            }\n                            if (tags) {\n                                localVarQueryParameter['tags'] = tags;\n                            }\n                            if (registeredWith !== undefined) {\n                                localVarQueryParameter['registered_with'] = registeredWith;\n                            }\n                            if (filter !== undefined) {\n                                localVarQueryParameter['filter'] = filter;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Return one or more hosts system profile\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostSystemProfileById: function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostSystemProfileById.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}/system_profile\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (orderBy !== undefined) {\n                                localVarQueryParameter['order_by'] = orderBy;\n                            }\n                            if (orderHow !== undefined) {\n                                localVarQueryParameter['order_how'] = orderHow;\n                            }\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the number of tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTagCount: function (hostIdList, perPage, page, orderBy, orderHow, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostTagCount.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}/tags/count\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (orderBy !== undefined) {\n                                localVarQueryParameter['order_by'] = orderBy;\n                            }\n                            if (orderHow !== undefined) {\n                                localVarQueryParameter['order_how'] = orderHow;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTags: function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostTags.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}/tags\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (orderBy !== undefined) {\n                                localVarQueryParameter['order_by'] = orderBy;\n                            }\n                            if (orderHow !== undefined) {\n                                localVarQueryParameter['order_how'] = orderHow;\n                            }\n                            if (search !== undefined) {\n                                localVarQueryParameter['search'] = search;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Finds a host and updates its staleness timestamps. It uses the supplied canonical facts to determine which host to update. By default, the staleness timestamp is set to 1 hour from when the request is received; however, this can be overridden by supplying the interval. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update staleness timestamps for a host matching the provided facts\n         * @param {CreateCheckIn} createCheckIn Data required to create a check-in record for a host.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostHostCheckin: function (createCheckIn, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'createCheckIn' is not null or undefined\n                            if (createCheckIn === null || createCheckIn === undefined) {\n                                throw new base_1.RequiredError('createCheckIn', 'Required parameter createCheckIn was null or undefined when calling apiHostHostCheckin.');\n                            }\n                            localVarPath = \"/hosts/checkin\";\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            // authentication BearerAuth required\n                            // http bearer authentication required\n                            if (configuration && configuration.accessToken) {\n                                accessToken = typeof configuration.accessToken === 'function'\n                                    ? configuration.accessToken()\n                                    : configuration.accessToken;\n                                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n                            }\n                            localVarHeaderParameter['Content-Type'] = 'application/json';\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            needsSerialization = (typeof createCheckIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createCheckIn !== undefined ? createCheckIn : {}) : (createCheckIn || \"\");\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Merge facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to merge with the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostMergeFacts: function (hostIdList, namespace, body, branchId, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostMergeFacts.');\n                            }\n                            // verify required parameter 'namespace' is not null or undefined\n                            if (namespace === null || namespace === undefined) {\n                                throw new base_1.RequiredError('namespace', 'Required parameter namespace was null or undefined when calling apiHostMergeFacts.');\n                            }\n                            // verify required parameter 'body' is not null or undefined\n                            if (body === null || body === undefined) {\n                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling apiHostMergeFacts.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}/facts/{namespace}\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)))\n                                .replace(\"{\" + \"namespace\" + \"}\", encodeURIComponent(String(namespace)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            localVarHeaderParameter['Content-Type'] = 'application/json';\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Update a host <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostPatchById: function (hostIdList, patchHostIn, branchId, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostPatchById.');\n                            }\n                            // verify required parameter 'patchHostIn' is not null or undefined\n                            if (patchHostIn === null || patchHostIn === undefined) {\n                                throw new base_1.RequiredError('patchHostIn', 'Required parameter patchHostIn was null or undefined when calling apiHostPatchById.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            localVarHeaderParameter['Content-Type'] = 'application/json';\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            needsSerialization = (typeof patchHostIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchHostIn !== undefined ? patchHostIn : {}) : (patchHostIn || \"\");\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Replace facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to replace the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostReplaceFacts: function (hostIdList, namespace, body, branchId, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostReplaceFacts.');\n                            }\n                            // verify required parameter 'namespace' is not null or undefined\n                            if (namespace === null || namespace === undefined) {\n                                throw new base_1.RequiredError('namespace', 'Required parameter namespace was null or undefined when calling apiHostReplaceFacts.');\n                            }\n                            // verify required parameter 'body' is not null or undefined\n                            if (body === null || body === undefined) {\n                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling apiHostReplaceFacts.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}/facts/{namespace}\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)))\n                                .replace(\"{\" + \"namespace\" + \"}\", encodeURIComponent(String(namespace)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            localVarHeaderParameter['Content-Type'] = 'application/json';\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * HostsApi - functional programming interface\n * @export\n */\nexports.HostsApiFp = function (configuration) {\n    return {\n        /**\n         * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Delete hosts by IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostDeleteById: function (hostIdList, branchId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostDeleteById(hostIdList, branchId, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Find hosts by their IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostById: function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostById(hostIdList, branchId, perPage, page, orderBy, orderHow, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Read the entire list of hosts\n         * @param {string} [displayName] A part of a searched host’s display name.\n         * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n         * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n         * @param {string} [insightsId] Search for a host by insights_id\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostList: function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostList(displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Return one or more hosts system profile\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostSystemProfileById: function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostSystemProfileById(hostIdList, perPage, page, orderBy, orderHow, branchId, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the number of tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTagCount: function (hostIdList, perPage, page, orderBy, orderHow, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostTagCount(hostIdList, perPage, page, orderBy, orderHow, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTags: function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostTags(hostIdList, perPage, page, orderBy, orderHow, search, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Finds a host and updates its staleness timestamps. It uses the supplied canonical facts to determine which host to update. By default, the staleness timestamp is set to 1 hour from when the request is received; however, this can be overridden by supplying the interval. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update staleness timestamps for a host matching the provided facts\n         * @param {CreateCheckIn} createCheckIn Data required to create a check-in record for a host.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostHostCheckin: function (createCheckIn, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostHostCheckin(createCheckIn, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Merge facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to merge with the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostMergeFacts: function (hostIdList, namespace, body, branchId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostMergeFacts(hostIdList, namespace, body, branchId, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Update a host <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostPatchById: function (hostIdList, patchHostIn, branchId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostPatchById(hostIdList, patchHostIn, branchId, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Replace facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to replace the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostReplaceFacts: function (hostIdList, namespace, body, branchId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostReplaceFacts(hostIdList, namespace, body, branchId, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * HostsApi - factory interface\n * @export\n */\nexports.HostsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Delete hosts by IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostDeleteById: function (hostIdList, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostDeleteById(hostIdList, branchId, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Find hosts by their IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostById: function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostById(hostIdList, branchId, perPage, page, orderBy, orderHow, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Read the entire list of hosts\n         * @param {string} [displayName] A part of a searched host’s display name.\n         * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n         * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n         * @param {string} [insightsId] Search for a host by insights_id\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostList: function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostList(displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Return one or more hosts system profile\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostSystemProfileById: function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostSystemProfileById(hostIdList, perPage, page, orderBy, orderHow, branchId, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the number of tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTagCount: function (hostIdList, perPage, page, orderBy, orderHow, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostTagCount(hostIdList, perPage, page, orderBy, orderHow, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTags: function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostTags(hostIdList, perPage, page, orderBy, orderHow, search, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Finds a host and updates its staleness timestamps. It uses the supplied canonical facts to determine which host to update. By default, the staleness timestamp is set to 1 hour from when the request is received; however, this can be overridden by supplying the interval. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update staleness timestamps for a host matching the provided facts\n         * @param {CreateCheckIn} createCheckIn Data required to create a check-in record for a host.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostHostCheckin: function (createCheckIn, options) {\n            return exports.HostsApiFp(configuration).apiHostHostCheckin(createCheckIn, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Merge facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to merge with the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostMergeFacts: function (hostIdList, namespace, body, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostMergeFacts(hostIdList, namespace, body, branchId, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Update a host <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostPatchById: function (hostIdList, patchHostIn, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostPatchById(hostIdList, patchHostIn, branchId, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Replace facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to replace the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostReplaceFacts: function (hostIdList, namespace, body, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostReplaceFacts(hostIdList, namespace, body, branchId, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\n/**\n * HostsApi - object-oriented interface\n * @export\n * @class HostsApi\n * @extends {BaseAPI}\n */\nvar HostsApi = /** @class */ (function (_super) {\n    __extends(HostsApi, _super);\n    function HostsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Delete hosts by IDs\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostDeleteById = function (hostIdList, branchId, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostDeleteById(hostIdList, branchId, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Find hosts by their IDs\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostById = function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostGetHostById(hostIdList, branchId, perPage, page, orderBy, orderHow, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Read the entire list of hosts\n     * @param {string} [displayName] A part of a searched host’s display name.\n     * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n     * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n     * @param {string} [insightsId] Search for a host by insights_id\n     * @param {string} [branchId] Filter by branch_id\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n     * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n     * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n     * @param {object} [filter] Filters hosts based on system_profile fields\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostList = function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostGetHostList(displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Return one or more hosts system profile\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostSystemProfileById = function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostGetHostSystemProfileById(hostIdList, perPage, page, orderBy, orderHow, branchId, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Get the number of tags on a host\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostTagCount = function (hostIdList, perPage, page, orderBy, orderHow, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostGetHostTagCount(hostIdList, perPage, page, orderBy, orderHow, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Get the tags on a host\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostTags = function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostGetHostTags(hostIdList, perPage, page, orderBy, orderHow, search, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Finds a host and updates its staleness timestamps. It uses the supplied canonical facts to determine which host to update. By default, the staleness timestamp is set to 1 hour from when the request is received; however, this can be overridden by supplying the interval. <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Update staleness timestamps for a host matching the provided facts\n     * @param {CreateCheckIn} createCheckIn Data required to create a check-in record for a host.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostHostCheckin = function (createCheckIn, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostHostCheckin(createCheckIn, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Merge facts under a namespace\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} namespace A namespace of the merged facts.\n     * @param {object} body A dictionary with the new facts to merge with the original ones.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostMergeFacts = function (hostIdList, namespace, body, branchId, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostMergeFacts(hostIdList, namespace, body, branchId, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Update a host <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Update a host\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostPatchById = function (hostIdList, patchHostIn, branchId, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostPatchById(hostIdList, patchHostIn, branchId, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Replace facts under a namespace\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} namespace A namespace of the merged facts.\n     * @param {object} body A dictionary with the new facts to replace the original ones.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostReplaceFacts = function (hostIdList, namespace, body, branchId, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostReplaceFacts(hostIdList, namespace, body, branchId, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return HostsApi;\n}(base_1.BaseAPI));\nexports.HostsApi = HostsApi;\n/**\n * SapSystemApi - axios parameter creator\n * @export\n */\nexports.SapSystemApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary get sap system values\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileGetSapSids: function (search, tags, perPage, page, staleness, registeredWith, filter, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            localVarPath = \"/system_profile/sap_sids\";\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (search !== undefined) {\n                                localVarQueryParameter['search'] = search;\n                            }\n                            if (tags) {\n                                localVarQueryParameter['tags'] = tags;\n                            }\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (staleness) {\n                                localVarQueryParameter['staleness'] = staleness;\n                            }\n                            if (registeredWith !== undefined) {\n                                localVarQueryParameter['registered_with'] = registeredWith;\n                            }\n                            if (filter !== undefined) {\n                                localVarQueryParameter['filter'] = filter;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary get sap system values\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileGetSapSystem: function (tags, perPage, page, staleness, registeredWith, filter, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            localVarPath = \"/system_profile/sap_system\";\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (tags) {\n                                localVarQueryParameter['tags'] = tags;\n                            }\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (staleness) {\n                                localVarQueryParameter['staleness'] = staleness;\n                            }\n                            if (registeredWith !== undefined) {\n                                localVarQueryParameter['registered_with'] = registeredWith;\n                            }\n                            if (filter !== undefined) {\n                                localVarQueryParameter['filter'] = filter;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * SapSystemApi - functional programming interface\n * @export\n */\nexports.SapSystemApiFp = function (configuration) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary get sap system values\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileGetSapSids: function (search, tags, perPage, page, staleness, registeredWith, filter, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.SapSystemApiAxiosParamCreator(configuration).apiSystemProfileGetSapSids(search, tags, perPage, page, staleness, registeredWith, filter, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary get sap system values\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileGetSapSystem: function (tags, perPage, page, staleness, registeredWith, filter, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.SapSystemApiAxiosParamCreator(configuration).apiSystemProfileGetSapSystem(tags, perPage, page, staleness, registeredWith, filter, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * SapSystemApi - factory interface\n * @export\n */\nexports.SapSystemApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary get sap system values\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileGetSapSids: function (search, tags, perPage, page, staleness, registeredWith, filter, options) {\n            return exports.SapSystemApiFp(configuration).apiSystemProfileGetSapSids(search, tags, perPage, page, staleness, registeredWith, filter, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary get sap system values\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileGetSapSystem: function (tags, perPage, page, staleness, registeredWith, filter, options) {\n            return exports.SapSystemApiFp(configuration).apiSystemProfileGetSapSystem(tags, perPage, page, staleness, registeredWith, filter, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\n/**\n * SapSystemApi - object-oriented interface\n * @export\n * @class SapSystemApi\n * @extends {BaseAPI}\n */\nvar SapSystemApi = /** @class */ (function (_super) {\n    __extends(SapSystemApi, _super);\n    function SapSystemApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Required permissions: inventory:hosts:read\n     * @summary get sap system values\n     * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n     * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n     * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n     * @param {object} [filter] Filters hosts based on system_profile fields\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SapSystemApi\n     */\n    SapSystemApi.prototype.apiSystemProfileGetSapSids = function (search, tags, perPage, page, staleness, registeredWith, filter, options) {\n        var _this = this;\n        return exports.SapSystemApiFp(this.configuration).apiSystemProfileGetSapSids(search, tags, perPage, page, staleness, registeredWith, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Required permissions: inventory:hosts:read\n     * @summary get sap system values\n     * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n     * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n     * @param {object} [filter] Filters hosts based on system_profile fields\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SapSystemApi\n     */\n    SapSystemApi.prototype.apiSystemProfileGetSapSystem = function (tags, perPage, page, staleness, registeredWith, filter, options) {\n        var _this = this;\n        return exports.SapSystemApiFp(this.configuration).apiSystemProfileGetSapSystem(tags, perPage, page, staleness, registeredWith, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return SapSystemApi;\n}(base_1.BaseAPI));\nexports.SapSystemApi = SapSystemApi;\n/**\n * TagsApi - axios parameter creator\n * @export\n */\nexports.TagsApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary Get the active host tags for a given account\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'tag' | 'count'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTagGetTags: function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            localVarPath = \"/tags\";\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (tags) {\n                                localVarQueryParameter['tags'] = tags;\n                            }\n                            if (orderBy !== undefined) {\n                                localVarQueryParameter['order_by'] = orderBy;\n                            }\n                            if (orderHow !== undefined) {\n                                localVarQueryParameter['order_how'] = orderHow;\n                            }\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (staleness) {\n                                localVarQueryParameter['staleness'] = staleness;\n                            }\n                            if (search !== undefined) {\n                                localVarQueryParameter['search'] = search;\n                            }\n                            if (registeredWith !== undefined) {\n                                localVarQueryParameter['registered_with'] = registeredWith;\n                            }\n                            if (filter !== undefined) {\n                                localVarQueryParameter['filter'] = filter;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * TagsApi - functional programming interface\n * @export\n */\nexports.TagsApiFp = function (configuration) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary Get the active host tags for a given account\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'tag' | 'count'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTagGetTags: function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.TagsApiAxiosParamCreator(configuration).apiTagGetTags(tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * TagsApi - factory interface\n * @export\n */\nexports.TagsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary Get the active host tags for a given account\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'tag' | 'count'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTagGetTags: function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options) {\n            return exports.TagsApiFp(configuration).apiTagGetTags(tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\n/**\n * TagsApi - object-oriented interface\n * @export\n * @class TagsApi\n * @extends {BaseAPI}\n */\nvar TagsApi = /** @class */ (function (_super) {\n    __extends(TagsApi, _super);\n    function TagsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Required permissions: inventory:hosts:read\n     * @summary Get the active host tags for a given account\n     * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n     * @param {'tag' | 'count'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n     * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n     * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n     * @param {object} [filter] Filters hosts based on system_profile fields\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TagsApi\n     */\n    TagsApi.prototype.apiTagGetTags = function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options) {\n        var _this = this;\n        return exports.TagsApiFp(this.configuration).apiTagGetTags(tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return TagsApi;\n}(base_1.BaseAPI));\nexports.TagsApi = TagsApi;\n","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar axios_1 = require(\"axios\");\nexports.BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\nexports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n/**\n *\n * @export\n * @class BaseAPI\n */\nvar BaseAPI = /** @class */ (function () {\n    function BaseAPI(configuration, basePath, axios) {\n        if (basePath === void 0) { basePath = exports.BASE_PATH; }\n        if (axios === void 0) { axios = axios_1.default; }\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n    return BaseAPI;\n}());\nexports.BaseAPI = BaseAPI;\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nvar RequiredError = /** @class */ (function (_super) {\n    __extends(RequiredError, _super);\n    function RequiredError(field, msg) {\n        var _this = _super.call(this, msg) || this;\n        _this.field = field;\n        _this.name = \"RequiredError\";\n        return _this;\n    }\n    return RequiredError;\n}(Error));\nexports.RequiredError = RequiredError;\n","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Configuration = /** @class */ (function () {\n    function Configuration(param) {\n        if (param === void 0) { param = {}; }\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n    }\n    return Configuration;\n}());\nexports.Configuration = Configuration;\n","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./api\"));\n__export(require(\"./configuration\"));\n","import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { applyMiddleware, combineReducers, createStore, compose } from 'redux';\nexport function applyReducerHash(reducerHash) {\n  var initialState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function () {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    if (Object.prototype.hasOwnProperty.call(reducerHash, action.type)) {\n      return reducerHash[action.type](state, action);\n    }\n\n    return state;\n  };\n}\nexport function dispatchActionsToStore(actions, store) {\n  return Object.keys(actions).reduce(function (acc, curr) {\n    return _objectSpread({}, acc, _defineProperty({}, curr, function () {\n      return store && store.dispatch(actions[curr].apply(actions, arguments));\n    }));\n  }, {});\n}\n/**\n * Class used to added reducers to the store during runtime.\n *\n * http://nicolasgallagher.com/redux-modules-and-code-splitting/\n */\n\nexport var ReducerRegistry = /*#__PURE__*/function () {\n  function ReducerRegistry() {\n    var initState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var middlewares = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var composeEnhancersDefault = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : compose;\n\n    _classCallCheck(this, ReducerRegistry);\n\n    var composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || composeEnhancersDefault;\n    this.store = createStore(function () {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n      return state;\n    }, initState, composeEnhancers(applyMiddleware.apply(void 0, _toConsumableArray(middlewares))));\n    this.reducers = {};\n  }\n\n  _createClass(ReducerRegistry, [{\n    key: \"getStore\",\n    value: function getStore() {\n      return this.store;\n    }\n    /**\n     * Adds new reducers to the store\n     *\n     * @param newReducers the object of new reducers.\n     */\n\n  }, {\n    key: \"register\",\n    value: function register(newReducers) {\n      var _this = this;\n\n      this.reducers = _objectSpread({}, this.reducers, {}, newReducers);\n      this.store.replaceReducer(combineReducers(_objectSpread({}, this.reducers)));\n      return function () {\n        _this.reducers = Object.entries(_this.reducers).filter(function (reducer) {\n          return !Object.keys(newReducers).includes(reducer);\n        }).reduce(function (acc, _ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              key = _ref2[0],\n              val = _ref2[1];\n\n          return _objectSpread({}, acc, _defineProperty({}, key, val));\n        }, {});\n\n        _this.store.replaceReducer(combineReducers(_objectSpread({}, _this.reducers)));\n      };\n    }\n  }]);\n\n  return ReducerRegistry;\n}();\nexport var reduxRegistry = new ReducerRegistry();\nexport default ReducerRegistry;"],"sourceRoot":""}