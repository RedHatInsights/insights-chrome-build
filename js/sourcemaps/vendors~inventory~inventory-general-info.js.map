{"version":3,"sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/utils.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/index.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/@redhat-cloud-services/host-inventory-client/dist/index.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/helpers/bind.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/helpers/buildURL.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/cancel/isCancel.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/defaults.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/adapters/xhr.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/core/createError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/core/mergeConfig.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/cancel/Cancel.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/axios.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/core/Axios.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/core/InterceptorManager.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/core/dispatchRequest.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/core/transformData.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/helpers/normalizeHeaderName.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/core/settle.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/core/enhanceError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/core/buildFullPath.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/helpers/isAbsoluteURL.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/helpers/combineURLs.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/helpers/parseHeaders.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/helpers/isURLSameOrigin.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/helpers/cookies.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/cancel/CancelToken.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/axios/lib/helpers/spread.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/@redhat-cloud-services/host-inventory-client/dist/api.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/@redhat-cloud-services/host-inventory-client/dist/base.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/@redhat-cloud-services/host-inventory-client/dist/configuration.js"],"names":["bind","toString","Object","prototype","isArray","val","call","isUndefined","isObject","isFunction","forEach","obj","fn","i","l","length","key","hasOwnProperty","module","exports","isArrayBuffer","isBuffer","constructor","isFormData","FormData","isArrayBufferView","ArrayBuffer","isView","buffer","isString","isNumber","isDate","isFile","isBlob","isStream","pipe","isURLSearchParams","URLSearchParams","isStandardBrowserEnv","navigator","product","window","document","merge","result","assignValue","arguments","deepMerge","extend","a","b","thisArg","trim","str","replace","__export","m","p","defineProperty","value","args","Array","apply","utils","encode","encodeURIComponent","url","params","paramsSerializer","serializedParams","parts","v","toISOString","JSON","stringify","push","join","hashmarkIndex","indexOf","slice","__CANCEL__","normalizeHeaderName","DEFAULT_CONTENT_TYPE","setContentTypeIfUnset","headers","adapter","defaults","XMLHttpRequest","process","transformRequest","data","transformResponse","parse","e","timeout","xsrfCookieName","xsrfHeaderName","maxContentLength","validateStatus","status","common","method","settle","buildURL","buildFullPath","parseHeaders","isURLSameOrigin","createError","config","Promise","resolve","reject","requestData","requestHeaders","request","auth","username","password","Authorization","btoa","fullPath","baseURL","open","toUpperCase","onreadystatechange","readyState","responseURL","responseHeaders","getAllResponseHeaders","response","responseType","responseText","statusText","onabort","onerror","ontimeout","timeoutErrorMessage","cookies","xsrfValue","withCredentials","read","undefined","toLowerCase","setRequestHeader","onDownloadProgress","addEventListener","onUploadProgress","upload","cancelToken","promise","then","cancel","abort","send","enhanceError","message","code","error","Error","config1","config2","valueFromConfig2Keys","mergeDeepPropertiesKeys","defaultToConfig2Keys","prop","axiosKeys","concat","otherKeys","keys","filter","Cancel","this","Axios","mergeConfig","createInstance","defaultConfig","context","instance","axios","create","instanceConfig","CancelToken","isCancel","all","promises","spread","default","InterceptorManager","dispatchRequest","interceptors","chain","interceptor","unshift","fulfilled","rejected","shift","getUri","handlers","use","eject","id","h","transformData","throwIfCancellationRequested","throwIfRequested","reason","fns","normalizedName","name","isAxiosError","toJSON","description","number","fileName","lineNumber","columnNumber","stack","isAbsoluteURL","combineURLs","requestedURL","test","relativeURL","ignoreDuplicateOf","parsed","split","line","substr","originURL","msie","userAgent","urlParsingNode","createElement","resolveURL","href","setAttribute","protocol","host","search","hash","hostname","port","pathname","charAt","location","requestURL","write","expires","path","domain","secure","cookie","Date","toGMTString","match","RegExp","decodeURIComponent","remove","now","executor","TypeError","resolvePromise","token","source","c","callback","arr","extendStatics","__extends","d","setPrototypeOf","__proto__","__","__assign","assign","t","s","n","globalImportUrl","axios_1","base_1","HostsApiAxiosParamCreator","configuration","apiHostAddHostList","createHostIn","options","RequiredError","baseOptions","localVarUrlObj","localVarRequestOptions","localVarHeaderParameter","apiKey","localVarApiKeyValue","accessToken","query","headersFromBaseOptions","needsSerialization","format","apiHostDeleteById","hostIdList","branchId","localVarPath","String","localVarQueryParameter","apiHostGetHostById","perPage","page","orderBy","orderHow","apiHostGetHostList","displayName","fqdn","hostnameOrId","insightsId","staleness","tags","registeredWith","apiHostGetHostSystemProfileById","apiHostGetHostTagCount","apiHostGetHostTags","apiHostMergeFacts","namespace","body","apiHostPatchById","patchHostIn","apiHostReplaceFacts","HostsApiFp","localVarAxiosArgs","basePath","BASE_PATH","axiosRequestArgs","HostsApiFactory","HostsApi","_super","BaseAPI","TagsApiAxiosParamCreator","apiTagGetTags","TagsApiFp","TagsApiFactory","TagsApi","COLLECTION_FORMATS","csv","ssv","tsv","pipes","field","msg","_this","Configuration","param"],"mappings":"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","file":"vendors~inventory~inventory-general-info.4d111bd0ee71c21a8265.js","sourcesContent":["'use strict';\n\nvar bind = require('./helpers/bind');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Function equal to merge with the difference being that no reference\n * to original objects is kept.\n *\n * @see merge\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction deepMerge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = deepMerge(result[key], val);\n    } else if (typeof val === 'object') {\n      result[key] = deepMerge({}, val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  deepMerge: deepMerge,\n  extend: extend,\n  trim: trim\n};\n","module.exports = require('./lib/axios');","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./api\"));\n__export(require(\"./configuration\"));\n","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies');\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];\n  var defaultToConfig2Keys = [\n    'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',\n    'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',\n    'httpsAgent', 'cancelToken', 'socketPath'\n  ];\n\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    }\n  });\n\n  utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {\n    if (utils.isObject(config2[prop])) {\n      config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n    } else if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (utils.isObject(config1[prop])) {\n      config[prop] = utils.deepMerge(config1[prop]);\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  var axiosKeys = valueFromConfig2Keys\n    .concat(mergeDeepPropertiesKeys)\n    .concat(defaultToConfig2Keys);\n\n  var otherKeys = Object\n    .keys(config2)\n    .filter(function filterAxiosKeys(key) {\n      return axiosKeys.indexOf(key) === -1;\n    });\n\n  utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  return config;\n};\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n  return error;\n};\n","'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar globalImportUrl = require(\"url\");\nvar axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar base_1 = require(\"./base\");\n/**\n * HostsApi - axios parameter creator\n * @export\n */\nexports.HostsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create a new host and add it to the host list or update an existing hosts. A host is updated if there is already one with the same canonicals facts and belonging to the same account. <br /><br /> Required permissions: inventory:hosts:write <br /><br /> NOTICE: This operation is deprecated. The explicit creation of hosts is no longer supported. Hosts are created automatically based on uploads processed by the [payload ingress service](/docs/api/ingress#operations-default-post_upload) instead.\n         * @summary Create/update multiple host and add them to the host list\n         * @param {Array<CreateHostIn>} createHostIn A list of host objects to be added to the host list\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostAddHostList: function (createHostIn, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'createHostIn' is not null or undefined\n            if (createHostIn === null || createHostIn === undefined) {\n                throw new base_1.RequiredError('createHostIn', 'Required parameter createHostIn was null or undefined when calling apiHostAddHostList.');\n            }\n            var localVarPath = \"/hosts\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            // authentication BearerAuth required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                var accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof createHostIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createHostIn !== undefined ? createHostIn : {}) : (createHostIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Delete hosts by IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostDeleteById: function (hostIdList, branchId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostDeleteById.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Find hosts by their IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostById: function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostById.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (orderHow !== undefined) {\n                localVarQueryParameter['order_how'] = orderHow;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Read the entire list of hosts\n         * @param {string} [displayName] A part of a searched host’s display name.\n         * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n         * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n         * @param {string} [insightsId] Search for a host by insights_id\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {{ [key: string]: { [key: string]: string | any; }; }} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostList: function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/hosts\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (displayName !== undefined) {\n                localVarQueryParameter['display_name'] = displayName;\n            }\n            if (fqdn !== undefined) {\n                localVarQueryParameter['fqdn'] = fqdn;\n            }\n            if (hostnameOrId !== undefined) {\n                localVarQueryParameter['hostname_or_id'] = hostnameOrId;\n            }\n            if (insightsId !== undefined) {\n                localVarQueryParameter['insights_id'] = insightsId;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (orderHow !== undefined) {\n                localVarQueryParameter['order_how'] = orderHow;\n            }\n            if (staleness) {\n                localVarQueryParameter['staleness'] = staleness;\n            }\n            if (tags) {\n                localVarQueryParameter['tags'] = tags;\n            }\n            if (registeredWith !== undefined) {\n                localVarQueryParameter['registered_with'] = registeredWith;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Return one or more hosts system profile\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostSystemProfileById: function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostSystemProfileById.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}/system_profile\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (orderHow !== undefined) {\n                localVarQueryParameter['order_how'] = orderHow;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the number of tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTagCount: function (hostIdList, perPage, page, orderBy, orderHow, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostTagCount.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}/tags/count\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (orderHow !== undefined) {\n                localVarQueryParameter['order_how'] = orderHow;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTags: function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostTags.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}/tags\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (orderHow !== undefined) {\n                localVarQueryParameter['order_how'] = orderHow;\n            }\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Merge facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to merge with the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostMergeFacts: function (hostIdList, namespace, body, branchId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostMergeFacts.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new base_1.RequiredError('namespace', 'Required parameter namespace was null or undefined when calling apiHostMergeFacts.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling apiHostMergeFacts.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}/facts/{namespace}\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)))\n                .replace(\"{\" + \"namespace\" + \"}\", encodeURIComponent(String(namespace)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a host <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostPatchById: function (hostIdList, patchHostIn, branchId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostPatchById.');\n            }\n            // verify required parameter 'patchHostIn' is not null or undefined\n            if (patchHostIn === null || patchHostIn === undefined) {\n                throw new base_1.RequiredError('patchHostIn', 'Required parameter patchHostIn was null or undefined when calling apiHostPatchById.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof patchHostIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchHostIn !== undefined ? patchHostIn : {}) : (patchHostIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Replace facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to replace the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostReplaceFacts: function (hostIdList, namespace, body, branchId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostReplaceFacts.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new base_1.RequiredError('namespace', 'Required parameter namespace was null or undefined when calling apiHostReplaceFacts.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling apiHostReplaceFacts.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}/facts/{namespace}\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)))\n                .replace(\"{\" + \"namespace\" + \"}\", encodeURIComponent(String(namespace)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * HostsApi - functional programming interface\n * @export\n */\nexports.HostsApiFp = function (configuration) {\n    return {\n        /**\n         * Create a new host and add it to the host list or update an existing hosts. A host is updated if there is already one with the same canonicals facts and belonging to the same account. <br /><br /> Required permissions: inventory:hosts:write <br /><br /> NOTICE: This operation is deprecated. The explicit creation of hosts is no longer supported. Hosts are created automatically based on uploads processed by the [payload ingress service](/docs/api/ingress#operations-default-post_upload) instead.\n         * @summary Create/update multiple host and add them to the host list\n         * @param {Array<CreateHostIn>} createHostIn A list of host objects to be added to the host list\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostAddHostList: function (createHostIn, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostAddHostList(createHostIn, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Delete hosts by IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostDeleteById: function (hostIdList, branchId, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostDeleteById(hostIdList, branchId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Find hosts by their IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostById: function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostById(hostIdList, branchId, perPage, page, orderBy, orderHow, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Read the entire list of hosts\n         * @param {string} [displayName] A part of a searched host’s display name.\n         * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n         * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n         * @param {string} [insightsId] Search for a host by insights_id\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {{ [key: string]: { [key: string]: string | any; }; }} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostList: function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostList(displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Return one or more hosts system profile\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostSystemProfileById: function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostSystemProfileById(hostIdList, perPage, page, orderBy, orderHow, branchId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the number of tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTagCount: function (hostIdList, perPage, page, orderBy, orderHow, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostTagCount(hostIdList, perPage, page, orderBy, orderHow, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTags: function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostTags(hostIdList, perPage, page, orderBy, orderHow, search, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Merge facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to merge with the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostMergeFacts: function (hostIdList, namespace, body, branchId, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostMergeFacts(hostIdList, namespace, body, branchId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Update a host <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostPatchById: function (hostIdList, patchHostIn, branchId, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostPatchById(hostIdList, patchHostIn, branchId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Replace facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to replace the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostReplaceFacts: function (hostIdList, namespace, body, branchId, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostReplaceFacts(hostIdList, namespace, body, branchId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * HostsApi - factory interface\n * @export\n */\nexports.HostsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Create a new host and add it to the host list or update an existing hosts. A host is updated if there is already one with the same canonicals facts and belonging to the same account. <br /><br /> Required permissions: inventory:hosts:write <br /><br /> NOTICE: This operation is deprecated. The explicit creation of hosts is no longer supported. Hosts are created automatically based on uploads processed by the [payload ingress service](/docs/api/ingress#operations-default-post_upload) instead.\n         * @summary Create/update multiple host and add them to the host list\n         * @param {Array<CreateHostIn>} createHostIn A list of host objects to be added to the host list\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostAddHostList: function (createHostIn, options) {\n            return exports.HostsApiFp(configuration).apiHostAddHostList(createHostIn, options)(axios, basePath);\n        },\n        /**\n         * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Delete hosts by IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostDeleteById: function (hostIdList, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostDeleteById(hostIdList, branchId, options)(axios, basePath);\n        },\n        /**\n         * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Find hosts by their IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostById: function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostById(hostIdList, branchId, perPage, page, orderBy, orderHow, options)(axios, basePath);\n        },\n        /**\n         * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Read the entire list of hosts\n         * @param {string} [displayName] A part of a searched host’s display name.\n         * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n         * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n         * @param {string} [insightsId] Search for a host by insights_id\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {{ [key: string]: { [key: string]: string | any; }; }} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostList: function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostList(displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options)(axios, basePath);\n        },\n        /**\n         * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Return one or more hosts system profile\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostSystemProfileById: function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostSystemProfileById(hostIdList, perPage, page, orderBy, orderHow, branchId, options)(axios, basePath);\n        },\n        /**\n         * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the number of tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTagCount: function (hostIdList, perPage, page, orderBy, orderHow, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostTagCount(hostIdList, perPage, page, orderBy, orderHow, options)(axios, basePath);\n        },\n        /**\n         * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTags: function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostTags(hostIdList, perPage, page, orderBy, orderHow, search, options)(axios, basePath);\n        },\n        /**\n         * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Merge facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to merge with the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostMergeFacts: function (hostIdList, namespace, body, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostMergeFacts(hostIdList, namespace, body, branchId, options)(axios, basePath);\n        },\n        /**\n         * Update a host <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostPatchById: function (hostIdList, patchHostIn, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostPatchById(hostIdList, patchHostIn, branchId, options)(axios, basePath);\n        },\n        /**\n         * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Replace facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to replace the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostReplaceFacts: function (hostIdList, namespace, body, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostReplaceFacts(hostIdList, namespace, body, branchId, options)(axios, basePath);\n        },\n    };\n};\n/**\n * HostsApi - object-oriented interface\n * @export\n * @class HostsApi\n * @extends {BaseAPI}\n */\nvar HostsApi = /** @class */ (function (_super) {\n    __extends(HostsApi, _super);\n    function HostsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Create a new host and add it to the host list or update an existing hosts. A host is updated if there is already one with the same canonicals facts and belonging to the same account. <br /><br /> Required permissions: inventory:hosts:write <br /><br /> NOTICE: This operation is deprecated. The explicit creation of hosts is no longer supported. Hosts are created automatically based on uploads processed by the [payload ingress service](/docs/api/ingress#operations-default-post_upload) instead.\n     * @summary Create/update multiple host and add them to the host list\n     * @param {Array<CreateHostIn>} createHostIn A list of host objects to be added to the host list\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostAddHostList = function (createHostIn, options) {\n        return exports.HostsApiFp(this.configuration).apiHostAddHostList(createHostIn, options)(this.axios, this.basePath);\n    };\n    /**\n     * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Delete hosts by IDs\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostDeleteById = function (hostIdList, branchId, options) {\n        return exports.HostsApiFp(this.configuration).apiHostDeleteById(hostIdList, branchId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Find hosts by their IDs\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostById = function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n        return exports.HostsApiFp(this.configuration).apiHostGetHostById(hostIdList, branchId, perPage, page, orderBy, orderHow, options)(this.axios, this.basePath);\n    };\n    /**\n     * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Read the entire list of hosts\n     * @param {string} [displayName] A part of a searched host’s display name.\n     * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n     * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n     * @param {string} [insightsId] Search for a host by insights_id\n     * @param {string} [branchId] Filter by branch_id\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n     * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n     * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n     * @param {{ [key: string]: { [key: string]: string | any; }; }} [filter] Filters hosts based on system_profile fields\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostList = function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n        return exports.HostsApiFp(this.configuration).apiHostGetHostList(displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Return one or more hosts system profile\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostSystemProfileById = function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n        return exports.HostsApiFp(this.configuration).apiHostGetHostSystemProfileById(hostIdList, perPage, page, orderBy, orderHow, branchId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Get the number of tags on a host\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostTagCount = function (hostIdList, perPage, page, orderBy, orderHow, options) {\n        return exports.HostsApiFp(this.configuration).apiHostGetHostTagCount(hostIdList, perPage, page, orderBy, orderHow, options)(this.axios, this.basePath);\n    };\n    /**\n     * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Get the tags on a host\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostTags = function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n        return exports.HostsApiFp(this.configuration).apiHostGetHostTags(hostIdList, perPage, page, orderBy, orderHow, search, options)(this.axios, this.basePath);\n    };\n    /**\n     * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Merge facts under a namespace\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} namespace A namespace of the merged facts.\n     * @param {object} body A dictionary with the new facts to merge with the original ones.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostMergeFacts = function (hostIdList, namespace, body, branchId, options) {\n        return exports.HostsApiFp(this.configuration).apiHostMergeFacts(hostIdList, namespace, body, branchId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Update a host <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Update a host\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostPatchById = function (hostIdList, patchHostIn, branchId, options) {\n        return exports.HostsApiFp(this.configuration).apiHostPatchById(hostIdList, patchHostIn, branchId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Replace facts under a namespace\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} namespace A namespace of the merged facts.\n     * @param {object} body A dictionary with the new facts to replace the original ones.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostReplaceFacts = function (hostIdList, namespace, body, branchId, options) {\n        return exports.HostsApiFp(this.configuration).apiHostReplaceFacts(hostIdList, namespace, body, branchId, options)(this.axios, this.basePath);\n    };\n    return HostsApi;\n}(base_1.BaseAPI));\nexports.HostsApi = HostsApi;\n/**\n * TagsApi - axios parameter creator\n * @export\n */\nexports.TagsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary Get the active host tags for a given account\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'tag' | 'count'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTagGetTags: function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/tags\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (tags) {\n                localVarQueryParameter['tags'] = tags;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (orderHow !== undefined) {\n                localVarQueryParameter['order_how'] = orderHow;\n            }\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (staleness) {\n                localVarQueryParameter['staleness'] = staleness;\n            }\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n            if (registeredWith !== undefined) {\n                localVarQueryParameter['registered_with'] = registeredWith;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * TagsApi - functional programming interface\n * @export\n */\nexports.TagsApiFp = function (configuration) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary Get the active host tags for a given account\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'tag' | 'count'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTagGetTags: function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options) {\n            var localVarAxiosArgs = exports.TagsApiAxiosParamCreator(configuration).apiTagGetTags(tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * TagsApi - factory interface\n * @export\n */\nexports.TagsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary Get the active host tags for a given account\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'tag' | 'count'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTagGetTags: function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options) {\n            return exports.TagsApiFp(configuration).apiTagGetTags(tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options)(axios, basePath);\n        },\n    };\n};\n/**\n * TagsApi - object-oriented interface\n * @export\n * @class TagsApi\n * @extends {BaseAPI}\n */\nvar TagsApi = /** @class */ (function (_super) {\n    __extends(TagsApi, _super);\n    function TagsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Required permissions: inventory:hosts:read\n     * @summary Get the active host tags for a given account\n     * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n     * @param {'tag' | 'count'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n     * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n     * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TagsApi\n     */\n    TagsApi.prototype.apiTagGetTags = function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options) {\n        return exports.TagsApiFp(this.configuration).apiTagGetTags(tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options)(this.axios, this.basePath);\n    };\n    return TagsApi;\n}(base_1.BaseAPI));\nexports.TagsApi = TagsApi;\n","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar axios_1 = require(\"axios\");\nexports.BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\nexports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n/**\n *\n * @export\n * @class BaseAPI\n */\nvar BaseAPI = /** @class */ (function () {\n    function BaseAPI(configuration, basePath, axios) {\n        if (basePath === void 0) { basePath = exports.BASE_PATH; }\n        if (axios === void 0) { axios = axios_1.default; }\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n    return BaseAPI;\n}());\nexports.BaseAPI = BaseAPI;\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nvar RequiredError = /** @class */ (function (_super) {\n    __extends(RequiredError, _super);\n    function RequiredError(field, msg) {\n        var _this = _super.call(this, msg) || this;\n        _this.field = field;\n        _this.name = \"RequiredError\";\n        return _this;\n    }\n    return RequiredError;\n}(Error));\nexports.RequiredError = RequiredError;\n","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Configuration = /** @class */ (function () {\n    function Configuration(param) {\n        if (param === void 0) { param = {}; }\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n    }\n    return Configuration;\n}());\nexports.Configuration = Configuration;\n"],"sourceRoot":""}