{"version":3,"sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/@redhat-cloud-services/host-inventory-client/dist/index.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/@redhat-cloud-services/host-inventory-client/dist/api.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/@redhat-cloud-services/host-inventory-client/dist/base.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/@redhat-cloud-services/host-inventory-client/dist/configuration.js"],"names":["__export","m","p","exports","hasOwnProperty","Object","defineProperty","value","extendStatics","__extends","this","d","b","setPrototypeOf","__proto__","Array","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","v","op","TypeError","pop","push","globalImportUrl","axios_1","base_1","SystemProfileSelinuxCurrentModeEnum","SystemProfileSelinuxConfigFileEnum","SystemProfileOperatingSystemNameEnum","DefaultApiAxiosParamCreator","configuration","_this","apiSystemProfileValidateSchema","repoBranch","repoFork","days","options","localVarUrlObj","baseOptions","localVarRequestOptions","localVarHeaderParameter","localVarQueryParameter","localVarApiKeyValue","_a","headersFromBaseOptions","_b","RequiredError","parse","method","apiKey","undefined","query","search","headers","url","format","DefaultApiFp","localVarAxiosArgs","axios","basePath","default","BASE_PATH","axiosRequestArgs","request","DefaultApiFactory","DefaultApi","_super","BaseAPI","HostsApiAxiosParamCreator","apiHostDeleteById","hostIdList","branchId","localVarPath","replace","encodeURIComponent","String","apiHostGetHostById","perPage","page","orderBy","orderHow","apiHostGetHostList","displayName","fqdn","hostnameOrId","insightsId","staleness","tags","registeredWith","filter","apiHostGetHostSystemProfileById","apiHostGetHostTagCount","apiHostGetHostTags","apiHostHostCheckin","createCheckIn","accessToken","needsSerialization","data","JSON","stringify","apiHostMergeFacts","namespace","apiHostPatchById","patchHostIn","apiHostReplaceFacts","HostsApiFp","HostsApiFactory","HostsApi","SapSystemApiAxiosParamCreator","apiSystemProfileGetSapSids","apiSystemProfileGetSapSystem","SapSystemApiFp","SapSystemApiFactory","SapSystemApi","TagsApiAxiosParamCreator","apiTagGetTags","TagsApiFp","TagsApiFactory","TagsApi","COLLECTION_FORMATS","csv","ssv","tsv","pipes","field","msg","name","Error","Configuration","param","username","password"],"mappings":"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","file":"vendors~inventory~inventory-general-info.175145a28685c4851ff8.js","sourcesContent":["\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./api\"));\n__export(require(\"./configuration\"));\n","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar globalImportUrl = require(\"url\");\nvar axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar base_1 = require(\"./base\");\n/**\n    * @export\n    * @enum {string}\n    */\nvar SystemProfileSelinuxCurrentModeEnum;\n(function (SystemProfileSelinuxCurrentModeEnum) {\n    SystemProfileSelinuxCurrentModeEnum[\"Enforcing\"] = \"enforcing\";\n    SystemProfileSelinuxCurrentModeEnum[\"Permissive\"] = \"permissive\";\n    SystemProfileSelinuxCurrentModeEnum[\"Disabled\"] = \"disabled\";\n})(SystemProfileSelinuxCurrentModeEnum = exports.SystemProfileSelinuxCurrentModeEnum || (exports.SystemProfileSelinuxCurrentModeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar SystemProfileSelinuxConfigFileEnum;\n(function (SystemProfileSelinuxConfigFileEnum) {\n    SystemProfileSelinuxConfigFileEnum[\"Enforcing\"] = \"enforcing\";\n    SystemProfileSelinuxConfigFileEnum[\"Permissive\"] = \"permissive\";\n    SystemProfileSelinuxConfigFileEnum[\"Disabled\"] = \"disabled\";\n})(SystemProfileSelinuxConfigFileEnum = exports.SystemProfileSelinuxConfigFileEnum || (exports.SystemProfileSelinuxConfigFileEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar SystemProfileOperatingSystemNameEnum;\n(function (SystemProfileOperatingSystemNameEnum) {\n    SystemProfileOperatingSystemNameEnum[\"RHEL\"] = \"RHEL\";\n})(SystemProfileOperatingSystemNameEnum = exports.SystemProfileOperatingSystemNameEnum || (exports.SystemProfileOperatingSystemNameEnum = {}));\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexports.DefaultApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary validate system profile schema\n         * @param {string} repoBranch The branch of the inventory-schemas repo to use\n         * @param {string} [repoFork] The fork of the inventory-schemas repo to use\n         * @param {number} [days] How many days worth of kafka messages to validate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileValidateSchema: function (repoBranch, repoFork, days, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'repoBranch' is not null or undefined\n                            if (repoBranch === null || repoBranch === undefined) {\n                                throw new base_1.RequiredError('repoBranch', 'Required parameter repoBranch was null or undefined when calling apiSystemProfileValidateSchema.');\n                            }\n                            localVarPath = \"/system_profile/validate_schema\";\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (repoFork !== undefined) {\n                                localVarQueryParameter['repo_fork'] = repoFork;\n                            }\n                            if (repoBranch !== undefined) {\n                                localVarQueryParameter['repo_branch'] = repoBranch;\n                            }\n                            if (days !== undefined) {\n                                localVarQueryParameter['days'] = days;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexports.DefaultApiFp = function (configuration) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary validate system profile schema\n         * @param {string} repoBranch The branch of the inventory-schemas repo to use\n         * @param {string} [repoFork] The fork of the inventory-schemas repo to use\n         * @param {number} [days] How many days worth of kafka messages to validate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileValidateSchema: function (repoBranch, repoFork, days, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).apiSystemProfileValidateSchema(repoBranch, repoFork, days, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * DefaultApi - factory interface\n * @export\n */\nexports.DefaultApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary validate system profile schema\n         * @param {string} repoBranch The branch of the inventory-schemas repo to use\n         * @param {string} [repoFork] The fork of the inventory-schemas repo to use\n         * @param {number} [days] How many days worth of kafka messages to validate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileValidateSchema: function (repoBranch, repoFork, days, options) {\n            return exports.DefaultApiFp(configuration).apiSystemProfileValidateSchema(repoBranch, repoFork, days, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nvar DefaultApi = /** @class */ (function (_super) {\n    __extends(DefaultApi, _super);\n    function DefaultApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Required permissions: inventory:hosts:read\n     * @summary validate system profile schema\n     * @param {string} repoBranch The branch of the inventory-schemas repo to use\n     * @param {string} [repoFork] The fork of the inventory-schemas repo to use\n     * @param {number} [days] How many days worth of kafka messages to validate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    DefaultApi.prototype.apiSystemProfileValidateSchema = function (repoBranch, repoFork, days, options) {\n        var _this = this;\n        return exports.DefaultApiFp(this.configuration).apiSystemProfileValidateSchema(repoBranch, repoFork, days, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return DefaultApi;\n}(base_1.BaseAPI));\nexports.DefaultApi = DefaultApi;\n/**\n * HostsApi - axios parameter creator\n * @export\n */\nexports.HostsApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Delete hosts by IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostDeleteById: function (hostIdList, branchId, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostDeleteById.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Find hosts by their IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostById: function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostById.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (orderBy !== undefined) {\n                                localVarQueryParameter['order_by'] = orderBy;\n                            }\n                            if (orderHow !== undefined) {\n                                localVarQueryParameter['order_how'] = orderHow;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Read the entire list of hosts\n         * @param {string} [displayName] A part of a searched host’s display name.\n         * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n         * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n         * @param {string} [insightsId] Search for a host by insights_id\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostList: function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            localVarPath = \"/hosts\";\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (displayName !== undefined) {\n                                localVarQueryParameter['display_name'] = displayName;\n                            }\n                            if (fqdn !== undefined) {\n                                localVarQueryParameter['fqdn'] = fqdn;\n                            }\n                            if (hostnameOrId !== undefined) {\n                                localVarQueryParameter['hostname_or_id'] = hostnameOrId;\n                            }\n                            if (insightsId !== undefined) {\n                                localVarQueryParameter['insights_id'] = insightsId;\n                            }\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (orderBy !== undefined) {\n                                localVarQueryParameter['order_by'] = orderBy;\n                            }\n                            if (orderHow !== undefined) {\n                                localVarQueryParameter['order_how'] = orderHow;\n                            }\n                            if (staleness) {\n                                localVarQueryParameter['staleness'] = staleness;\n                            }\n                            if (tags) {\n                                localVarQueryParameter['tags'] = tags;\n                            }\n                            if (registeredWith !== undefined) {\n                                localVarQueryParameter['registered_with'] = registeredWith;\n                            }\n                            if (filter !== undefined) {\n                                localVarQueryParameter['filter'] = filter;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Return one or more hosts system profile\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostSystemProfileById: function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostSystemProfileById.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}/system_profile\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (orderBy !== undefined) {\n                                localVarQueryParameter['order_by'] = orderBy;\n                            }\n                            if (orderHow !== undefined) {\n                                localVarQueryParameter['order_how'] = orderHow;\n                            }\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the number of tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTagCount: function (hostIdList, perPage, page, orderBy, orderHow, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostTagCount.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}/tags/count\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (orderBy !== undefined) {\n                                localVarQueryParameter['order_by'] = orderBy;\n                            }\n                            if (orderHow !== undefined) {\n                                localVarQueryParameter['order_how'] = orderHow;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTags: function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostTags.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}/tags\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (orderBy !== undefined) {\n                                localVarQueryParameter['order_by'] = orderBy;\n                            }\n                            if (orderHow !== undefined) {\n                                localVarQueryParameter['order_how'] = orderHow;\n                            }\n                            if (search !== undefined) {\n                                localVarQueryParameter['search'] = search;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Finds a host and updates its staleness timestamps. It uses the supplied canonical facts to determine which host to update. By default, the staleness timestamp is set to 1 hour from when the request is received; however, this can be overridden by supplying the interval. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update staleness timestamps for a host matching the provided facts\n         * @param {CreateCheckIn} createCheckIn Data required to create a check-in record for a host.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostHostCheckin: function (createCheckIn, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'createCheckIn' is not null or undefined\n                            if (createCheckIn === null || createCheckIn === undefined) {\n                                throw new base_1.RequiredError('createCheckIn', 'Required parameter createCheckIn was null or undefined when calling apiHostHostCheckin.');\n                            }\n                            localVarPath = \"/hosts/checkin\";\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            // authentication BearerAuth required\n                            // http bearer authentication required\n                            if (configuration && configuration.accessToken) {\n                                accessToken = typeof configuration.accessToken === 'function'\n                                    ? configuration.accessToken()\n                                    : configuration.accessToken;\n                                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n                            }\n                            localVarHeaderParameter['Content-Type'] = 'application/json';\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            needsSerialization = (typeof createCheckIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createCheckIn !== undefined ? createCheckIn : {}) : (createCheckIn || \"\");\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Merge facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to merge with the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostMergeFacts: function (hostIdList, namespace, body, branchId, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostMergeFacts.');\n                            }\n                            // verify required parameter 'namespace' is not null or undefined\n                            if (namespace === null || namespace === undefined) {\n                                throw new base_1.RequiredError('namespace', 'Required parameter namespace was null or undefined when calling apiHostMergeFacts.');\n                            }\n                            // verify required parameter 'body' is not null or undefined\n                            if (body === null || body === undefined) {\n                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling apiHostMergeFacts.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}/facts/{namespace}\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)))\n                                .replace(\"{\" + \"namespace\" + \"}\", encodeURIComponent(String(namespace)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            localVarHeaderParameter['Content-Type'] = 'application/json';\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Update a host <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostPatchById: function (hostIdList, patchHostIn, branchId, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostPatchById.');\n                            }\n                            // verify required parameter 'patchHostIn' is not null or undefined\n                            if (patchHostIn === null || patchHostIn === undefined) {\n                                throw new base_1.RequiredError('patchHostIn', 'Required parameter patchHostIn was null or undefined when calling apiHostPatchById.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            localVarHeaderParameter['Content-Type'] = 'application/json';\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            needsSerialization = (typeof patchHostIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchHostIn !== undefined ? patchHostIn : {}) : (patchHostIn || \"\");\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Replace facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to replace the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostReplaceFacts: function (hostIdList, namespace, body, branchId, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // verify required parameter 'hostIdList' is not null or undefined\n                            if (hostIdList === null || hostIdList === undefined) {\n                                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostReplaceFacts.');\n                            }\n                            // verify required parameter 'namespace' is not null or undefined\n                            if (namespace === null || namespace === undefined) {\n                                throw new base_1.RequiredError('namespace', 'Required parameter namespace was null or undefined when calling apiHostReplaceFacts.');\n                            }\n                            // verify required parameter 'body' is not null or undefined\n                            if (body === null || body === undefined) {\n                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling apiHostReplaceFacts.');\n                            }\n                            localVarPath = \"/hosts/{host_id_list}/facts/{namespace}\"\n                                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)))\n                                .replace(\"{\" + \"namespace\" + \"}\", encodeURIComponent(String(namespace)));\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (branchId !== undefined) {\n                                localVarQueryParameter['branch_id'] = branchId;\n                            }\n                            localVarHeaderParameter['Content-Type'] = 'application/json';\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * HostsApi - functional programming interface\n * @export\n */\nexports.HostsApiFp = function (configuration) {\n    return {\n        /**\n         * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Delete hosts by IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostDeleteById: function (hostIdList, branchId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostDeleteById(hostIdList, branchId, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Find hosts by their IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostById: function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostById(hostIdList, branchId, perPage, page, orderBy, orderHow, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Read the entire list of hosts\n         * @param {string} [displayName] A part of a searched host’s display name.\n         * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n         * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n         * @param {string} [insightsId] Search for a host by insights_id\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostList: function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostList(displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Return one or more hosts system profile\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostSystemProfileById: function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostSystemProfileById(hostIdList, perPage, page, orderBy, orderHow, branchId, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the number of tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTagCount: function (hostIdList, perPage, page, orderBy, orderHow, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostTagCount(hostIdList, perPage, page, orderBy, orderHow, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTags: function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostTags(hostIdList, perPage, page, orderBy, orderHow, search, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Finds a host and updates its staleness timestamps. It uses the supplied canonical facts to determine which host to update. By default, the staleness timestamp is set to 1 hour from when the request is received; however, this can be overridden by supplying the interval. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update staleness timestamps for a host matching the provided facts\n         * @param {CreateCheckIn} createCheckIn Data required to create a check-in record for a host.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostHostCheckin: function (createCheckIn, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostHostCheckin(createCheckIn, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Merge facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to merge with the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostMergeFacts: function (hostIdList, namespace, body, branchId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostMergeFacts(hostIdList, namespace, body, branchId, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Update a host <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostPatchById: function (hostIdList, patchHostIn, branchId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostPatchById(hostIdList, patchHostIn, branchId, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Replace facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to replace the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostReplaceFacts: function (hostIdList, namespace, body, branchId, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.HostsApiAxiosParamCreator(configuration).apiHostReplaceFacts(hostIdList, namespace, body, branchId, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * HostsApi - factory interface\n * @export\n */\nexports.HostsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Delete hosts by IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostDeleteById: function (hostIdList, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostDeleteById(hostIdList, branchId, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Find hosts by their IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostById: function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostById(hostIdList, branchId, perPage, page, orderBy, orderHow, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Read the entire list of hosts\n         * @param {string} [displayName] A part of a searched host’s display name.\n         * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n         * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n         * @param {string} [insightsId] Search for a host by insights_id\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostList: function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostList(displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Return one or more hosts system profile\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostSystemProfileById: function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostSystemProfileById(hostIdList, perPage, page, orderBy, orderHow, branchId, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the number of tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTagCount: function (hostIdList, perPage, page, orderBy, orderHow, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostTagCount(hostIdList, perPage, page, orderBy, orderHow, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTags: function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostTags(hostIdList, perPage, page, orderBy, orderHow, search, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Finds a host and updates its staleness timestamps. It uses the supplied canonical facts to determine which host to update. By default, the staleness timestamp is set to 1 hour from when the request is received; however, this can be overridden by supplying the interval. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update staleness timestamps for a host matching the provided facts\n         * @param {CreateCheckIn} createCheckIn Data required to create a check-in record for a host.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostHostCheckin: function (createCheckIn, options) {\n            return exports.HostsApiFp(configuration).apiHostHostCheckin(createCheckIn, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Merge facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to merge with the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostMergeFacts: function (hostIdList, namespace, body, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostMergeFacts(hostIdList, namespace, body, branchId, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Update a host <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostPatchById: function (hostIdList, patchHostIn, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostPatchById(hostIdList, patchHostIn, branchId, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Replace facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to replace the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostReplaceFacts: function (hostIdList, namespace, body, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostReplaceFacts(hostIdList, namespace, body, branchId, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\n/**\n * HostsApi - object-oriented interface\n * @export\n * @class HostsApi\n * @extends {BaseAPI}\n */\nvar HostsApi = /** @class */ (function (_super) {\n    __extends(HostsApi, _super);\n    function HostsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Delete hosts by IDs\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostDeleteById = function (hostIdList, branchId, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostDeleteById(hostIdList, branchId, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Find hosts by their IDs\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostById = function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostGetHostById(hostIdList, branchId, perPage, page, orderBy, orderHow, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Read the entire list of hosts\n     * @param {string} [displayName] A part of a searched host’s display name.\n     * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n     * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n     * @param {string} [insightsId] Search for a host by insights_id\n     * @param {string} [branchId] Filter by branch_id\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n     * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n     * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n     * @param {object} [filter] Filters hosts based on system_profile fields\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostList = function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostGetHostList(displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Return one or more hosts system profile\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostSystemProfileById = function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostGetHostSystemProfileById(hostIdList, perPage, page, orderBy, orderHow, branchId, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Get the number of tags on a host\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostTagCount = function (hostIdList, perPage, page, orderBy, orderHow, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostGetHostTagCount(hostIdList, perPage, page, orderBy, orderHow, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Get the tags on a host\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostTags = function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostGetHostTags(hostIdList, perPage, page, orderBy, orderHow, search, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Finds a host and updates its staleness timestamps. It uses the supplied canonical facts to determine which host to update. By default, the staleness timestamp is set to 1 hour from when the request is received; however, this can be overridden by supplying the interval. <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Update staleness timestamps for a host matching the provided facts\n     * @param {CreateCheckIn} createCheckIn Data required to create a check-in record for a host.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostHostCheckin = function (createCheckIn, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostHostCheckin(createCheckIn, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Merge facts under a namespace\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} namespace A namespace of the merged facts.\n     * @param {object} body A dictionary with the new facts to merge with the original ones.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostMergeFacts = function (hostIdList, namespace, body, branchId, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostMergeFacts(hostIdList, namespace, body, branchId, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Update a host <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Update a host\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostPatchById = function (hostIdList, patchHostIn, branchId, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostPatchById(hostIdList, patchHostIn, branchId, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Replace facts under a namespace\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} namespace A namespace of the merged facts.\n     * @param {object} body A dictionary with the new facts to replace the original ones.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostReplaceFacts = function (hostIdList, namespace, body, branchId, options) {\n        var _this = this;\n        return exports.HostsApiFp(this.configuration).apiHostReplaceFacts(hostIdList, namespace, body, branchId, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return HostsApi;\n}(base_1.BaseAPI));\nexports.HostsApi = HostsApi;\n/**\n * SapSystemApi - axios parameter creator\n * @export\n */\nexports.SapSystemApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary get sap system values\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileGetSapSids: function (search, tags, perPage, page, staleness, registeredWith, filter, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            localVarPath = \"/system_profile/sap_sids\";\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (search !== undefined) {\n                                localVarQueryParameter['search'] = search;\n                            }\n                            if (tags) {\n                                localVarQueryParameter['tags'] = tags;\n                            }\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (staleness) {\n                                localVarQueryParameter['staleness'] = staleness;\n                            }\n                            if (registeredWith !== undefined) {\n                                localVarQueryParameter['registered_with'] = registeredWith;\n                            }\n                            if (filter !== undefined) {\n                                localVarQueryParameter['filter'] = filter;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary get sap system values\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileGetSapSystem: function (tags, perPage, page, staleness, registeredWith, filter, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            localVarPath = \"/system_profile/sap_system\";\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (tags) {\n                                localVarQueryParameter['tags'] = tags;\n                            }\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (staleness) {\n                                localVarQueryParameter['staleness'] = staleness;\n                            }\n                            if (registeredWith !== undefined) {\n                                localVarQueryParameter['registered_with'] = registeredWith;\n                            }\n                            if (filter !== undefined) {\n                                localVarQueryParameter['filter'] = filter;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * SapSystemApi - functional programming interface\n * @export\n */\nexports.SapSystemApiFp = function (configuration) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary get sap system values\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileGetSapSids: function (search, tags, perPage, page, staleness, registeredWith, filter, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.SapSystemApiAxiosParamCreator(configuration).apiSystemProfileGetSapSids(search, tags, perPage, page, staleness, registeredWith, filter, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary get sap system values\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileGetSapSystem: function (tags, perPage, page, staleness, registeredWith, filter, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.SapSystemApiAxiosParamCreator(configuration).apiSystemProfileGetSapSystem(tags, perPage, page, staleness, registeredWith, filter, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * SapSystemApi - factory interface\n * @export\n */\nexports.SapSystemApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary get sap system values\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileGetSapSids: function (search, tags, perPage, page, staleness, registeredWith, filter, options) {\n            return exports.SapSystemApiFp(configuration).apiSystemProfileGetSapSids(search, tags, perPage, page, staleness, registeredWith, filter, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary get sap system values\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiSystemProfileGetSapSystem: function (tags, perPage, page, staleness, registeredWith, filter, options) {\n            return exports.SapSystemApiFp(configuration).apiSystemProfileGetSapSystem(tags, perPage, page, staleness, registeredWith, filter, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\n/**\n * SapSystemApi - object-oriented interface\n * @export\n * @class SapSystemApi\n * @extends {BaseAPI}\n */\nvar SapSystemApi = /** @class */ (function (_super) {\n    __extends(SapSystemApi, _super);\n    function SapSystemApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Required permissions: inventory:hosts:read\n     * @summary get sap system values\n     * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n     * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n     * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n     * @param {object} [filter] Filters hosts based on system_profile fields\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SapSystemApi\n     */\n    SapSystemApi.prototype.apiSystemProfileGetSapSids = function (search, tags, perPage, page, staleness, registeredWith, filter, options) {\n        var _this = this;\n        return exports.SapSystemApiFp(this.configuration).apiSystemProfileGetSapSids(search, tags, perPage, page, staleness, registeredWith, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Required permissions: inventory:hosts:read\n     * @summary get sap system values\n     * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n     * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n     * @param {object} [filter] Filters hosts based on system_profile fields\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SapSystemApi\n     */\n    SapSystemApi.prototype.apiSystemProfileGetSapSystem = function (tags, perPage, page, staleness, registeredWith, filter, options) {\n        var _this = this;\n        return exports.SapSystemApiFp(this.configuration).apiSystemProfileGetSapSystem(tags, perPage, page, staleness, registeredWith, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return SapSystemApi;\n}(base_1.BaseAPI));\nexports.SapSystemApi = SapSystemApi;\n/**\n * TagsApi - axios parameter creator\n * @export\n */\nexports.TagsApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary Get the active host tags for a given account\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'tag' | 'count'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTagGetTags: function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            localVarPath = \"/tags\";\n                            localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                            if (configuration) {\n                                baseOptions = configuration.baseOptions;\n                            }\n                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                            localVarHeaderParameter = {};\n                            localVarQueryParameter = {};\n                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];\n                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, configuration.apiKey(\"x-rh-identity\")];\n                        case 1:\n                            _a = _b.sent();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, configuration.apiKey];\n                        case 3:\n                            _a = _b.sent();\n                            _b.label = 4;\n                        case 4:\n                            localVarApiKeyValue = _a;\n                            localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n                            _b.label = 5;\n                        case 5:\n                            if (tags) {\n                                localVarQueryParameter['tags'] = tags;\n                            }\n                            if (orderBy !== undefined) {\n                                localVarQueryParameter['order_by'] = orderBy;\n                            }\n                            if (orderHow !== undefined) {\n                                localVarQueryParameter['order_how'] = orderHow;\n                            }\n                            if (perPage !== undefined) {\n                                localVarQueryParameter['per_page'] = perPage;\n                            }\n                            if (page !== undefined) {\n                                localVarQueryParameter['page'] = page;\n                            }\n                            if (staleness) {\n                                localVarQueryParameter['staleness'] = staleness;\n                            }\n                            if (search !== undefined) {\n                                localVarQueryParameter['search'] = search;\n                            }\n                            if (registeredWith !== undefined) {\n                                localVarQueryParameter['registered_with'] = registeredWith;\n                            }\n                            if (filter !== undefined) {\n                                localVarQueryParameter['filter'] = filter;\n                            }\n                            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                            delete localVarUrlObj.search;\n                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                            return [2 /*return*/, {\n                                    url: globalImportUrl.format(localVarUrlObj),\n                                    options: localVarRequestOptions,\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * TagsApi - functional programming interface\n * @export\n */\nexports.TagsApiFp = function (configuration) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary Get the active host tags for a given account\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'tag' | 'count'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTagGetTags: function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, exports.TagsApiAxiosParamCreator(configuration).apiTagGetTags(tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\n/**\n * TagsApi - factory interface\n * @export\n */\nexports.TagsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary Get the active host tags for a given account\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'tag' | 'count'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {object} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTagGetTags: function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options) {\n            return exports.TagsApiFp(configuration).apiTagGetTags(tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\n/**\n * TagsApi - object-oriented interface\n * @export\n * @class TagsApi\n * @extends {BaseAPI}\n */\nvar TagsApi = /** @class */ (function (_super) {\n    __extends(TagsApi, _super);\n    function TagsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Required permissions: inventory:hosts:read\n     * @summary Get the active host tags for a given account\n     * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n     * @param {'tag' | 'count'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n     * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n     * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n     * @param {object} [filter] Filters hosts based on system_profile fields\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TagsApi\n     */\n    TagsApi.prototype.apiTagGetTags = function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options) {\n        var _this = this;\n        return exports.TagsApiFp(this.configuration).apiTagGetTags(tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return TagsApi;\n}(base_1.BaseAPI));\nexports.TagsApi = TagsApi;\n","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar axios_1 = require(\"axios\");\nexports.BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\nexports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n/**\n *\n * @export\n * @class BaseAPI\n */\nvar BaseAPI = /** @class */ (function () {\n    function BaseAPI(configuration, basePath, axios) {\n        if (basePath === void 0) { basePath = exports.BASE_PATH; }\n        if (axios === void 0) { axios = axios_1.default; }\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n    return BaseAPI;\n}());\nexports.BaseAPI = BaseAPI;\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nvar RequiredError = /** @class */ (function (_super) {\n    __extends(RequiredError, _super);\n    function RequiredError(field, msg) {\n        var _this = _super.call(this, msg) || this;\n        _this.field = field;\n        _this.name = \"RequiredError\";\n        return _this;\n    }\n    return RequiredError;\n}(Error));\nexports.RequiredError = RequiredError;\n","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Configuration = /** @class */ (function () {\n    function Configuration(param) {\n        if (param === void 0) { param = {}; }\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n    }\n    return Configuration;\n}());\nexports.Configuration = Configuration;\n"],"sourceRoot":""}