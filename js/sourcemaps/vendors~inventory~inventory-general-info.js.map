{"version":3,"sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/@redhat-cloud-services/host-inventory-client/dist/index.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/@redhat-cloud-services/host-inventory-client/dist/api.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/@redhat-cloud-services/host-inventory-client/dist/base.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory/node_modules/@redhat-cloud-services/host-inventory-client/dist/configuration.js"],"names":["__export","m","p","exports","hasOwnProperty","Object","defineProperty","value","extendStatics","__extends","this","d","b","setPrototypeOf","__proto__","Array","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","globalImportUrl","axios_1","base_1","HostsApiAxiosParamCreator","configuration","apiHostAddHostList","createHostIn","options","RequiredError","baseOptions","localVarUrlObj","parse","localVarRequestOptions","method","localVarHeaderParameter","apiKey","localVarApiKeyValue","accessToken","query","search","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","undefined","url","format","apiHostDeleteById","hostIdList","branchId","localVarPath","replace","encodeURIComponent","String","localVarQueryParameter","apiHostGetHostById","perPage","page","orderBy","orderHow","apiHostGetHostList","displayName","fqdn","hostnameOrId","insightsId","staleness","tags","registeredWith","filter","apiHostGetHostSystemProfileById","apiHostGetHostTagCount","apiHostGetHostTags","apiHostMergeFacts","namespace","body","apiHostPatchById","patchHostIn","apiHostReplaceFacts","HostsApiFp","localVarAxiosArgs","axios","basePath","default","BASE_PATH","axiosRequestArgs","request","HostsApiFactory","HostsApi","_super","BaseAPI","TagsApiAxiosParamCreator","apiTagGetTags","TagsApiFp","TagsApiFactory","TagsApi","COLLECTION_FORMATS","csv","ssv","tsv","pipes","field","msg","_this","name","Error","Configuration","param","username","password"],"mappings":"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","file":"vendors~inventory~inventory-general-info.121cd7596e4aea28b3e9.js","sourcesContent":["\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./api\"));\n__export(require(\"./configuration\"));\n","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar globalImportUrl = require(\"url\");\nvar axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar base_1 = require(\"./base\");\n/**\n * HostsApi - axios parameter creator\n * @export\n */\nexports.HostsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create a new host and add it to the host list or update an existing hosts. A host is updated if there is already one with the same canonicals facts and belonging to the same account. <br /><br /> Required permissions: inventory:hosts:write <br /><br /> NOTICE: This operation is deprecated. The explicit creation of hosts is no longer supported. Hosts are created automatically based on uploads processed by the [payload ingress service](/docs/api/ingress#operations-default-post_upload) instead.\n         * @summary Create/update multiple host and add them to the host list\n         * @param {Array<CreateHostIn>} createHostIn A list of host objects to be added to the host list\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostAddHostList: function (createHostIn, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'createHostIn' is not null or undefined\n            if (createHostIn === null || createHostIn === undefined) {\n                throw new base_1.RequiredError('createHostIn', 'Required parameter createHostIn was null or undefined when calling apiHostAddHostList.');\n            }\n            var localVarPath = \"/hosts\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            // authentication BearerAuth required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                var accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof createHostIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createHostIn !== undefined ? createHostIn : {}) : (createHostIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Delete hosts by IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostDeleteById: function (hostIdList, branchId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostDeleteById.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Find hosts by their IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostById: function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostById.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (orderHow !== undefined) {\n                localVarQueryParameter['order_how'] = orderHow;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Read the entire list of hosts\n         * @param {string} [displayName] A part of a searched host’s display name.\n         * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n         * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n         * @param {string} [insightsId] Search for a host by insights_id\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {{ [key: string]: { [key: string]: string | any; }; }} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostList: function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/hosts\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (displayName !== undefined) {\n                localVarQueryParameter['display_name'] = displayName;\n            }\n            if (fqdn !== undefined) {\n                localVarQueryParameter['fqdn'] = fqdn;\n            }\n            if (hostnameOrId !== undefined) {\n                localVarQueryParameter['hostname_or_id'] = hostnameOrId;\n            }\n            if (insightsId !== undefined) {\n                localVarQueryParameter['insights_id'] = insightsId;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (orderHow !== undefined) {\n                localVarQueryParameter['order_how'] = orderHow;\n            }\n            if (staleness) {\n                localVarQueryParameter['staleness'] = staleness;\n            }\n            if (tags) {\n                localVarQueryParameter['tags'] = tags;\n            }\n            if (registeredWith !== undefined) {\n                localVarQueryParameter['registered_with'] = registeredWith;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Return one or more hosts system profile\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostSystemProfileById: function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostSystemProfileById.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}/system_profile\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (orderHow !== undefined) {\n                localVarQueryParameter['order_how'] = orderHow;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the number of tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTagCount: function (hostIdList, perPage, page, orderBy, orderHow, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostTagCount.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}/tags/count\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (orderHow !== undefined) {\n                localVarQueryParameter['order_how'] = orderHow;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTags: function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostGetHostTags.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}/tags\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (orderHow !== undefined) {\n                localVarQueryParameter['order_how'] = orderHow;\n            }\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Merge facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to merge with the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostMergeFacts: function (hostIdList, namespace, body, branchId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostMergeFacts.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new base_1.RequiredError('namespace', 'Required parameter namespace was null or undefined when calling apiHostMergeFacts.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling apiHostMergeFacts.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}/facts/{namespace}\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)))\n                .replace(\"{\" + \"namespace\" + \"}\", encodeURIComponent(String(namespace)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a host <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostPatchById: function (hostIdList, patchHostIn, branchId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostPatchById.');\n            }\n            // verify required parameter 'patchHostIn' is not null or undefined\n            if (patchHostIn === null || patchHostIn === undefined) {\n                throw new base_1.RequiredError('patchHostIn', 'Required parameter patchHostIn was null or undefined when calling apiHostPatchById.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof patchHostIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchHostIn !== undefined ? patchHostIn : {}) : (patchHostIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Replace facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to replace the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostReplaceFacts: function (hostIdList, namespace, body, branchId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hostIdList' is not null or undefined\n            if (hostIdList === null || hostIdList === undefined) {\n                throw new base_1.RequiredError('hostIdList', 'Required parameter hostIdList was null or undefined when calling apiHostReplaceFacts.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new base_1.RequiredError('namespace', 'Required parameter namespace was null or undefined when calling apiHostReplaceFacts.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling apiHostReplaceFacts.');\n            }\n            var localVarPath = \"/hosts/{host_id_list}/facts/{namespace}\"\n                .replace(\"{\" + \"host_id_list\" + \"}\", encodeURIComponent(String(hostIdList)))\n                .replace(\"{\" + \"namespace\" + \"}\", encodeURIComponent(String(namespace)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (branchId !== undefined) {\n                localVarQueryParameter['branch_id'] = branchId;\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * HostsApi - functional programming interface\n * @export\n */\nexports.HostsApiFp = function (configuration) {\n    return {\n        /**\n         * Create a new host and add it to the host list or update an existing hosts. A host is updated if there is already one with the same canonicals facts and belonging to the same account. <br /><br /> Required permissions: inventory:hosts:write <br /><br /> NOTICE: This operation is deprecated. The explicit creation of hosts is no longer supported. Hosts are created automatically based on uploads processed by the [payload ingress service](/docs/api/ingress#operations-default-post_upload) instead.\n         * @summary Create/update multiple host and add them to the host list\n         * @param {Array<CreateHostIn>} createHostIn A list of host objects to be added to the host list\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostAddHostList: function (createHostIn, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostAddHostList(createHostIn, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Delete hosts by IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostDeleteById: function (hostIdList, branchId, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostDeleteById(hostIdList, branchId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Find hosts by their IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostById: function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostById(hostIdList, branchId, perPage, page, orderBy, orderHow, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Read the entire list of hosts\n         * @param {string} [displayName] A part of a searched host’s display name.\n         * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n         * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n         * @param {string} [insightsId] Search for a host by insights_id\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {{ [key: string]: { [key: string]: string | any; }; }} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostList: function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostList(displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Return one or more hosts system profile\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostSystemProfileById: function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostSystemProfileById(hostIdList, perPage, page, orderBy, orderHow, branchId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the number of tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTagCount: function (hostIdList, perPage, page, orderBy, orderHow, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostTagCount(hostIdList, perPage, page, orderBy, orderHow, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTags: function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostGetHostTags(hostIdList, perPage, page, orderBy, orderHow, search, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Merge facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to merge with the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostMergeFacts: function (hostIdList, namespace, body, branchId, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostMergeFacts(hostIdList, namespace, body, branchId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Update a host <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostPatchById: function (hostIdList, patchHostIn, branchId, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostPatchById(hostIdList, patchHostIn, branchId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Replace facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to replace the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostReplaceFacts: function (hostIdList, namespace, body, branchId, options) {\n            var localVarAxiosArgs = exports.HostsApiAxiosParamCreator(configuration).apiHostReplaceFacts(hostIdList, namespace, body, branchId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * HostsApi - factory interface\n * @export\n */\nexports.HostsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Create a new host and add it to the host list or update an existing hosts. A host is updated if there is already one with the same canonicals facts and belonging to the same account. <br /><br /> Required permissions: inventory:hosts:write <br /><br /> NOTICE: This operation is deprecated. The explicit creation of hosts is no longer supported. Hosts are created automatically based on uploads processed by the [payload ingress service](/docs/api/ingress#operations-default-post_upload) instead.\n         * @summary Create/update multiple host and add them to the host list\n         * @param {Array<CreateHostIn>} createHostIn A list of host objects to be added to the host list\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostAddHostList: function (createHostIn, options) {\n            return exports.HostsApiFp(configuration).apiHostAddHostList(createHostIn, options)(axios, basePath);\n        },\n        /**\n         * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Delete hosts by IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostDeleteById: function (hostIdList, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostDeleteById(hostIdList, branchId, options)(axios, basePath);\n        },\n        /**\n         * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Find hosts by their IDs\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostById: function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostById(hostIdList, branchId, perPage, page, orderBy, orderHow, options)(axios, basePath);\n        },\n        /**\n         * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Read the entire list of hosts\n         * @param {string} [displayName] A part of a searched host’s display name.\n         * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n         * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n         * @param {string} [insightsId] Search for a host by insights_id\n         * @param {string} [branchId] Filter by branch_id\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {{ [key: string]: { [key: string]: string | any; }; }} [filter] Filters hosts based on system_profile fields\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostList: function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostList(displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options)(axios, basePath);\n        },\n        /**\n         * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Return one or more hosts system profile\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostSystemProfileById: function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostSystemProfileById(hostIdList, perPage, page, orderBy, orderHow, branchId, options)(axios, basePath);\n        },\n        /**\n         * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the number of tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTagCount: function (hostIdList, perPage, page, orderBy, orderHow, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostTagCount(hostIdList, perPage, page, orderBy, orderHow, options)(axios, basePath);\n        },\n        /**\n         * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n         * @summary Get the tags on a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostGetHostTags: function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n            return exports.HostsApiFp(configuration).apiHostGetHostTags(hostIdList, perPage, page, orderBy, orderHow, search, options)(axios, basePath);\n        },\n        /**\n         * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Merge facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to merge with the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostMergeFacts: function (hostIdList, namespace, body, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostMergeFacts(hostIdList, namespace, body, branchId, options)(axios, basePath);\n        },\n        /**\n         * Update a host <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Update a host\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostPatchById: function (hostIdList, patchHostIn, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostPatchById(hostIdList, patchHostIn, branchId, options)(axios, basePath);\n        },\n        /**\n         * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n         * @summary Replace facts under a namespace\n         * @param {Array<string>} hostIdList A comma separated list of host IDs.\n         * @param {string} namespace A namespace of the merged facts.\n         * @param {object} body A dictionary with the new facts to replace the original ones.\n         * @param {string} [branchId] Filter by branch_id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiHostReplaceFacts: function (hostIdList, namespace, body, branchId, options) {\n            return exports.HostsApiFp(configuration).apiHostReplaceFacts(hostIdList, namespace, body, branchId, options)(axios, basePath);\n        },\n    };\n};\n/**\n * HostsApi - object-oriented interface\n * @export\n * @class HostsApi\n * @extends {BaseAPI}\n */\nvar HostsApi = /** @class */ (function (_super) {\n    __extends(HostsApi, _super);\n    function HostsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Create a new host and add it to the host list or update an existing hosts. A host is updated if there is already one with the same canonicals facts and belonging to the same account. <br /><br /> Required permissions: inventory:hosts:write <br /><br /> NOTICE: This operation is deprecated. The explicit creation of hosts is no longer supported. Hosts are created automatically based on uploads processed by the [payload ingress service](/docs/api/ingress#operations-default-post_upload) instead.\n     * @summary Create/update multiple host and add them to the host list\n     * @param {Array<CreateHostIn>} createHostIn A list of host objects to be added to the host list\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostAddHostList = function (createHostIn, options) {\n        return exports.HostsApiFp(this.configuration).apiHostAddHostList(createHostIn, options)(this.axios, this.basePath);\n    };\n    /**\n     * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Delete hosts by IDs\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostDeleteById = function (hostIdList, branchId, options) {\n        return exports.HostsApiFp(this.configuration).apiHostDeleteById(hostIdList, branchId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Find hosts by their IDs\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostById = function (hostIdList, branchId, perPage, page, orderBy, orderHow, options) {\n        return exports.HostsApiFp(this.configuration).apiHostGetHostById(hostIdList, branchId, perPage, page, orderBy, orderHow, options)(this.axios, this.basePath);\n    };\n    /**\n     * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Read the entire list of hosts\n     * @param {string} [displayName] A part of a searched host’s display name.\n     * @param {string} [fqdn] Filter by a host\\&#39;s FQDN\n     * @param {string} [hostnameOrId] Search for a host by display_name, fqdn, id\n     * @param {string} [insightsId] Search for a host by insights_id\n     * @param {string} [branchId] Filter by branch_id\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n     * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n     * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n     * @param {{ [key: string]: { [key: string]: string | any; }; }} [filter] Filters hosts based on system_profile fields\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostList = function (displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options) {\n        return exports.HostsApiFp(this.configuration).apiHostGetHostList(displayName, fqdn, hostnameOrId, insightsId, branchId, perPage, page, orderBy, orderHow, staleness, tags, registeredWith, filter, options)(this.axios, this.basePath);\n    };\n    /**\n     * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Return one or more hosts system profile\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostSystemProfileById = function (hostIdList, perPage, page, orderBy, orderHow, branchId, options) {\n        return exports.HostsApiFp(this.configuration).apiHostGetHostSystemProfileById(hostIdList, perPage, page, orderBy, orderHow, branchId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Get the number of tags on a host\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostTagCount = function (hostIdList, perPage, page, orderBy, orderHow, options) {\n        return exports.HostsApiFp(this.configuration).apiHostGetHostTagCount(hostIdList, perPage, page, orderBy, orderHow, options)(this.axios, this.basePath);\n    };\n    /**\n     * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read\n     * @summary Get the tags on a host\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {'display_name' | 'updated'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering, defaults to ASC for display_name and to DESC for updated\n     * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostGetHostTags = function (hostIdList, perPage, page, orderBy, orderHow, search, options) {\n        return exports.HostsApiFp(this.configuration).apiHostGetHostTags(hostIdList, perPage, page, orderBy, orderHow, search, options)(this.axios, this.basePath);\n    };\n    /**\n     * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Merge facts under a namespace\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} namespace A namespace of the merged facts.\n     * @param {object} body A dictionary with the new facts to merge with the original ones.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostMergeFacts = function (hostIdList, namespace, body, branchId, options) {\n        return exports.HostsApiFp(this.configuration).apiHostMergeFacts(hostIdList, namespace, body, branchId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Update a host <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Update a host\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {PatchHostIn} patchHostIn A group of fields to be updated on the host\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostPatchById = function (hostIdList, patchHostIn, branchId, options) {\n        return exports.HostsApiFp(this.configuration).apiHostPatchById(hostIdList, patchHostIn, branchId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write\n     * @summary Replace facts under a namespace\n     * @param {Array<string>} hostIdList A comma separated list of host IDs.\n     * @param {string} namespace A namespace of the merged facts.\n     * @param {object} body A dictionary with the new facts to replace the original ones.\n     * @param {string} [branchId] Filter by branch_id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HostsApi\n     */\n    HostsApi.prototype.apiHostReplaceFacts = function (hostIdList, namespace, body, branchId, options) {\n        return exports.HostsApiFp(this.configuration).apiHostReplaceFacts(hostIdList, namespace, body, branchId, options)(this.axios, this.basePath);\n    };\n    return HostsApi;\n}(base_1.BaseAPI));\nexports.HostsApi = HostsApi;\n/**\n * TagsApi - axios parameter creator\n * @export\n */\nexports.TagsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary Get the active host tags for a given account\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'tag' | 'count'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTagGetTags: function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/tags\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                var localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"x-rh-identity\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"x-rh-identity\"] = localVarApiKeyValue;\n            }\n            if (tags) {\n                localVarQueryParameter['tags'] = tags;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (orderHow !== undefined) {\n                localVarQueryParameter['order_how'] = orderHow;\n            }\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n            if (staleness) {\n                localVarQueryParameter['staleness'] = staleness;\n            }\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n            if (registeredWith !== undefined) {\n                localVarQueryParameter['registered_with'] = registeredWith;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * TagsApi - functional programming interface\n * @export\n */\nexports.TagsApiFp = function (configuration) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary Get the active host tags for a given account\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'tag' | 'count'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTagGetTags: function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options) {\n            var localVarAxiosArgs = exports.TagsApiAxiosParamCreator(configuration).apiTagGetTags(tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * TagsApi - factory interface\n * @export\n */\nexports.TagsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Required permissions: inventory:hosts:read\n         * @summary Get the active host tags for a given account\n         * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n         * @param {'tag' | 'count'} [orderBy] Ordering field name\n         * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n         * @param {number} [perPage] A number of items to return per page.\n         * @param {number} [page] A page number of the items to return.\n         * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n         * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n         * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTagGetTags: function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options) {\n            return exports.TagsApiFp(configuration).apiTagGetTags(tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options)(axios, basePath);\n        },\n    };\n};\n/**\n * TagsApi - object-oriented interface\n * @export\n * @class TagsApi\n * @extends {BaseAPI}\n */\nvar TagsApi = /** @class */ (function (_super) {\n    __extends(TagsApi, _super);\n    function TagsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Required permissions: inventory:hosts:read\n     * @summary Get the active host tags for a given account\n     * @param {Array<string>} [tags] filters out hosts not tagged by the given tags\n     * @param {'tag' | 'count'} [orderBy] Ordering field name\n     * @param {'ASC' | 'DESC'} [orderHow] Direction of the ordering. Default to ASC\n     * @param {number} [perPage] A number of items to return per page.\n     * @param {number} [page] A page number of the items to return.\n     * @param {Array<'fresh' | 'stale' | 'stale_warning' | 'unknown'>} [staleness] Culling states of the hosts. Default: fresh,stale,unknown\n     * @param {string} [search] Only include tags that match the given search string. The value is matched against namespace, key and value.\n     * @param {'insights'} [registeredWith] Filters out any host not registered with the specified service\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TagsApi\n     */\n    TagsApi.prototype.apiTagGetTags = function (tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options) {\n        return exports.TagsApiFp(this.configuration).apiTagGetTags(tags, orderBy, orderHow, perPage, page, staleness, search, registeredWith, options)(this.axios, this.basePath);\n    };\n    return TagsApi;\n}(base_1.BaseAPI));\nexports.TagsApi = TagsApi;\n","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar axios_1 = require(\"axios\");\nexports.BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\nexports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n/**\n *\n * @export\n * @class BaseAPI\n */\nvar BaseAPI = /** @class */ (function () {\n    function BaseAPI(configuration, basePath, axios) {\n        if (basePath === void 0) { basePath = exports.BASE_PATH; }\n        if (axios === void 0) { axios = axios_1.default; }\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n    return BaseAPI;\n}());\nexports.BaseAPI = BaseAPI;\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nvar RequiredError = /** @class */ (function (_super) {\n    __extends(RequiredError, _super);\n    function RequiredError(field, msg) {\n        var _this = _super.call(this, msg) || this;\n        _this.field = field;\n        _this.name = \"RequiredError\";\n        return _this;\n    }\n    return RequiredError;\n}(Error));\nexports.RequiredError = RequiredError;\n","\"use strict\";\n// tslint:disable\n/**\n * Insights Host Inventory REST Interface\n * REST interface for the Insights Platform Host Inventory application.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Configuration = /** @class */ (function () {\n    function Configuration(param) {\n        if (param === void 0) { param = {}; }\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n    }\n    return Configuration;\n}());\nexports.Configuration = Configuration;\n"],"sourceRoot":""}