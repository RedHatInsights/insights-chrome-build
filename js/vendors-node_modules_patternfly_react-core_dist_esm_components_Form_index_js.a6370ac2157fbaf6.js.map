{"version":3,"file":"vendors-node_modules_patternfly_react-core_dist_esm_components_Form_index_js.a6370ac2157fbaf6.js","mappings":"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","sources":["webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Form/FormAlert.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Form/FormContext.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroup.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupExpandable.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupHeader.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupToggle.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Form/FormHelperText.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Form/FormSection.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Form/InternalFormFieldGroup.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Form/index.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Form/form.mjs';\nexport const FormAlert = (_a) => {\n    var { children = null, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (\n    // There are currently no associated styles with the pf-v5-c-form_alert class.\n    // Therefore, it does not exist in react-styles\n    React.createElement(\"div\", Object.assign({}, props, { className: css(`${styles.form}__alert`, className) }), children));\n};\nFormAlert.displayName = 'FormAlert';\n//# sourceMappingURL=FormAlert.js.map","import { __rest } from \"tslib\";\nimport React from 'react';\nconst FormContext = React.createContext({});\nexport const FormContextConsumer = FormContext.Consumer;\nexport const FormContextProvider = ({ initialValues, children }) => {\n    var _a;\n    const [values, setValues] = React.useState(initialValues || {});\n    const [errors, setErrors] = React.useState({});\n    const [validators, setValidators] = React.useState({});\n    const [touched, setTouched] = React.useState({});\n    const isValid = ((_a = Object.keys(errors)) === null || _a === void 0 ? void 0 : _a.length) === 0;\n    const getValue = (fieldId) => Object.entries(values).reduce((acc, [id, value]) => (id === fieldId ? value : acc), '');\n    const setValue = (fieldId, value, triggerValidation = true) => {\n        var _a;\n        if (values[fieldId] !== value) {\n            setValues((prevValues) => (Object.assign(Object.assign({}, prevValues), { [fieldId]: value })));\n            triggerValidation && ((_a = validators[fieldId]) === null || _a === void 0 ? void 0 : _a.call(validators, value));\n        }\n    };\n    const getError = (fieldId) => Object.entries(errors).reduce((acc, [id, error]) => (id === fieldId ? error : acc), '');\n    const setError = (fieldId, error) => errors[fieldId] !== error &&\n        setErrors((_a) => {\n            var _b = fieldId, _ = _a[_b], prevErrors = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n            return (Object.assign(Object.assign({}, prevErrors), (!!error && { [fieldId]: error })));\n        });\n    const isTouched = (fieldId) => Object.entries(touched).reduce((acc, [id, isTouched]) => (id === fieldId ? isTouched : acc), false);\n    const setFieldTouched = (fieldId, isTouched) => touched[fieldId] !== isTouched &&\n        setTouched((_a) => {\n            var _b = fieldId, _ = _a[_b], prevTouched = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n            return (Object.assign(Object.assign({}, prevTouched), (isTouched && { [fieldId]: isTouched })));\n        });\n    const setValidator = (fieldId, validate) => validators[fieldId] !== validate && setValidators((prevValidators) => (Object.assign(Object.assign({}, prevValidators), { [fieldId]: validate })));\n    // Accumulate and return errors from all fields with validators.\n    const validate = () => {\n        var _a;\n        return (_a = Object.entries(validators)) === null || _a === void 0 ? void 0 : _a.reduce((acc, [id, validateField]) => {\n            const fieldError = validateField(values[id]);\n            if (fieldError) {\n                acc[id] = fieldError;\n            }\n            return acc;\n        }, {});\n    };\n    return (React.createElement(FormContext.Provider, { value: {\n            values,\n            errors,\n            touched,\n            isValid,\n            setValues,\n            setErrors,\n            getValue,\n            setValue,\n            getError,\n            setError,\n            validate,\n            setValidator,\n            isTouched,\n            setTouched: setFieldTouched\n        } }, typeof children === 'function' ? (React.createElement(FormContext.Consumer, null, (formContext) => children(formContext))) : (children)));\n};\nFormContextProvider.displayName = 'FormContextProvider';\nexport const useFormContext = () => React.useContext(FormContext);\n//# sourceMappingURL=FormContext.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { InternalFormFieldGroup } from './InternalFormFieldGroup';\nexport const FormFieldGroup = (_a) => {\n    var { children, className, header } = _a, props = __rest(_a, [\"children\", \"className\", \"header\"]);\n    return (React.createElement(InternalFormFieldGroup, Object.assign({ className: className, header: header }, props), children));\n};\nFormFieldGroup.displayName = 'FormFieldGroup';\n//# sourceMappingURL=FormFieldGroup.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { InternalFormFieldGroup } from './InternalFormFieldGroup';\nexport const FormFieldGroupExpandable = (_a) => {\n    var { children, className, header, isExpanded = false, toggleAriaLabel } = _a, props = __rest(_a, [\"children\", \"className\", \"header\", \"isExpanded\", \"toggleAriaLabel\"]);\n    const [localIsExpanded, setIsExpanded] = useState(isExpanded);\n    return (React.createElement(InternalFormFieldGroup, Object.assign({ className: className, header: header, isExpandable: true, isExpanded: localIsExpanded, toggleAriaLabel: toggleAriaLabel, onToggle: () => setIsExpanded(!localIsExpanded) }, props), children));\n};\nFormFieldGroupExpandable.displayName = 'FormFieldGroupExpandable';\n//# sourceMappingURL=FormFieldGroupExpandable.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form.mjs';\nimport { css } from '@patternfly/react-styles';\nexport const FormFieldGroupHeader = (_a) => {\n    var { className, titleText, titleDescription, actions } = _a, props = __rest(_a, [\"className\", \"titleText\", \"titleDescription\", \"actions\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.formFieldGroupHeader, className) }, props),\n        React.createElement(\"div\", { className: css(styles.formFieldGroupHeaderMain) },\n            titleText && (React.createElement(\"div\", { className: css(styles.formFieldGroupHeaderTitle) },\n                React.createElement(\"div\", { className: css(styles.formFieldGroupHeaderTitleText), id: titleText.id }, titleText.text))),\n            titleDescription && React.createElement(\"div\", { className: css(styles.formFieldGroupHeaderDescription) }, titleDescription)),\n        React.createElement(\"div\", { className: css(styles.formFieldGroupHeaderActions) }, actions && actions)));\n};\nFormFieldGroupHeader.displayName = 'FormFieldGroupHeader';\n//# sourceMappingURL=FormFieldGroupHeader.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form.mjs';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Button } from '../Button';\nexport const FormFieldGroupToggle = (_a) => {\n    var { className, onToggle, isExpanded, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledby, toggleId } = _a, props = __rest(_a, [\"className\", \"onToggle\", \"isExpanded\", 'aria-label', 'aria-labelledby', \"toggleId\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.formFieldGroupToggle, className) }, props),\n        React.createElement(\"div\", { className: css(styles.formFieldGroupToggleButton) },\n            React.createElement(Button, { variant: \"plain\", \"aria-label\": ariaLabel, onClick: onToggle, \"aria-expanded\": isExpanded, \"aria-labelledby\": ariaLabelledby, id: toggleId },\n                React.createElement(\"span\", { className: css(styles.formFieldGroupToggleIcon) },\n                    React.createElement(AngleRightIcon, { \"aria-hidden\": \"true\" }))))));\n};\nFormFieldGroupToggle.displayName = 'FormFieldGroupToggle';\n//# sourceMappingURL=FormFieldGroupToggle.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Form/form.mjs';\nexport const FormHelperText = (_a) => {\n    var { children = null, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.formHelperText, className) }, props), children));\n};\nFormHelperText.displayName = 'FormHelperText';\n//# sourceMappingURL=FormHelperText.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form.mjs';\nimport { css } from '@patternfly/react-styles';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport const FormSection = (_a) => {\n    var { className = '', children, title = '', titleElement: TitleElement = 'div' } = _a, props = __rest(_a, [\"className\", \"children\", \"title\", \"titleElement\"]);\n    return (React.createElement(GenerateId, { prefix: \"pf-form-section-title\" }, (sectionId) => (React.createElement(\"section\", Object.assign({ className: css(styles.formSection, className), role: \"group\" }, (title && { 'aria-labelledby': sectionId }), props),\n        title && (React.createElement(TitleElement, { id: sectionId, className: css(styles.formSectionTitle, className) }, title)),\n        children))));\n};\nFormSection.displayName = 'FormSection';\n//# sourceMappingURL=FormSection.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form.mjs';\nimport { css } from '@patternfly/react-styles';\nimport { FormFieldGroupToggle } from './FormFieldGroupToggle';\nimport { GenerateId } from '../../helpers';\nexport const InternalFormFieldGroup = (_a) => {\n    var { children, className, header, isExpandable, isExpanded, onToggle, toggleAriaLabel } = _a, props = __rest(_a, [\"children\", \"className\", \"header\", \"isExpandable\", \"isExpanded\", \"onToggle\", \"toggleAriaLabel\"]);\n    const headerTitleText = header ? header.props.titleText : null;\n    if (isExpandable && !toggleAriaLabel && !headerTitleText) {\n        // eslint-disable-next-line no-console\n        console.error('FormFieldGroupExpandable:', 'toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible');\n    }\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.formFieldGroup, isExpanded && isExpandable && styles.modifiers.expanded, className), role: \"group\" }, (headerTitleText && { 'aria-labelledby': `${header.props.titleText.id}` }), props),\n        isExpandable && (React.createElement(GenerateId, { prefix: \"form-field-group-toggle\" }, (id) => (React.createElement(FormFieldGroupToggle, Object.assign({ onToggle: onToggle, isExpanded: isExpanded, \"aria-label\": toggleAriaLabel, toggleId: id }, (headerTitleText && { 'aria-labelledby': `${header.props.titleText.id} ${id}` })))))),\n        header && header,\n        (!isExpandable || (isExpandable && isExpanded)) && (React.createElement(\"div\", { className: css(styles.formFieldGroupBody) }, children))));\n};\nInternalFormFieldGroup.displayName = 'InternalFormFieldGroup';\n//# sourceMappingURL=InternalFormFieldGroup.js.map","export * from './ActionGroup';\nexport * from './Form';\nexport * from './FormAlert';\nexport * from './FormFieldGroup';\nexport * from './FormFieldGroupExpandable';\nexport * from './FormFieldGroupHeader';\nexport * from './FormGroup';\nexport * from './FormHelperText';\nexport * from './FormSection';\nexport * from './FormContext';\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}