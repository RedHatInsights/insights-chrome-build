{"version":3,"file":"node_modules_patternfly_react-core_dist_esm_components_TextArea_index_js-_6af51.6ec5470ff9ccd56a.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAA+B;AACA;AAC2D;AAC3C;AACyB;AACP;AAC1D;AACP;AACA;AACA;AACA;AACA,CAAC,4DAA4D;AACtD;AACP;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D,2BAA2B,4CAAe;AAC1C;AACA;AACA,wBAAwB,4CAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA,yCAAyC,+CAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+CAAS;AAC9C;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,0BAA0B,cAAc,6CAAM;AAC9C,qCAAqC,oDAAU,oBAAoB;AACnE;AACA,gBAAgB,gDAAmB,WAAW,WAAW,6DAAG,CAAC,4GAAM,iCAAiC,4GAAM,oDAAoD,4GAAM,uCAAuC,4GAAM,uCAAuC,4GAAM,sCAAsC,4GAAM,mCAAmC;AAC7U,YAAY,gDAAmB,6BAA6B,+DAA+D,oDAAoD,OAAO,KAAK,8BAA8B,sDAAgB,6HAA6H;AACtW,8BAA8B,gDAAmB,WAAW,WAAW,6DAAG,CAAC,4GAAM,wBAAwB;AACzG,gBAAgB,gDAAmB,CAAC,yEAAe,IAAI,mBAAmB;AAC1E;AACA;AACA;AACA;AACA,cAAc,4CAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACO,iBAAiB,6CAAgB,kBAAkB,gDAAmB,+BAA+B,WAAW,eAAe;AACtI;AACA;;;;;;;;;;;;;;;;;ACjF2B;AAC3B","sources":["webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/TextArea/TextArea.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/TextArea/index.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control.mjs';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\nimport { FormControlIcon } from '../FormControl/FormControlIcon';\nexport var TextAreResizeOrientation;\n(function (TextAreResizeOrientation) {\n    TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n    TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n    TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\nexport var TextAreaReadOnlyVariant;\n(function (TextAreaReadOnlyVariant) {\n    TextAreaReadOnlyVariant[\"default\"] = \"default\";\n    TextAreaReadOnlyVariant[\"plain\"] = \"plain\";\n})(TextAreaReadOnlyVariant || (TextAreaReadOnlyVariant = {}));\nclass TextAreaBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputRef = React.createRef();\n        this.setAutoHeight = (field) => {\n            const parent = field.parentElement;\n            parent.style.setProperty('height', 'inherit');\n            const computed = window.getComputedStyle(field);\n            // Calculate the height\n            const height = parseInt(computed.getPropertyValue('border-top-width')) +\n                parseInt(computed.getPropertyValue('padding-top')) +\n                field.scrollHeight +\n                parseInt(computed.getPropertyValue('padding-bottom')) +\n                parseInt(computed.getPropertyValue('border-bottom-width'));\n            parent.style.setProperty('height', `${height}px`);\n        };\n        this.handleChange = (event) => {\n            // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n            const field = event.currentTarget;\n            if (this.props.autoResize && canUseDOM) {\n                this.setAutoHeight(field);\n            }\n            if (this.props.onChange) {\n                this.props.onChange(event, field.value);\n            }\n        };\n        if (!props.id && !props['aria-label']) {\n            // eslint-disable-next-line no-console\n            console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n        }\n    }\n    componentDidMount() {\n        const inputRef = this.props.innerRef || this.inputRef;\n        if (this.props.autoResize && canUseDOM) {\n            const field = inputRef.current;\n            this.setAutoHeight(field);\n        }\n    }\n    render() {\n        const _a = this.props, { className, value, validated, isRequired, isDisabled, readOnlyVariant, resizeOrientation, innerRef, disabled, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        autoResize, onChange, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        onBlur, onFocus } = _a, props = __rest(_a, [\"className\", \"value\", \"validated\", \"isRequired\", \"isDisabled\", \"readOnlyVariant\", \"resizeOrientation\", \"innerRef\", \"disabled\", \"autoResize\", \"onChange\", \"onBlur\", \"onFocus\"]);\n        const orientation = `resize${capitalize(resizeOrientation)}`;\n        const hasStatusIcon = ['success', 'error', 'warning'].includes(validated);\n        return (React.createElement(\"span\", { className: css(styles.formControl, readOnlyVariant && styles.modifiers.readonly, readOnlyVariant === 'plain' && styles.modifiers.plain, resizeOrientation && styles.modifiers[orientation], isDisabled && styles.modifiers.disabled, hasStatusIcon && styles.modifiers[validated], className) },\n            React.createElement(\"textarea\", Object.assign({ onChange: this.handleChange, onFocus: onFocus, onBlur: onBlur }, (typeof this.props.defaultValue !== 'string' && { value }), { \"aria-invalid\": validated === ValidatedOptions.error, required: isRequired, disabled: isDisabled || disabled, readOnly: !!readOnlyVariant, ref: innerRef || this.inputRef }, props)),\n            hasStatusIcon && (React.createElement(\"span\", { className: css(styles.formControlUtilities) },\n                React.createElement(FormControlIcon, { status: validated })))));\n    }\n}\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n    innerRef: React.createRef(),\n    className: '',\n    isRequired: false,\n    isDisabled: false,\n    validated: 'default',\n    resizeOrientation: 'both',\n    'aria-label': null\n};\nexport const TextArea = React.forwardRef((props, ref) => (React.createElement(TextAreaBase, Object.assign({}, props, { innerRef: ref }))));\nTextArea.displayName = 'TextArea';\n//# sourceMappingURL=TextArea.js.map","export * from './TextArea';\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}