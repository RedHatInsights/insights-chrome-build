{"version":3,"file":"node_modules_patternfly_react-core_dist_esm_components_Label_index_js.e8f39e74114e87aa.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAA+B;AACA;AACoD;AACD;AACnC;AACZ;AACH;AACK;AACkD;AAC1C;AACoB;AACjE,yBAAyB,4CAAe;AACxC;AACA;AACA,0BAA0B,4CAAe;AACzC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB,gCAAgC;AAChD,gBAAgB,mBAAmB;AACnC,mCAAmC,gDAAmB,CAAC,6CAAO,IAAI,kDAAkD;AACpH,YAAY,gDAAmB,WAAW,8CAA8C,6DAAG,CAAC,qGAAM,mBAAmB;AACrH,gBAAgB,gDAAmB,WAAW,+BAA+B,sBAAsB,gDAAmB,WAAW,iCAAiC,6DAAG,CAAC,qGAAM,kDAAkD;AAC9N;AACA;AACA,iCAAiC;AACjC;AACA,8HAA8H;AAC9H;AACA,eAAe,6CAAM;AACrB,gBAAgB,SAAS;AACzB,iCAAiC,2CAAc;AAC/C;AACA,oCAAoC,sDAAY;AAChD;AACA,SAAS;AACT;AACA;AACA,6BAA6B,gDAAmB,CAAC,2CAAc;AAC/D;AACA,gBAAgB,gDAAmB,uBAAuB,WAAW,6DAAG,CAAC,qGAAM,kBAAkB,qBAAqB,uBAAuB,uBAAuB,yBAAyB,KAAK,cAAc;AAChN,kDAAkD,gDAAmB,SAAS,WAAW,6DAAG,CAAC,qGAAM,8BAA8B;AACjI,gDAAgD,gDAAmB,SAAS,WAAW,6DAAG,CAAC,qGAAM,sBAAsB;AACvH,wBAAwB,gDAAmB,CAAC,yCAAK,IAAI,gEAAgE,6DAAG,cAAc,+FAAW,qBAAqB;AACtK,uCAAuC,gDAAmB,SAAS,WAAW,6DAAG,CAAC,qGAAM,sBAAsB;AAC9G,0DAA0D,gDAAmB,SAAS,WAAW,6DAAG,CAAC,qGAAM,qBAAqB,qGAAM,sBAAsB;AAC5J,wBAAwB,gDAAmB,6BAA6B,WAAW,6DAAG,CAAC,qGAAM,4CAA4C;AACzI,2BAA2B,gDAAmB,UAAU,WAAW,6DAAG,CAAC,qGAAM,mBAAmB;AAChG,gBAAgB,gDAAmB,CAAC,2CAAM,IAAI,yFAAyF,GAAG,sCAAsC,IAAI,EAAE,GAAG,GAAG;AAC5L,oBAAoB,gDAAmB,CAAC,gGAAe,IAAI,uBAAuB;AAClF,oBAAoB,gDAAmB,UAAU,WAAW,6DAAG,CAAC,qGAAM,wCAAwC,qGAAM,mCAAmC,qGAAM,mCAAmC,qGAAM,sBAAsB;AAC5N,gBAAgB,gDAAmB,UAAU,WAAW,6DAAG,CAAC,qGAAM,kBAAkB;AACpF;AACA;AACA,4EAA4E,gDAAmB,CAAC,uEAAU;AAC1G;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsB;AACtB;;;;;;;;;;;;;;;;;AC1FwB;AACK;AAC7B;;;;;;;;;;;;;;;;;ACF2C;;AAEpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,wBAAwB,uDAAU;;AAEzC,iEAAe,eAAe","sources":["webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Label/LabelGroup.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Label/index.js","webpack://insights-chrome/./node_modules/@patternfly/react-icons/dist/esm/icons/times-circle-icon.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Label/label-group.mjs';\nimport labelStyles from '@patternfly/react-styles/css/components/Label/label.mjs';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Label } from './Label';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nclass LabelGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.headingRef = React.createRef();\n        this.toggleCollapse = () => {\n            this.setState((prevState) => ({\n                isOpen: !prevState.isOpen,\n                isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n            }));\n        };\n        this.state = {\n            isOpen: this.props.defaultIsOpen,\n            isTooltipVisible: false\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n        });\n    }\n    renderLabel(id) {\n        const { categoryName, tooltipPosition } = this.props;\n        const { isTooltipVisible } = this.state;\n        return isTooltipVisible ? (React.createElement(Tooltip, { position: tooltipPosition, content: categoryName },\n            React.createElement(\"span\", { tabIndex: 0, ref: this.headingRef, className: css(styles.labelGroupLabel) },\n                React.createElement(\"span\", { \"aria-hidden\": \"true\", id: id }, categoryName)))) : (React.createElement(\"span\", { ref: this.headingRef, className: css(styles.labelGroupLabel), \"aria-hidden\": \"true\", id: id }, categoryName));\n    }\n    render() {\n        const _a = this.props, { categoryName, children, className, isClosable, isCompact, closeBtnAriaLabel, 'aria-label': ariaLabel, onClick, numLabels, expandedText, collapsedText, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        defaultIsOpen, tooltipPosition, isVertical, isEditable, hasEditableTextArea, editableTextAreaProps, addLabelControl } = _a, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"isCompact\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"numLabels\", \"expandedText\", \"collapsedText\", \"defaultIsOpen\", \"tooltipPosition\", \"isVertical\", \"isEditable\", \"hasEditableTextArea\", \"editableTextAreaProps\", \"addLabelControl\"]);\n        const { isOpen } = this.state;\n        const renderedChildren = React.Children.toArray(children);\n        const numChildren = renderedChildren.length;\n        const collapsedTextResult = fillTemplate(collapsedText, {\n            remaining: numChildren - numLabels\n        });\n        const renderLabelGroup = (id) => {\n            const labelArray = !isOpen ? renderedChildren.slice(0, numLabels) : renderedChildren;\n            const content = (React.createElement(React.Fragment, null,\n                categoryName && this.renderLabel(id),\n                React.createElement(\"ul\", Object.assign({ className: css(styles.labelGroupList) }, (categoryName && { 'aria-labelledby': id }), (!categoryName && { 'aria-label': ariaLabel }), { role: \"list\" }, rest),\n                    labelArray.map((child, i) => (React.createElement(\"li\", { className: css(styles.labelGroupListItem), key: i }, child))),\n                    numChildren > numLabels && (React.createElement(\"li\", { className: css(styles.labelGroupListItem) },\n                        React.createElement(Label, { isOverflowLabel: true, onClick: this.toggleCollapse, className: css(isCompact && labelStyles.modifiers.compact) }, isOpen ? expandedText : collapsedTextResult))),\n                    addLabelControl && React.createElement(\"li\", { className: css(styles.labelGroupListItem) }, addLabelControl),\n                    isEditable && hasEditableTextArea && (React.createElement(\"li\", { className: css(styles.labelGroupListItem, styles.modifiers.textarea) },\n                        React.createElement(\"textarea\", Object.assign({ className: css(styles.labelGroupTextarea), rows: 1, tabIndex: 0 }, editableTextAreaProps)))))));\n            const close = (React.createElement(\"div\", { className: css(styles.labelGroupClose) },\n                React.createElement(Button, { variant: \"plain\", \"aria-label\": closeBtnAriaLabel, onClick: onClick, id: `remove_group_${id}`, \"aria-labelledby\": `remove_group_${id} ${id}` },\n                    React.createElement(TimesCircleIcon, { \"aria-hidden\": \"true\" }))));\n            return (React.createElement(\"div\", { className: css(styles.labelGroup, className, categoryName && styles.modifiers.category, isVertical && styles.modifiers.vertical, isEditable && styles.modifiers.editable) },\n                React.createElement(\"div\", { className: css(styles.labelGroupMain) }, content),\n                isClosable && close));\n        };\n        return numChildren === 0 && addLabelControl === undefined ? null : (React.createElement(GenerateId, null, (randomId) => renderLabelGroup(this.props.id || randomId)));\n    }\n}\nLabelGroup.displayName = 'LabelGroup';\nLabelGroup.defaultProps = {\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    categoryName: '',\n    defaultIsOpen: false,\n    numLabels: 3,\n    isClosable: false,\n    isCompact: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e) => undefined,\n    closeBtnAriaLabel: 'Close label group',\n    tooltipPosition: 'top',\n    'aria-label': 'Label group category',\n    isVertical: false,\n    isEditable: false,\n    hasEditableTextArea: false\n};\nexport { LabelGroup };\n//# sourceMappingURL=LabelGroup.js.map","export * from './Label';\nexport * from './LabelGroup';\n//# sourceMappingURL=index.js.map","import { createIcon } from '../createIcon';\n\nexport const TimesCircleIconConfig = {\n  name: 'TimesCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const TimesCircleIcon = createIcon(TimesCircleIconConfig);\n\nexport default TimesCircleIcon;"],"names":[],"sourceRoot":""}