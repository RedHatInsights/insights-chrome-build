{"version":3,"file":"node_modules_patternfly_react-core_dist_esm_helpers_GenerateId_GenerateId_js-node_modules_pat-45e1ba.0657bb5a70ae24c1.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA,uBAAuB,GAAG,GAAG,WAAW;AACxC,iBAAiB;AACjB,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AAC+B;AACO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kDAAW;AAC1B;AACA;AACA,yBAAyB,4CAAe;AACxC;AACA;AACA;AACA,qBAAqB,kBAAkB,EAAE,mBAAmB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsB;AACtB;;;;;;;;;;;;;;;;ACxC6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAA8C;AACrE;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,UAAU;AACrB,WAAW,SAAS;AACpB,YAAY,UAAU;AACtB;AACO;AACP;AACA,QAAQ,4CAAS;AACjB,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAQ;AACpC;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACvGA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA","sources":["webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/helpers/GenerateId/GenerateId.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/helpers/resizeObserver.js","webpack://insights-chrome/ignored|/home/travis/build/RedHatInsights/insights-chrome/node_modules/@patternfly/react-styles/css/components/Badge|./badge.css","webpack://insights-chrome/ignored|/home/travis/build/RedHatInsights/insights-chrome/node_modules/@patternfly/react-styles/css/components/Button|./button.css","webpack://insights-chrome/ignored|/home/travis/build/RedHatInsights/insights-chrome/node_modules/@patternfly/react-styles/css/components/Drawer|./drawer.css","webpack://insights-chrome/ignored|/home/travis/build/RedHatInsights/insights-chrome/node_modules/@patternfly/react-styles/css/components/Page|./page.css","webpack://insights-chrome/ignored|/home/travis/build/RedHatInsights/insights-chrome/node_modules/@patternfly/react-styles/css/components/Spinner|./spinner.css"],"sourcesContent":["/** This Component can be used to wrap a functional component in order to generate a random ID\n * Example of how to use this component\n *\n * const Component = ({id}: {id: string}) => (\n *  <GenerateId>{randomId => (\n *     <div id={id || randomId}>\n *       div with random ID\n *     </div>\n *   )}\n *  </GenerateId>\n *  );\n */\nimport * as React from 'react';\nimport { getUniqueId } from '../util';\nlet currentId = 0;\n// gives us a unique (enough) id to add to the generated id that it should prevent issues with duplicate ids\nfunction getRandomId() {\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n        return crypto.randomUUID();\n    }\n    else {\n        return getUniqueId();\n    }\n}\nclass GenerateId extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.uniqueElement = this.props.isRandom ? getRandomId() : currentId++;\n        this.id = `${this.props.prefix}${this.uniqueElement}`;\n    }\n    render() {\n        return this.props.children(this.id);\n    }\n}\nGenerateId.displayName = 'GenerateId';\nGenerateId.defaultProps = {\n    prefix: 'pf-random-id-',\n    isRandom: false\n};\nexport { GenerateId };\n//# sourceMappingURL=GenerateId.js.map","import { canUseDOM, debounce } from './util';\n/**\n * This function creates a ResizeObserver used to handle resize events for the given containerRef. If ResizeObserver\n * or the given containerRef are not available, a window resize event listener is used by default.\n *\n * Example 1:\n *\n * private containerRef = React.createRef<HTMLDivElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.containerRef.current, this.handleResize, true);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.containerRef.current && this.containerRef.current.clientWidth) {\n *     this.setState({ width: this.containerRef.current.clientWidth });\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <div ref={this.containerRef} >\n *       <Chart width={this.state.width} ... />\n *     </div>\n *   );\n * }\n *\n * Example 2:\n *\n * private inputRef = React.createRef<HTMLInputElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.inputRef.current, this.handleResize, true);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.inputRef.current) {\n *     trimLeft(inputRef.current, String(this.props.value));\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <input ref={this.inputRef} ... />\n *   );\n * }\n *\n * Example 3 - With debounced method passed in:\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.inputRef.current, debounce(this.handleResize, 250));\n * }\n *\n * @param {Element} containerRefElement The container reference to observe\n * @param {Function} handleResize The function to call for resize events\n * @param {boolean} useRequestAnimationFrame Whether to pass the handleResize function as a callback to requestAnimationFrame. Pass in true when the function passed in is not debounced.\n * @return {Function} The function used to unobserve resize events\n */\nexport const getResizeObserver = (containerRefElement, handleResize, useRequestAnimationFrame) => {\n    let unobserve;\n    if (canUseDOM) {\n        const { ResizeObserver } = window;\n        if (containerRefElement && ResizeObserver) {\n            const resizeObserver = new ResizeObserver((entries) => {\n                // Wrap resize function in requestAnimationFrame to avoid \"ResizeObserver loop limit exceeded\" errors\n                if (useRequestAnimationFrame) {\n                    window.requestAnimationFrame(() => {\n                        if (Array.isArray(entries) && entries.length > 0) {\n                            debounce(handleResize, 100);\n                        }\n                    });\n                    // Avoid wrapping function in requestAnimationFrame if the function is debounced\n                }\n                else {\n                    if (Array.isArray(entries) && entries.length > 0) {\n                        handleResize();\n                    }\n                }\n            });\n            resizeObserver.observe(containerRefElement);\n            unobserve = () => resizeObserver.unobserve(containerRefElement);\n        }\n        else {\n            window.addEventListener('resize', handleResize);\n            unobserve = () => window.removeEventListener('resize', handleResize);\n        }\n    }\n    return () => {\n        if (unobserve) {\n            unobserve();\n        }\n    };\n};\n//# sourceMappingURL=resizeObserver.js.map","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"names":[],"sourceRoot":""}