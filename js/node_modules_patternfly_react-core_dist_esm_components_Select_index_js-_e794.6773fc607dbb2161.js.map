{"version":3,"file":"node_modules_patternfly_react-core_dist_esm_components_Select_index_js-_e794.6773fc607dbb2161.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAA+B;AACL;AACqB;AACH;AACS;AACU;AAC/D;AACA,UAAU,8RAA8R,cAAc,6CAAM;AAC5T,yBAAyB,mDAAY;AACrC,2BAA2B,mDAAY;AACvC;AACA;AACA;AACA;AACA,IAAI,sDAAe;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kBAAkB,0DAAmB,CAAC,uCAAI,kBAAkB,uBAAuB,6DAAG;AACtF;AACA;AACA,SAAS,mLAAmL,EAAE,sDAAY,iEAAiE,0DAAgB;AAC3R,QAAQ,0DAAmB,CAAC,8CAAW,IAAI,sDAAsD;AACjG,YAAY,0DAAmB,CAAC,0DAAM,kBAAkB,2KAA2K;AACnO;AACO,eAAe,uDAAgB,kBAAkB,0DAAmB,6BAA6B,eAAe;AACvH;AACA;;;;;;;;;;;;;;;;;;;AC7D+B;AACL;AACqB;AACX;AAC7B;AACP,UAAU,6BAA6B,cAAc,6CAAM;AAC3D,YAAY,0DAAmB,CAAC,4CAAS,kBAAkB,WAAW,6DAAG,2BAA2B;AACpG;AACA;AACA;;;;;;;;;;;;;;;;;;;ACT+B;AACL;AACqB;AACZ;AAC5B;AACP,UAAU,qDAAqD,cAAc,6CAAM;AACnF,YAAY,0DAAmB,CAAC,2CAAQ,kBAAkB,yDAAyD,6DAAG,aAAa;AACnI;AACA;AACA;;;;;;;;;;;;;;;;;;;ACT+B;AACL;AACqB;AACZ;AACnC;AACA,UAAU,uCAAuC,cAAc,6CAAM;AACrE,YAAY,0DAAmB,CAAC,2CAAQ,kBAAkB,yCAAyC,6DAAG,aAAa;AACnH;AACO,qBAAqB,uDAAgB,kBAAkB,0DAAmB,mCAAmC,WAAW,eAAe;AAC9I;AACA;;;;;;;;;;;;;;;;;;;;;ACVyB;AACK;AACD;AACE;AAC/B","sources":["webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Select/Select.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Select/SelectGroup.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Select/SelectList.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Select/SelectOption.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Select/index.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Menu, MenuContent } from '../Menu';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nconst SelectBase = (_a) => {\n    var { children, className, onSelect, isOpen, selected, toggle, shouldFocusToggleOnSelect = false, shouldFocusFirstItemOnOpen = true, onOpenChange, onOpenChangeKeys = ['Escape', 'Tab'], isPlain, innerRef, zIndex = 9999, role = 'listbox', popperProps, menuHeight, maxMenuHeight, isScrollable } = _a, props = __rest(_a, [\"children\", \"className\", \"onSelect\", \"isOpen\", \"selected\", \"toggle\", \"shouldFocusToggleOnSelect\", \"shouldFocusFirstItemOnOpen\", \"onOpenChange\", \"onOpenChangeKeys\", \"isPlain\", \"innerRef\", \"zIndex\", \"role\", \"popperProps\", \"menuHeight\", \"maxMenuHeight\", \"isScrollable\"]);\n    const localMenuRef = React.useRef();\n    const localToggleRef = React.useRef();\n    const menuRef = innerRef || localMenuRef;\n    const toggleRef = typeof toggle === 'function' || (typeof toggle !== 'function' && !toggle.toggleRef)\n        ? localToggleRef\n        : toggle === null || toggle === void 0 ? void 0 : toggle.toggleRef;\n    React.useEffect(() => {\n        const handleMenuKeys = (event) => {\n            var _a, _b, _c;\n            // Close the menu on tab or escape if onOpenChange is provided\n            if (isOpen &&\n                onOpenChange &&\n                (((_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) || ((_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)))) {\n                if (onOpenChangeKeys.includes(event.key)) {\n                    event.preventDefault();\n                    onOpenChange(false);\n                    (_c = toggleRef.current) === null || _c === void 0 ? void 0 : _c.focus();\n                }\n            }\n        };\n        const handleClick = (event) => {\n            var _a, _b, _c;\n            // toggle was opened, focus on first menu item\n            if (isOpen && shouldFocusFirstItemOnOpen && ((_a = toggleRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {\n                setTimeout(() => {\n                    var _a;\n                    const firstElement = (_a = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a === void 0 ? void 0 : _a.querySelector('li button:not(:disabled),li input:not(:disabled)');\n                    firstElement && firstElement.focus();\n                }, 0);\n            }\n            // If the event is not on the toggle and onOpenChange callback is provided, close the menu\n            if (isOpen && onOpenChange && !((_b = toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {\n                if (isOpen && !((_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.contains(event.target))) {\n                    onOpenChange(false);\n                }\n            }\n        };\n        window.addEventListener('keydown', handleMenuKeys);\n        window.addEventListener('click', handleClick);\n        return () => {\n            window.removeEventListener('keydown', handleMenuKeys);\n            window.removeEventListener('click', handleClick);\n        };\n    }, [isOpen, menuRef, toggleRef, onOpenChange, onOpenChangeKeys]);\n    const menu = (React.createElement(Menu, Object.assign({ role: role, className: css(className), ref: menuRef, onSelect: (event, value) => {\n            onSelect && onSelect(event, value);\n            shouldFocusToggleOnSelect && toggleRef.current.focus();\n        }, isPlain: isPlain, selected: selected, isScrollable: isScrollable !== null && isScrollable !== void 0 ? isScrollable : (menuHeight !== undefined || maxMenuHeight !== undefined) }, getOUIAProps(Select.displayName, props.ouiaId !== undefined ? props.ouiaId : getDefaultOUIAId(Select.displayName), props.ouiaSafe !== undefined ? props.ouiaSafe : true), props),\n        React.createElement(MenuContent, { menuHeight: menuHeight, maxMenuHeight: maxMenuHeight }, children)));\n    return (React.createElement(Popper, Object.assign({ trigger: typeof toggle === 'function' ? toggle(toggleRef) : toggle.toggleNode, triggerRef: toggleRef, popper: menu, popperRef: menuRef, isVisible: isOpen, zIndex: zIndex }, popperProps)));\n};\nexport const Select = React.forwardRef((props, ref) => (React.createElement(SelectBase, Object.assign({ innerRef: ref }, props))));\nSelect.displayName = 'Select';\n//# sourceMappingURL=Select.js.map","import { __rest } from \"tslib\";\nimport React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { MenuGroup } from '../Menu';\nexport const SelectGroup = (_a) => {\n    var { children, className, label } = _a, props = __rest(_a, [\"children\", \"className\", \"label\"]);\n    return (React.createElement(MenuGroup, Object.assign({ className: css(className), label: label }, props), children));\n};\nSelectGroup.displayName = 'SelectGroup';\n//# sourceMappingURL=SelectGroup.js.map","import { __rest } from \"tslib\";\nimport React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { MenuList } from '../Menu';\nexport const SelectList = (_a) => {\n    var { children, className, isAriaMultiselectable = false } = _a, props = __rest(_a, [\"children\", \"className\", \"isAriaMultiselectable\"]);\n    return (React.createElement(MenuList, Object.assign({ isAriaMultiselectable: isAriaMultiselectable, className: css(className) }, props), children));\n};\nSelectList.displayName = 'SelectList';\n//# sourceMappingURL=SelectList.js.map","import { __rest } from \"tslib\";\nimport React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { MenuItem } from '../Menu';\nconst SelectOptionBase = (_a) => {\n    var { children, className, innerRef, value } = _a, props = __rest(_a, [\"children\", \"className\", \"innerRef\", \"value\"]);\n    return (React.createElement(MenuItem, Object.assign({ itemId: value, ref: innerRef, className: css(className) }, props), children));\n};\nexport const SelectOption = React.forwardRef((props, ref) => (React.createElement(SelectOptionBase, Object.assign({}, props, { innerRef: ref }))));\nSelectOption.displayName = 'SelectOption';\n//# sourceMappingURL=SelectOption.js.map","export * from './Select';\nexport * from './SelectGroup';\nexport * from './SelectList';\nexport * from './SelectOption';\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}