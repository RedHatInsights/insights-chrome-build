{"version":3,"sources":["at-rule.es6"],"names":["AtRule","defaults","type","append","nodes","children","prepend","Container"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA;;;;;;;;;;;;;;;;;;IAkBMA;;;;;AACJ,kBAAaC,QAAb,EAAuB;AAAA;;AACrB,kCAAMA,QAAN;AACA,UAAKC,IAAL,GAAY,QAAZ;AAFqB;AAGtB;;;;SAEDC,SAAA,kBAAqB;AAAA;;AACnB,QAAI,CAAC,KAAKC,KAAV,EAAiB,KAAKA,KAAL,GAAa,EAAb;;AADE,sCAAVC,QAAU;AAAVA,MAAAA,QAAU;AAAA;;AAEnB,yDAAaF,MAAb,kDAAuBE,QAAvB;AACD;;SAEDC,UAAA,mBAAsB;AAAA;;AACpB,QAAI,CAAC,KAAKF,KAAV,EAAiB,KAAKA,KAAL,GAAa,EAAb;;AADG,uCAAVC,QAAU;AAAVA,MAAAA,QAAU;AAAA;;AAEpB,0DAAaC,OAAb,mDAAwBD,QAAxB;AACD;AAED;;;;;;;;;;AAUA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAtCmBE;;eAuENP","file":"Advisor.d215c82f.map","sourceRoot":"../../src/js","sourcesContent":["import Container from './container'\n\n/**\n * Represents an at-rule.\n *\n * If it’s followed in the CSS by a {} block, this node will have\n * a nodes property representing its children.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('@charset \"UTF-8\"; @media print {}')\n *\n * const charset = root.first\n * charset.type  //=> 'atrule'\n * charset.nodes //=> undefined\n *\n * const media = root.last\n * media.nodes   //=> []\n */\nclass AtRule extends Container {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append (...children) {\n    if (!this.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend (...children) {\n    if (!this.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n\n  /**\n   * @memberof AtRule#\n   * @member {string} name The at-rule’s name immediately follows the `@`.\n   *\n   * @example\n   * const root  = postcss.parse('@media print {}')\n   * media.name //=> 'media'\n   * const media = root.first\n   */\n\n  /**\n   * @memberof AtRule#\n   * @member {string} params The at-rule’s parameters, the values\n   *                         that follow the at-rule’s name but precede\n   *                         any {} block.\n   *\n   * @example\n   * const root  = postcss.parse('@media print, screen {}')\n   * const media = root.first\n   * media.params //=> 'print, screen'\n   */\n\n  /**\n   * @memberof AtRule#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                        node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `after`: the space symbols after the last child of the node\n   *   to the end of the node.\n   * * `between`: the symbols between the property and value\n   *   for declarations, selector and `{` for rules, or last parameter\n   *   and `{` for at-rules.\n   * * `semicolon`: contains true if the last child has\n   *   an (optional) semicolon.\n   * * `afterName`: the space between the at-rule name and its parameters.\n   *\n   * PostCSS cleans at-rule parameters from comments and extra spaces,\n   * but it stores origin content in raws properties.\n   * As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('  @media\\nprint {\\n}')\n   * root.first.first.raws //=> { before: '  ',\n   *                       //     between: ' ',\n   *                       //     afterName: '\\n',\n   *                       //     after: '\\n' }\n   */\n}\n\nexport default AtRule\n"]}