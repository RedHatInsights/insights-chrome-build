{"version":3,"file":"node_modules_patternfly_react-core_dist_esm_components_MenuToggle_index_js-_89e61.96855e7b95e0bf19.js","mappings":";;;;;;;;;;;;;;;;;;AAA+B;AACA;AACyD;AACzC;AAC/C,+BAA+B,4CAAe;AAC9C;AACA,iCAAiC,+CAA+C,cAAc,6CAAM;AACpG,gBAAgB,gDAAmB,2BAA2B,mBAAmB,6DAAG,CAAC,0GAAM,uFAAuF;AAClL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4B;AAC5B;;;;;;;;;;;;;;;;;;;;ACjB+B;AACA;AAC8C;AAC9B;AACgB;AAC/D,iCAAiC,4CAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAgB;AACzC;AACA;AACA;AACA,iCAAiC;AACjC;AACA,uCAAuC,cAAc,6CAAM;AAC3D,kCAAkC,gDAAmB,WAAW,WAAW,6DAAG,CAAC,+FAAM,wDAAwD;AAC7I,gBAAgB,gDAAmB,YAAY,WAAW,6DAAG,CAAC,+FAAM,qBAAqB,+FAAM,mCAAmC;AAClI,YAAY,gDAAmB,0BAA0B,WAAW,6DAAG,CAAC,+FAAM,cAAc,8CAA8C,6BAA6B,KAAK,8IAA8I,oCAAoC,iBAAiB,IAAI,kCAAkC,GAAG,sDAAY;AACpa;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8B;AAC9B;;;;;;;;;;;;;;;;;;;;AC3C6B;AACM;AACE;AACrC","sources":["webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggleAction.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggleCheckbox.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/index.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MenuToggle/menu-toggle.mjs';\nimport { css } from '@patternfly/react-styles';\nclass MenuToggleAction extends React.Component {\n    render() {\n        const _a = this.props, { id, className, onClick, isDisabled, children } = _a, props = __rest(_a, [\"id\", \"className\", \"onClick\", \"isDisabled\", \"children\"]);\n        return (React.createElement(\"button\", Object.assign({ id: id, className: css(styles.menuToggleButton, className), onClick: onClick, type: \"button\", disabled: isDisabled }, props), children));\n    }\n}\nMenuToggleAction.displayName = 'MenuToggleAction';\nMenuToggleAction.defaultProps = {\n    className: '',\n    isDisabled: false,\n    onClick: () => { }\n};\nexport { MenuToggleAction };\n//# sourceMappingURL=MenuToggleAction.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Check/check.mjs';\nimport { css } from '@patternfly/react-styles';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nclass MenuToggleCheckbox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = (event) => {\n            this.props.onChange(event.target.checked, event);\n        };\n        this.calculateChecked = () => {\n            const { isChecked, defaultChecked } = this.props;\n            if (isChecked === null) {\n                // return false here and the indeterminate state will be set to true through the ref\n                return false;\n            }\n            else if (isChecked !== undefined) {\n                return isChecked;\n            }\n            return defaultChecked;\n        };\n        this.state = {\n            ouiaStateId: getDefaultOUIAId(MenuToggleCheckbox.displayName)\n        };\n    }\n    render() {\n        const _a = this.props, { className, isValid, isDisabled, isChecked, children, ouiaId, ouiaSafe, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onChange, defaultChecked, id } = _a, props = __rest(_a, [\"className\", \"isValid\", \"isDisabled\", \"isChecked\", \"children\", \"ouiaId\", \"ouiaSafe\", \"onChange\", \"defaultChecked\", \"id\"]);\n        const text = children && (React.createElement(\"span\", { className: css(styles.checkLabel, className), \"aria-hidden\": \"true\", id: id }, children));\n        return (React.createElement(\"label\", { className: css(styles.check, !children && styles.modifiers.standalone, className) },\n            React.createElement(\"input\", Object.assign({ className: css(styles.checkInput) }, (this.calculateChecked() !== undefined && { onChange: this.handleChange }), { name: id, type: \"checkbox\", ref: (elem) => elem && (elem.indeterminate = isChecked === null), \"aria-invalid\": !isValid, disabled: isDisabled }, (defaultChecked !== undefined ? { defaultChecked } : { checked: this.calculateChecked() }), getOUIAProps(MenuToggleCheckbox.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), props)),\n            text));\n    }\n}\nMenuToggleCheckbox.displayName = 'MenuToggleCheckbox';\nMenuToggleCheckbox.defaultProps = {\n    isValid: true,\n    isDisabled: false,\n    onChange: () => undefined\n};\nexport { MenuToggleCheckbox };\n//# sourceMappingURL=MenuToggleCheckbox.js.map","export * from './MenuToggle';\nexport * from './MenuToggleAction';\nexport * from './MenuToggleCheckbox';\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}