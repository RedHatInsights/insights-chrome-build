"use strict";
(self["webpackChunkinsights_chrome"] = self["webpackChunkinsights_chrome"] || []).push([["vendors-node_modules_scalprum_core_esm_index_js"],{

/***/ "./node_modules/@scalprum/core/esm/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@scalprum/core/esm/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GLOBAL_NAMESPACE: () => (/* binding */ GLOBAL_NAMESPACE),
/* harmony export */   getAppData: () => (/* binding */ getAppData),
/* harmony export */   getCachedModule: () => (/* binding */ getCachedModule),
/* harmony export */   getModule: () => (/* binding */ getModule),
/* harmony export */   getModuleIdentifier: () => (/* binding */ getModuleIdentifier),
/* harmony export */   getPendingLoading: () => (/* binding */ getPendingLoading),
/* harmony export */   getPendingPrefetch: () => (/* binding */ getPendingPrefetch),
/* harmony export */   getScalprum: () => (/* binding */ getScalprum),
/* harmony export */   getSharedScope: () => (/* binding */ getSharedScope),
/* harmony export */   handlePrefetchPromise: () => (/* binding */ handlePrefetchPromise),
/* harmony export */   initSharedScope: () => (/* binding */ initSharedScope),
/* harmony export */   initialize: () => (/* binding */ initialize),
/* harmony export */   preloadModule: () => (/* binding */ preloadModule),
/* harmony export */   processManifest: () => (/* binding */ processManifest),
/* harmony export */   removePrefetch: () => (/* binding */ removePrefetch),
/* harmony export */   removeScalprum: () => (/* binding */ removeScalprum),
/* harmony export */   resolvePendingInjection: () => (/* binding */ resolvePendingInjection),
/* harmony export */   setPendingLoading: () => (/* binding */ setPendingLoading),
/* harmony export */   setPendingPrefetch: () => (/* binding */ setPendingPrefetch)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _openshift_dynamic_plugin_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openshift/dynamic-plugin-sdk */ "webpack/sharing/consume/default/@openshift/dynamic-plugin-sdk/@openshift/dynamic-plugin-sdk");
/* harmony import */ var _openshift_dynamic_plugin_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_openshift_dynamic_plugin_sdk__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _warnDuplicatePkg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./warnDuplicatePkg */ "./node_modules/@scalprum/core/esm/warnDuplicatePkg.js");



var GLOBAL_NAMESPACE = '__scalprum__';
var SHARED_SCOPE_NAME = 'default';
var scalprum;
var getModuleIdentifier = function (scope, module) { return "".concat(scope, "#").concat(module); };
var getScalprum = function () {
    if (!scalprum) {
        throw new Error('Scalprum was not initialized! Call the initialize function first.');
    }
    return scalprum;
};
var initSharedScope = function () { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
    return [2 /*return*/, __webpack_require__.I(SHARED_SCOPE_NAME)];
}); }); };
/**
 * Get the webpack share scope object.
 */
var getSharedScope = function (enableScopeWarning) {
    if (!Object.keys(__webpack_require__.S).includes(SHARED_SCOPE_NAME)) {
        throw new Error('Attempt to access share scope object before its initialization');
    }
    var sharedScope = __webpack_require__.S[SHARED_SCOPE_NAME];
    if (enableScopeWarning) {
        (0,_warnDuplicatePkg__WEBPACK_IMPORTED_MODULE_1__.warnDuplicatePkg)(sharedScope);
    }
    return sharedScope;
};
var handlePrefetchPromise = function (id, prefetch) {
    if (prefetch) {
        setPendingPrefetch(id, prefetch);
        prefetch.finally(function () {
            removePrefetch(id);
        });
    }
};
var getCachedModule = function (scope, module) {
    var moduleId = getModuleIdentifier(scope, module);
    try {
        var cachedModule = getScalprum().exposedModules[moduleId];
        if (!module) {
            return {};
        }
        var prefetchID = "".concat(scope, "#").concat(module);
        var prefetchPromise = getPendingPrefetch(prefetchID);
        if (prefetchPromise) {
            return { cachedModule: cachedModule, prefetchPromise: prefetchPromise };
        }
        if (cachedModule === null || cachedModule === void 0 ? void 0 : cachedModule.prefetch) {
            handlePrefetchPromise(prefetchID, cachedModule.prefetch(getScalprum().api));
            return { cachedModule: cachedModule, prefetchPromise: getPendingPrefetch(prefetchID) };
        }
        return { cachedModule: cachedModule };
    }
    catch (error) {
        // If something goes wrong during the cache retrieval, reload module.
        console.warn("Unable to retrieve cached module ".concat(scope, " ").concat(module, ". New module will be loaded."), error);
        return {};
    }
};
var setPendingPrefetch = function (id, prefetch) {
    getScalprum().pendingPrefetch[id] = prefetch;
};
var getPendingPrefetch = function (id) {
    var _a;
    return (_a = getScalprum().pendingPrefetch) === null || _a === void 0 ? void 0 : _a[id];
};
var removePrefetch = function (id) {
    delete getScalprum().pendingPrefetch[id];
};
var resolvePendingInjection = function (id) {
    delete getScalprum().pendingInjections[id];
};
var setPendingLoading = function (scope, module, promise) {
    getScalprum().pendingLoading["".concat(scope, "#").concat(module)] = promise;
    promise
        .then(function (data) {
        delete getScalprum().pendingLoading["".concat(scope, "#").concat(module)];
        return data;
    })
        .catch(function () {
        delete getScalprum().pendingLoading["".concat(scope, "#").concat(module)];
    });
    return promise;
};
var getPendingLoading = function (scope, module) {
    return getScalprum().pendingLoading["".concat(scope, "#").concat(module)];
};
var preloadModule = function (scope, module, processor) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var manifestLocation, cachedModule, modulePromise, prefetchID;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        manifestLocation = getAppData(scope).manifestLocation;
        cachedModule = getCachedModule(scope, module).cachedModule;
        modulePromise = getPendingLoading(scope, module);
        // lock preloading if module exists or is already being loaded
        if (!modulePromise && Object.keys(cachedModule || {}).length == 0 && manifestLocation) {
            modulePromise = processManifest(manifestLocation, scope, module, processor).then(function () { return getScalprum().pluginStore.getExposedModule(scope, module); });
        }
        prefetchID = "".concat(scope, "#").concat(module);
        if (!getPendingPrefetch(prefetchID) && (cachedModule === null || cachedModule === void 0 ? void 0 : cachedModule.prefetch)) {
            handlePrefetchPromise(prefetchID, cachedModule.prefetch(getScalprum().api));
        }
        return [2 /*return*/, setPendingLoading(scope, module, Promise.resolve(modulePromise))];
    });
}); };
var getModule = function (scope, module, importName) {
    if (importName === void 0) { importName = 'default'; }
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
        var scalprum, cachedModule, Module, manifestLocation, _a;
        var _b;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_c) {
            switch (_c.label) {
                case 0:
                    scalprum = getScalprum();
                    cachedModule = getCachedModule(scope, module).cachedModule;
                    manifestLocation = (_b = getAppData(scope)) === null || _b === void 0 ? void 0 : _b.manifestLocation;
                    if (!manifestLocation) {
                        throw new Error("Could not get module. Manifest location not found for scope ".concat(scope, "."));
                    }
                    if (!!cachedModule) return [3 /*break*/, 6];
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, processManifest(manifestLocation, scope, module)];
                case 2:
                    _c.sent();
                    return [4 /*yield*/, scalprum.pluginStore.getExposedModule(scope, module)];
                case 3:
                    Module = _c.sent();
                    return [3 /*break*/, 5];
                case 4:
                    _a = _c.sent();
                    throw new Error("Module not initialized! Module \"".concat(module, "\" was not found in \"").concat(scope, "\" webpack scope. Make sure the remote container is loaded?"));
                case 5: return [3 /*break*/, 7];
                case 6:
                    Module = cachedModule;
                    _c.label = 7;
                case 7: return [2 /*return*/, Module[importName]];
            }
        });
    });
};
var initialize = function (_a) {
    var _b, _c;
    var appsConfig = _a.appsConfig, api = _a.api, options = _a.options, _d = _a.pluginStoreFeatureFlags, pluginStoreFeatureFlags = _d === void 0 ? {} : _d, _e = _a.pluginLoaderOptions, pluginLoaderOptions = _e === void 0 ? {} : _e, _f = _a.pluginStoreOptions, pluginStoreOptions = _f === void 0 ? {} : _f;
    if (scalprum) {
        return scalprum;
    }
    var defaultOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({ cacheTimeout: 120, enableScopeWarning: ((_c = (_b = __webpack_require__.g === null || __webpack_require__.g === void 0 ? void 0 : __webpack_require__.g.process) === null || _b === void 0 ? void 0 : _b.env) === null || _c === void 0 ? void 0 : _c.NODE_ENV) === 'development' }, options);
    // Create new plugin store
    var pluginStore = new _openshift_dynamic_plugin_sdk__WEBPACK_IMPORTED_MODULE_0__.PluginStore((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, pluginStoreOptions), { loaderOptions: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({ sharedScope: getSharedScope(defaultOptions.enableScopeWarning), getPluginEntryModule: function (_a) {
                var name = _a.name;
                return window[name];
            } }, pluginLoaderOptions) }));
    pluginStore.setFeatureFlags(pluginStoreFeatureFlags);
    scalprum = {
        appsConfig: appsConfig,
        pendingInjections: {},
        pendingLoading: {},
        pendingPrefetch: {},
        exposedModules: {},
        scalprumOptions: defaultOptions,
        api: api || {},
        pluginStore: pluginStore,
    };
    return scalprum;
};
var removeScalprum = function () {
    scalprum = undefined;
};
var getAppData = function (name) { return getScalprum().appsConfig[name]; };
var setExposedModule = function (moduleId, exposedModule) {
    getScalprum().exposedModules[moduleId] = exposedModule;
};
var clearPendingInjection = function (scope) {
    delete getScalprum().pendingInjections[scope];
};
var setPendingInjection = function (scope, promise) {
    getScalprum().pendingInjections[scope] = promise;
};
var getPendingInjection = function (scope) { return getScalprum().pendingInjections[scope]; };
// PluginManifest typeguard
function isPluginManifest(manifest) {
    return (typeof manifest.name === 'string' &&
        typeof manifest.version === 'string' &&
        Array.isArray(manifest.extensions) &&
        Array.isArray(manifest.loadScripts));
}
function extractBaseURL(path) {
    var result = path.split('/');
    // remove last section of pathname that inclides the JS filename
    result.pop();
    // make sure there is always at least leading / to satisfy sdk manifest validation
    return result.join('/') || '/';
}
function processManifest(url, scope, module, processor) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
        var pendingInjection, pluginStore, exposedModule;
        var _this = this;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0:
                    pendingInjection = getPendingInjection(scope);
                    pluginStore = getScalprum().pluginStore;
                    if (!pendingInjection) return [3 /*break*/, 3];
                    return [4 /*yield*/, pendingInjection];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, pluginStore.getExposedModule(scope, module)];
                case 2:
                    exposedModule = _a.sent();
                    setExposedModule(getModuleIdentifier(scope, module), exposedModule);
                    return [2 /*return*/];
                case 3:
                    pendingInjection = (function () { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(_this, void 0, void 0, function () {
                        var headers, manifestPromise, resClone, data, error_1, manifest, error_2, sdkManifest, loadScripts, baseURL_1, exposedModule, error_3;
                        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    headers = new Headers();
                                    headers.append('Pragma', 'no-cache');
                                    headers.append('Cache-Control', 'no-cache');
                                    headers.append('expires', '0');
                                    return [4 /*yield*/, fetch(url, {
                                            method: 'GET',
                                            headers: headers,
                                        })];
                                case 1:
                                    manifestPromise = _a.sent();
                                    if (!!manifestPromise.ok) return [3 /*break*/, 6];
                                    resClone = manifestPromise.clone();
                                    data = void 0;
                                    _a.label = 2;
                                case 2:
                                    _a.trys.push([2, 4, , 5]);
                                    return [4 /*yield*/, resClone.json()];
                                case 3:
                                    data = _a.sent();
                                    return [3 /*break*/, 5];
                                case 4:
                                    error_1 = _a.sent();
                                    throw new Error("Unable to load manifest files at ".concat(url, "! ").concat(resClone.status, ": ").concat(resClone.statusText));
                                case 5: throw new Error("Unable to load manifest files at ".concat(url, "! ").concat(data));
                                case 6:
                                    _a.trys.push([6, 8, , 9]);
                                    return [4 /*yield*/, manifestPromise.json()];
                                case 7:
                                    manifest = _a.sent();
                                    return [3 /*break*/, 9];
                                case 8:
                                    error_2 = _a.sent();
                                    clearPendingInjection(scope);
                                    throw new Error(error_2);
                                case 9:
                                    if (isPluginManifest(manifest)) {
                                        sdkManifest = manifest;
                                    }
                                    else {
                                        loadScripts = processor ? processor(manifest) : manifest[scope].entry;
                                        baseURL_1 = extractBaseURL(loadScripts[0]);
                                        sdkManifest = {
                                            extensions: [],
                                            // remove base URL from script entry, baseURL is added by scalprum provider
                                            loadScripts: loadScripts.map(function (script) { return script.replace(baseURL_1, ''); }),
                                            name: scope,
                                            registrationMethod: 'custom',
                                            version: '1.0.0',
                                            baseURL: baseURL_1,
                                        };
                                    }
                                    return [4 /*yield*/, pluginStore.loadPlugin(sdkManifest)];
                                case 10:
                                    _a.sent();
                                    _a.label = 11;
                                case 11:
                                    _a.trys.push([11, 13, , 14]);
                                    return [4 /*yield*/, pluginStore.getExposedModule(scope, module)];
                                case 12:
                                    exposedModule = _a.sent();
                                    setExposedModule(getModuleIdentifier(scope, module), exposedModule);
                                    return [2 /*return*/];
                                case 13:
                                    error_3 = _a.sent();
                                    clearPendingInjection(scope);
                                    throw error_3;
                                case 14: return [2 /*return*/];
                            }
                        });
                    }); })();
                    setPendingInjection(scope, pendingInjection);
                    return [4 /*yield*/, pendingInjection];
                case 4:
                    _a.sent();
                    clearPendingInjection(scope);
                    return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@scalprum/core/esm/warnDuplicatePkg.js":
/*!*************************************************************!*\
  !*** ./node_modules/@scalprum/core/esm/warnDuplicatePkg.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   warnDuplicatePkg: () => (/* binding */ warnDuplicatePkg)
/* harmony export */ });
/**
 * Warns applications using the shared scope if they have packages multiple times
 */
var warnDuplicatePkg = function (packages) {
    var entries = Object.entries(packages);
    entries.forEach(function (_a) {
        var pkgName = _a[0], versions = _a[1];
        var instances = Object.keys(versions);
        if (instances.length > 1) {
            console.warn("[SCALPRUM]: You have ".concat(pkgName, " package that is being loaded into browser multiple times. You might want to align your version with the chrome one."));
            console.warn("[SCALPRUM]: All packages instances:", versions);
        }
    });
};
//# sourceMappingURL=warnDuplicatePkg.js.map

/***/ })

}]);