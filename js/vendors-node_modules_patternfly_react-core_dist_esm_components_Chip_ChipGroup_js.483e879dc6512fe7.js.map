{"version":3,"file":"vendors-node_modules_patternfly_react-core_dist_esm_components_Chip_ChipGroup_js.483e879dc6512fe7.js","mappings":"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,kBAAkB;AACnG,oBAAoB,gDAAmB,CAAC,2CAAM,IAAI,yFAAyF,GAAG,sCAAsC,IAAI,EAAE,GAAG,wCAAwC;AACrO,wBAAwB,gDAAmB,CAAC,gGAAe,IAAI,uBAAuB;AACtF;AACA,2CAA2C,gDAAmB,CAAC,uEAAU;AACzE;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACqB;AACrB;;;;;;;;;;;;;;;;;ACtF2C;;AAEpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,wBAAwB,uDAAU;;AAEzC,iEAAe,eAAe;;;;;;;;;;;;;;;ACbvB;AACP;AACA;AACA;AACA;AACA,iEAAe,qBAAqB;;;;;;;;;;;;;;;ACLV;AAC1B,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;ACXmB;AACpB,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC","sources":["webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Chip/Chip.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/Chip/ChipGroup.js","webpack://insights-chrome/./node_modules/@patternfly/react-icons/dist/esm/icons/times-circle-icon.js","webpack://insights-chrome/./node_modules/@patternfly/react-tokens/dist/esm/c_chip__text_MaxWidth.js","webpack://insights-chrome/./node_modules/@patternfly/react-styles/css/components/Chip/chip-group.mjs","webpack://insights-chrome/./node_modules/@patternfly/react-styles/css/components/Chip/chip.mjs"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport styles from '@patternfly/react-styles/css/components/Chip/chip.mjs';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nimport cssChipTextMaxWidth from '@patternfly/react-tokens/dist/esm/c_chip__text_MaxWidth';\nclass Chip extends React.Component {\n    constructor(props) {\n        super(props);\n        this.span = React.createRef();\n        this.setChipStyle = () => ({\n            [cssChipTextMaxWidth.name]: this.props.textMaxWidth\n        });\n        this.renderOverflowChip = () => {\n            const _a = this.props, { badge, children, className, onClick, ouiaId, textMaxWidth, style, component, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            tooltipPosition, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            isOverflowChip, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            closeBtnAriaLabel, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            isReadOnly } = _a, props = __rest(_a, [\"badge\", \"children\", \"className\", \"onClick\", \"ouiaId\", \"textMaxWidth\", \"style\", \"component\", \"tooltipPosition\", \"isOverflowChip\", \"closeBtnAriaLabel\", \"isReadOnly\"]);\n            const Component = component;\n            return (React.createElement(Component, Object.assign({ onClick: onClick }, (textMaxWidth && Object.assign({ style: this.setChipStyle() }, style)), { className: css(styles.chip, styles.modifiers.overflow, className) }, (component === 'button' ? { type: 'button' } : {}), getOUIAProps('OverflowChip', ouiaId !== undefined ? ouiaId : this.state.ouiaStateId), props),\n                React.createElement(\"span\", { className: css(styles.chipContent) },\n                    React.createElement(\"span\", { className: css(styles.chipText) }, children),\n                    badge && badge)));\n        };\n        this.renderChip = (randomId) => {\n            const { children, tooltipPosition } = this.props;\n            if (this.state.isTooltipVisible) {\n                return (React.createElement(Tooltip, { position: tooltipPosition, content: children }, this.renderInnerChip(randomId)));\n            }\n            return this.renderInnerChip(randomId);\n        };\n        this.state = {\n            isTooltipVisible: false,\n            ouiaStateId: getDefaultOUIAId(Chip.displayName)\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            isTooltipVisible: Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth)\n        });\n    }\n    componentDidUpdate(_prevProps, prevState) {\n        const nextIsTooltipVisible = Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth);\n        if (prevState.isTooltipVisible !== nextIsTooltipVisible) {\n            this.setState({\n                isTooltipVisible: nextIsTooltipVisible\n            });\n        }\n    }\n    renderInnerChip(id) {\n        const _a = this.props, { badge, children, className, onClick, closeBtnAriaLabel, isReadOnly, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        isOverflowChip, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        tooltipPosition, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        id: idProp, component, ouiaId, textMaxWidth } = _a, props = __rest(_a, [\"badge\", \"children\", \"className\", \"onClick\", \"closeBtnAriaLabel\", \"isReadOnly\", \"isOverflowChip\", \"tooltipPosition\", \"id\", \"component\", \"ouiaId\", \"textMaxWidth\"]);\n        const Component = component;\n        return (React.createElement(Component, Object.assign({}, (textMaxWidth && {\n            style: this.setChipStyle()\n        }), { className: css(styles.chip, className) }, (this.state.isTooltipVisible && { tabIndex: 0 }), getOUIAProps(Chip.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId), props),\n            React.createElement(\"span\", { className: css(styles.chipContent) },\n                React.createElement(\"span\", { ref: this.span, className: css(styles.chipText), id: id }, children),\n                badge && badge),\n            !isReadOnly && (React.createElement(\"span\", { className: css(styles.chipActions) },\n                React.createElement(Button, { onClick: onClick, variant: \"plain\", \"aria-label\": closeBtnAriaLabel, id: `remove_${id}`, \"aria-labelledby\": `remove_${id} ${id}`, ouiaId: ouiaId || closeBtnAriaLabel },\n                    React.createElement(TimesIcon, { \"aria-hidden\": \"true\" }))))));\n    }\n    render() {\n        const { isOverflowChip } = this.props;\n        return (React.createElement(GenerateId, null, (randomId) => (isOverflowChip ? this.renderOverflowChip() : this.renderChip(this.props.id || randomId))));\n    }\n}\nChip.displayName = 'Chip';\nChip.defaultProps = {\n    closeBtnAriaLabel: 'close',\n    className: '',\n    isOverflowChip: false,\n    isReadOnly: false,\n    tooltipPosition: 'top',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e) => undefined,\n    component: 'div'\n};\nexport { Chip };\n//# sourceMappingURL=Chip.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Chip/chip-group.mjs';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Chip } from './Chip';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps } from '../../helpers';\nclass ChipGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.headingRef = React.createRef();\n        this.toggleCollapse = () => {\n            this.setState((prevState) => ({\n                isOpen: !prevState.isOpen,\n                isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n            }));\n        };\n        this.state = {\n            isOpen: this.props.defaultIsOpen,\n            isTooltipVisible: false\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n        });\n    }\n    renderLabel(id) {\n        const { categoryName, tooltipPosition } = this.props;\n        const { isTooltipVisible } = this.state;\n        return isTooltipVisible ? (React.createElement(Tooltip, { position: tooltipPosition, content: categoryName },\n            React.createElement(\"span\", { tabIndex: 0, ref: this.headingRef, className: css(styles.chipGroupLabel) },\n                React.createElement(\"span\", { id: id }, categoryName)))) : (React.createElement(\"span\", { ref: this.headingRef, className: css(styles.chipGroupLabel), id: id }, categoryName));\n    }\n    render() {\n        const _a = this.props, { categoryName, children, className, isClosable, closeBtnAriaLabel, 'aria-label': ariaLabel, onClick, onOverflowChipClick, numChips, expandedText, collapsedText, ouiaId, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        defaultIsOpen, tooltipPosition } = _a, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"onOverflowChipClick\", \"numChips\", \"expandedText\", \"collapsedText\", \"ouiaId\", \"defaultIsOpen\", \"tooltipPosition\"]);\n        const { isOpen } = this.state;\n        const numChildren = React.Children.count(children);\n        const collapsedTextResult = fillTemplate(collapsedText, {\n            remaining: React.Children.count(children) - numChips\n        });\n        const renderChipGroup = (id) => {\n            const chipArray = !isOpen\n                ? React.Children.toArray(children).slice(0, numChips)\n                : React.Children.toArray(children);\n            return (React.createElement(\"div\", Object.assign({ className: css(styles.chipGroup, className, categoryName && styles.modifiers.category), role: \"group\" }, (categoryName && { 'aria-labelledby': id }), (!categoryName && { 'aria-label': ariaLabel }), getOUIAProps(ChipGroup.displayName, ouiaId)),\n                React.createElement(\"div\", { className: css(styles.chipGroupMain) },\n                    categoryName && this.renderLabel(id),\n                    React.createElement(\"ul\", Object.assign({ className: css(styles.chipGroupList) }, (categoryName && { 'aria-labelledby': id }), (!categoryName && { 'aria-label': ariaLabel }), { role: \"list\" }, rest),\n                        chipArray.map((child, i) => (React.createElement(\"li\", { className: css(styles.chipGroupListItem), key: i }, child))),\n                        numChildren > numChips && (React.createElement(\"li\", { className: css(styles.chipGroupListItem) },\n                            React.createElement(Chip, { isOverflowChip: true, onClick: (event) => {\n                                    this.toggleCollapse();\n                                    onOverflowChipClick(event);\n                                }, component: \"button\" }, isOpen ? expandedText : collapsedTextResult))))),\n                isClosable && (React.createElement(\"div\", { className: css(styles.chipGroupClose) },\n                    React.createElement(Button, { variant: \"plain\", \"aria-label\": closeBtnAriaLabel, onClick: onClick, id: `remove_group_${id}`, \"aria-labelledby\": `remove_group_${id} ${id}`, ouiaId: ouiaId || closeBtnAriaLabel },\n                        React.createElement(TimesCircleIcon, { \"aria-hidden\": \"true\" }))))));\n        };\n        return numChildren === 0 ? null : (React.createElement(GenerateId, null, (randomId) => renderChipGroup(this.props.id || randomId)));\n    }\n}\nChipGroup.displayName = 'ChipGroup';\nChipGroup.defaultProps = {\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    categoryName: '',\n    defaultIsOpen: false,\n    numChips: 3,\n    isClosable: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e) => undefined,\n    onOverflowChipClick: (_e) => undefined,\n    closeBtnAriaLabel: 'Close chip group',\n    tooltipPosition: 'top',\n    'aria-label': 'Chip group category'\n};\nexport { ChipGroup };\n//# sourceMappingURL=ChipGroup.js.map","import { createIcon } from '../createIcon';\n\nexport const TimesCircleIconConfig = {\n  name: 'TimesCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const TimesCircleIcon = createIcon(TimesCircleIconConfig);\n\nexport default TimesCircleIcon;","export const c_chip__text_MaxWidth = {\n  \"name\": \"--pf-v5-c-chip__text--MaxWidth\",\n  \"value\": \"16ch\",\n  \"var\": \"var(--pf-v5-c-chip__text--MaxWidth)\"\n};\nexport default c_chip__text_MaxWidth;","import './chip-group.css';\nexport default {\n  \"chipGroup\": \"pf-v5-c-chip-group\",\n  \"chipGroupClose\": \"pf-v5-c-chip-group__close\",\n  \"chipGroupLabel\": \"pf-v5-c-chip-group__label\",\n  \"chipGroupList\": \"pf-v5-c-chip-group__list\",\n  \"chipGroupListItem\": \"pf-v5-c-chip-group__list-item\",\n  \"chipGroupMain\": \"pf-v5-c-chip-group__main\",\n  \"modifiers\": {\n    \"category\": \"pf-m-category\"\n  }\n};","import './chip.css';\nexport default {\n  \"badge\": \"pf-v5-c-badge\",\n  \"button\": \"pf-v5-c-button\",\n  \"chip\": \"pf-v5-c-chip\",\n  \"chipActions\": \"pf-v5-c-chip__actions\",\n  \"chipContent\": \"pf-v5-c-chip__content\",\n  \"chipIcon\": \"pf-v5-c-chip__icon\",\n  \"chipText\": \"pf-v5-c-chip__text\",\n  \"modifiers\": {\n    \"overflow\": \"pf-m-overflow\",\n    \"draggable\": \"pf-m-draggable\"\n  },\n  \"themeDark\": \"pf-v5-theme-dark\"\n};"],"names":[],"sourceRoot":""}