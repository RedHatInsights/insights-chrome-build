{"version":3,"file":"vendors-node_modules_patternfly_react-core_dist_esm_components_TreeView_index_js.9ce45ebfcd8dd3ea.js","mappings":"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;AACD;AACA;;;;;;;;;;;;;;;;;;;;;;AChI+B;AACA;AACgB;AACqC;AACrC;AACF;AACM;AACnD,2BAA2B,4CAAe;AAC1C;AACA;AACA;AACA,uBAAuB,4CAAe;AACtC;AACA;AACA;AACA,iDAAiD,sGAAM;AACvD;AACA;AACA;AACA;AACA,oIAAoI,sGAAM;AAC1I,wBAAwB,wDAAQ;AAChC;AACA;AACA;AACA,YAAY,sDAAY;AACxB;AACA,sQAAsQ,sGAAM;AAC5Q;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wDAAQ;AAChC;AACA;AACA;AACA,oIAAoI,sGAAM;AAC1I,YAAY,sDAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sGAAM;AAC3B,kCAAkC,sGAAM,oBAAoB,sGAAM;AAClE;AACA;AACA;AACA;AACA,YAAY,oDAAS;AACrB;AACA;AACA;AACA,4EAA4E,sGAAM;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,sGAAM;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,wGAAwG,sGAAM;AAC9G;AACA;AACA;AACA,YAAY,oDAAS;AACrB;AACA;AACA;AACA;AACA;AACA,iCAAiC,6EAA6E,cAAc,6CAAM;AAClI,gBAAgB,gDAAmB,wBAAwB,WAAW,6DAAG,CAAC,sGAAM,wBAAwB,sGAAM,uFAAuF;AACrM;AACA;AACwB;AACxB;;;;;;;;;;;;;;;;;;;;;ACpJ+B;AACA;AACgB;AACqC;AACU;AAClB;AACrE;AACP,UAAU,yDAAyD,cAAc,6CAAM;AACvF,YAAY,gDAAmB,UAAU,WAAW,6DAAG,CAAC,sGAAM,6BAA6B;AAC3F,QAAQ,gDAAmB,UAAU,WAAW,6DAAG,CAAC,4GAAU,cAAc,4GAAU,kBAAkB;AACxG,YAAY,gDAAmB,0BAA0B,iFAAiF;AAC1I,YAAY,gDAAmB,UAAU,WAAW,6DAAG,CAAC,4GAAU,wBAAwB;AAC1F,gBAAgB,gDAAmB,UAAU,WAAW,6DAAG,CAAC,4GAAU,mBAAmB;AACzF,oBAAoB,gDAAmB,CAAC,0FAAU;AAClD;AACA;AACA;;;;;;;;;;;;;;;;;AChB2B;AACM;AACjC;;;;;;;;;;;;;;;ACFyB;AACzB,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeView.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewList.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewListItem.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewRoot.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewSearch.js","webpack://insights-chrome/./node_modules/@patternfly/react-core/dist/esm/components/TreeView/index.js","webpack://insights-chrome/./node_modules/@patternfly/react-styles/css/components/TreeView/tree-view.mjs"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { TreeViewList } from './TreeViewList';\nimport { TreeViewListItem } from './TreeViewListItem';\nimport { TreeViewRoot } from './TreeViewRoot';\nexport const TreeView = (_a) => {\n    var { data, isNested = false, hasCheckboxes = false, hasBadges = false, hasGuides = false, hasSelectableNodes = false, variant = 'default', defaultAllExpanded = false, allExpanded, icon, expandedIcon, parentItem, onSelect, onCheck, onExpand, onCollapse, toolbar, activeItems, compareItems = (item, itemToCheck) => item.id === itemToCheck.id, className, useMemo } = _a, props = __rest(_a, [\"data\", \"isNested\", \"hasCheckboxes\", \"hasBadges\", \"hasGuides\", \"hasSelectableNodes\", \"variant\", \"defaultAllExpanded\", \"allExpanded\", \"icon\", \"expandedIcon\", \"parentItem\", \"onSelect\", \"onCheck\", \"onExpand\", \"onCollapse\", \"toolbar\", \"activeItems\", \"compareItems\", \"className\", \"useMemo\"]);\n    const treeViewList = (React.createElement(TreeViewList, { isNested: isNested, toolbar: toolbar }, data.map((item) => {\n        var _a, _b;\n        return (React.createElement(TreeViewListItem, Object.assign({ key: ((_a = item.id) === null || _a === void 0 ? void 0 : _a.toString()) || ((_b = item.name) === null || _b === void 0 ? void 0 : _b.toString()), name: item.name, title: item.title, id: item.id, isExpanded: allExpanded, isSelectable: hasSelectableNodes, defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded, onSelect: onSelect, onCheck: onCheck, onExpand: onExpand, onCollapse: onCollapse, hasCheckbox: item.hasCheckbox !== undefined ? item.hasCheckbox : hasCheckboxes, checkProps: item.checkProps, hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges, customBadgeContent: item.customBadgeContent, badgeProps: item.badgeProps, activeItems: activeItems, parentItem: parentItem, itemData: item, icon: item.icon !== undefined ? item.icon : icon, expandedIcon: item.expandedIcon !== undefined ? item.expandedIcon : expandedIcon, action: item.action, compareItems: compareItems, isCompact: variant === 'compact' || variant === 'compactNoBackground', useMemo: useMemo }, (item.children && {\n            children: (React.createElement(TreeView, { data: item.children, isNested: true, parentItem: item, hasCheckboxes: hasCheckboxes, hasBadges: hasBadges, hasGuides: hasGuides, hasSelectableNodes: hasSelectableNodes, variant: variant, allExpanded: allExpanded, defaultAllExpanded: defaultAllExpanded, onSelect: onSelect, onCheck: onCheck, onExpand: onExpand, onCollapse: onCollapse, activeItems: activeItems, icon: icon, expandedIcon: expandedIcon }))\n        }))));\n    })));\n    return (React.createElement(React.Fragment, null, parentItem ? (treeViewList) : (React.createElement(TreeViewRoot, Object.assign({ hasSelectableNodes: hasSelectableNodes, hasCheckboxes: hasCheckboxes, hasGuides: hasGuides, variant: variant, className: className }, props), treeViewList))));\n};\nTreeView.displayName = 'TreeView';\n//# sourceMappingURL=TreeView.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Divider } from '../Divider';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view.mjs';\nexport const TreeViewList = (_a) => {\n    var { isNested = false, toolbar, children } = _a, props = __rest(_a, [\"isNested\", \"toolbar\", \"children\"]);\n    return (React.createElement(React.Fragment, null,\n        toolbar && (React.createElement(React.Fragment, null,\n            toolbar,\n            React.createElement(Divider, null))),\n        React.createElement(\"ul\", Object.assign({ className: css(`${styles.treeView}__list`), role: isNested ? 'group' : 'tree' }, props), children)));\n};\nTreeViewList.displayName = 'TreeViewList';\n//# sourceMappingURL=TreeViewList.js.map","import React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view.mjs';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nconst TreeViewListItemBase = ({ name, title, id, isExpanded, defaultExpanded = false, children = null, onSelect, onExpand, onCollapse, onCheck, hasCheckbox = false, checkProps = {\n    checked: false\n}, hasBadge = false, customBadgeContent, badgeProps = { isRead: true }, isSelectable = false, isCompact, activeItems = [], itemData, parentItem, icon, expandedIcon, action, compareItems, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nuseMemo }) => {\n    const [internalIsExpanded, setIsExpanded] = useState(defaultExpanded);\n    useEffect(() => {\n        if (isExpanded !== undefined && isExpanded !== null) {\n            setIsExpanded(isExpanded);\n        }\n        else if (defaultExpanded !== undefined && defaultExpanded !== null) {\n            setIsExpanded(internalIsExpanded || defaultExpanded);\n        }\n    }, [isExpanded, defaultExpanded]);\n    let Component = 'button';\n    if (hasCheckbox) {\n        Component = 'label';\n    }\n    else if (isSelectable) {\n        Component = 'div';\n    }\n    const ToggleComponent = hasCheckbox || isSelectable ? 'button' : 'span';\n    const renderToggle = (randomId) => (React.createElement(ToggleComponent, Object.assign({ className: css(styles.treeViewNodeToggle), onClick: (evt) => {\n            if (isSelectable || hasCheckbox) {\n                if (internalIsExpanded) {\n                    onCollapse && onCollapse(evt, itemData, parentItem);\n                }\n                else {\n                    onExpand && onExpand(evt, itemData, parentItem);\n                }\n                setIsExpanded(!internalIsExpanded);\n            }\n            if (isSelectable) {\n                evt.stopPropagation();\n            }\n        } }, ((hasCheckbox || isSelectable) && { 'aria-labelledby': `label-${randomId}` }), (ToggleComponent === 'button' && { type: 'button' }), { tabIndex: -1 }),\n        React.createElement(\"span\", { className: css(styles.treeViewNodeToggleIcon) },\n            React.createElement(AngleRightIcon, { \"aria-hidden\": \"true\" }))));\n    const renderCheck = (randomId) => (React.createElement(\"span\", { className: css(styles.treeViewNodeCheck) },\n        React.createElement(\"input\", Object.assign({ type: \"checkbox\", onChange: (evt) => onCheck && onCheck(evt, itemData, parentItem), onClick: (evt) => evt.stopPropagation(), ref: (elem) => elem && (elem.indeterminate = checkProps.checked === null) }, checkProps, { checked: checkProps.checked === null ? false : checkProps.checked, id: randomId, tabIndex: -1 }))));\n    const iconRendered = (React.createElement(\"span\", { className: css(styles.treeViewNodeIcon) },\n        !internalIsExpanded && icon,\n        internalIsExpanded && (expandedIcon || icon)));\n    const renderNodeContent = () => {\n        const content = (React.createElement(React.Fragment, null,\n            isCompact && title && React.createElement(\"span\", { className: css(styles.treeViewNodeTitle) }, title),\n            isSelectable ? (React.createElement(\"button\", { tabIndex: -1, className: css(styles.treeViewNodeText), type: \"button\" }, name)) : (React.createElement(\"span\", { className: css(styles.treeViewNodeText) }, name))));\n        return isCompact ? React.createElement(\"span\", { className: css(styles.treeViewNodeContent) }, content) : content;\n    };\n    const badgeRendered = (React.createElement(React.Fragment, null,\n        hasBadge && children && (React.createElement(\"span\", { className: css(styles.treeViewNodeCount) },\n            React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length))),\n        hasBadge && !children && customBadgeContent !== undefined && (React.createElement(\"span\", { className: css(styles.treeViewNodeCount) },\n            React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent)))));\n    return (React.createElement(\"li\", { id: id, className: css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded), \"aria-expanded\": internalIsExpanded, role: \"treeitem\", tabIndex: -1 },\n        React.createElement(\"div\", { className: css(styles.treeViewContent) },\n            React.createElement(GenerateId, { prefix: isSelectable ? 'selectable-id' : 'checkbox-id' }, (randomId) => (React.createElement(Component, Object.assign({ className: css(styles.treeViewNode, children && (isSelectable || hasCheckbox) && styles.modifiers.selectable, (!children || isSelectable) &&\n                    activeItems &&\n                    activeItems.length > 0 &&\n                    activeItems.some((item) => compareItems && item && compareItems(item, itemData))\n                    ? styles.modifiers.current\n                    : ''), onClick: (evt) => {\n                    if (!hasCheckbox) {\n                        onSelect && onSelect(evt, itemData, parentItem);\n                        if (!isSelectable && children && evt.isDefaultPrevented() !== true) {\n                            if (internalIsExpanded) {\n                                onCollapse && onCollapse(evt, itemData, parentItem);\n                            }\n                            else {\n                                onExpand && onExpand(evt, itemData, parentItem);\n                            }\n                            setIsExpanded(!internalIsExpanded);\n                        }\n                    }\n                } }, (hasCheckbox && { htmlFor: randomId }), ((hasCheckbox || (isSelectable && children)) && { id: `label-${randomId}` }), (Component === 'button' && { type: 'button' })),\n                React.createElement(\"span\", { className: css(styles.treeViewNodeContainer) },\n                    children && renderToggle(randomId),\n                    hasCheckbox && renderCheck(randomId),\n                    icon && iconRendered,\n                    renderNodeContent(),\n                    badgeRendered)))),\n            action && React.createElement(\"div\", { className: css(styles.treeViewAction) }, action)),\n        internalIsExpanded && children));\n};\nexport const TreeViewListItem = React.memo(TreeViewListItemBase, (prevProps, nextProps) => {\n    if (!nextProps.useMemo) {\n        return false;\n    }\n    const prevIncludes = prevProps.activeItems &&\n        prevProps.activeItems.length > 0 &&\n        prevProps.activeItems.some((item) => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData));\n    const nextIncludes = nextProps.activeItems &&\n        nextProps.activeItems.length > 0 &&\n        nextProps.activeItems.some((item) => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData));\n    if (prevIncludes || nextIncludes) {\n        return false;\n    }\n    if (prevProps.name !== nextProps.name ||\n        prevProps.title !== nextProps.title ||\n        prevProps.id !== nextProps.id ||\n        prevProps.isExpanded !== nextProps.isExpanded ||\n        prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n        prevProps.onSelect !== nextProps.onSelect ||\n        prevProps.onCheck !== nextProps.onCheck ||\n        prevProps.onExpand !== nextProps.onExpand ||\n        prevProps.onCollapse !== nextProps.onCollapse ||\n        prevProps.hasCheckbox !== nextProps.hasCheckbox ||\n        prevProps.checkProps !== nextProps.checkProps ||\n        prevProps.hasBadge !== nextProps.hasBadge ||\n        prevProps.customBadgeContent !== nextProps.customBadgeContent ||\n        prevProps.badgeProps !== nextProps.badgeProps ||\n        prevProps.isCompact !== nextProps.isCompact ||\n        prevProps.icon !== nextProps.icon ||\n        prevProps.expandedIcon !== nextProps.expandedIcon ||\n        prevProps.action !== nextProps.action ||\n        prevProps.parentItem !== nextProps.parentItem ||\n        prevProps.itemData !== nextProps.itemData) {\n        return false;\n    }\n    return true;\n});\nTreeViewListItem.displayName = 'TreeViewListItem';\n//# sourceMappingURL=TreeViewListItem.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view.mjs';\nimport { canUseDOM } from '../../helpers/util';\nimport { handleArrows } from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nclass TreeViewRoot extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.displayName = 'TreeViewRoot';\n        this.treeRef = React.createRef();\n        this.handleKeys = (event) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (!this.treeRef.current.contains(event.target) ||\n                !event.target.classList.contains(styles.treeViewNode)) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            const treeItems = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(styles.treeViewNode)).filter((el) => !el.classList.contains('pf-m-disabled'));\n            if (key === KeyTypes.Space) {\n                activeElement.click();\n                event.preventDefault();\n            }\n            handleArrows(event, treeItems, (element) => activeElement === element, undefined, [], undefined, true, true);\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                const isExpandable = (_c = (_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.firstElementChild) === null || _b === void 0 ? void 0 : _b.firstElementChild) === null || _c === void 0 ? void 0 : _c.classList.contains(styles.treeViewNodeToggle);\n                const isExpanded = (_d = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _d === void 0 ? void 0 : _d.classList.contains('pf-m-expanded');\n                if (key === 'ArrowLeft') {\n                    if (isExpandable && isExpanded) {\n                        activeElement.click();\n                    }\n                    else {\n                        const parentList = (_e = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('ul')) === null || _e === void 0 ? void 0 : _e.parentElement;\n                        if ((parentList === null || parentList === void 0 ? void 0 : parentList.tagName) !== 'DIV') {\n                            const parentButton = parentList === null || parentList === void 0 ? void 0 : parentList.querySelector('button');\n                            activeElement.tabIndex = -1;\n                            if (parentButton) {\n                                parentButton.tabIndex = 0;\n                                parentButton.focus();\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (isExpandable && !isExpanded) {\n                        activeElement.tabIndex = -1;\n                        activeElement.click();\n                        const childElement = (_g = (_f = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _f === void 0 ? void 0 : _f.querySelector('ul > li')) === null || _g === void 0 ? void 0 : _g.querySelector('button');\n                        if (childElement) {\n                            childElement.tabIndex = 0;\n                            childElement.focus();\n                        }\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n        this.handleKeysCheckbox = (event) => {\n            var _a, _b, _c, _d, _e;\n            if (!this.treeRef.current.contains(event.target)) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            if (key === KeyTypes.Space) {\n                activeElement.click();\n                event.preventDefault();\n            }\n            const treeNodes = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(styles.treeViewNode));\n            handleArrows(event, treeNodes, (element) => element.contains(activeElement), (element) => element.querySelector('button,input'), [], undefined, true, true);\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                if (key === 'ArrowLeft') {\n                    if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n                        ((_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement) === null || _b === void 0 ? void 0 : _b.previousSibling) &&\n                            activeElement.parentElement.previousSibling.focus();\n                    }\n                    else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.previousSibling) {\n                        if (((_c = activeElement.previousElementSibling) === null || _c === void 0 ? void 0 : _c.tagName) === 'SPAN') {\n                            activeElement.previousSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.previousSibling.focus();\n                        }\n                    }\n                }\n                else {\n                    if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n                        ((_d = activeElement.parentElement) === null || _d === void 0 ? void 0 : _d.nextSibling) && activeElement.parentElement.nextSibling.focus();\n                    }\n                    else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.nextSibling) {\n                        if (((_e = activeElement.nextElementSibling) === null || _e === void 0 ? void 0 : _e.tagName) === 'SPAN') {\n                            activeElement.nextSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.nextSibling.focus();\n                        }\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n        this.variantStyleModifiers = {\n            default: '',\n            compact: styles.modifiers.compact,\n            compactNoBackground: [styles.modifiers.compact, styles.modifiers.noBackground]\n        };\n    }\n    componentDidMount() {\n        var _a;\n        if (canUseDOM) {\n            window.addEventListener('keydown', this.props.hasCheckboxes || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n        }\n        if (this.props.hasCheckboxes || this.props.hasSelectableNodes) {\n            const firstToggle = this.treeRef.current.getElementsByClassName(styles.treeViewNodeToggle)[0];\n            if (firstToggle) {\n                firstToggle.tabIndex = 0;\n            }\n            if (this.props.hasCheckboxes) {\n                const firstInput = this.treeRef.current.getElementsByTagName('INPUT')[0];\n                if (firstInput) {\n                    firstInput.tabIndex = 0;\n                }\n            }\n            if (this.props.hasSelectableNodes) {\n                const firstTextButton = this.treeRef.current.getElementsByClassName(styles.treeViewNodeText)[0];\n                if (firstTextButton) {\n                    firstTextButton.tabIndex = 0;\n                }\n            }\n        }\n        else {\n            ((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(styles.treeViewNode)[0]).tabIndex = 0;\n        }\n    }\n    componentWillUnmount() {\n        if (canUseDOM) {\n            window.removeEventListener('keydown', this.props.hasCheckboxes || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { children, hasCheckboxes, hasGuides, variant, className, hasSelectableNodes } = _a, props = __rest(_a, [\"children\", \"hasCheckboxes\", \"hasGuides\", \"variant\", \"className\", \"hasSelectableNodes\"]);\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.treeView, hasGuides && styles.modifiers.guides, this.variantStyleModifiers[variant], className), ref: this.treeRef }, props), children));\n    }\n}\nexport { TreeViewRoot };\n//# sourceMappingURL=TreeViewRoot.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view.mjs';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control.mjs';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nexport const TreeViewSearch = (_a) => {\n    var { className, onSearch, id, name, 'aria-label': ariaLabel } = _a, props = __rest(_a, [\"className\", \"onSearch\", \"id\", \"name\", 'aria-label']);\n    return (React.createElement(\"div\", { className: css(styles.treeViewSearch, className) },\n        React.createElement(\"div\", { className: css(formStyles.formControl, formStyles.modifiers.icon) },\n            React.createElement(\"input\", Object.assign({ onChange: onSearch, id: id, name: name, \"aria-label\": ariaLabel, type: \"search\" }, props)),\n            React.createElement(\"div\", { className: css(formStyles.formControlUtilities) },\n                React.createElement(\"div\", { className: css(formStyles.formControlIcon) },\n                    React.createElement(SearchIcon, null))))));\n};\nTreeViewSearch.displayName = 'TreeViewSearch';\n//# sourceMappingURL=TreeViewSearch.js.map","export * from './TreeView';\nexport * from './TreeViewSearch';\n//# sourceMappingURL=index.js.map","import './tree-view.css';\nexport default {\n  \"badge\": \"pf-v5-c-badge\",\n  \"dirRtl\": \"pf-v5-m-dir-rtl\",\n  \"modifiers\": {\n    \"compact\": \"pf-m-compact\",\n    \"guides\": \"pf-m-guides\",\n    \"expanded\": \"pf-m-expanded\",\n    \"noBackground\": \"pf-m-no-background\",\n    \"current\": \"pf-m-current\",\n    \"read\": \"pf-m-read\",\n    \"selectable\": \"pf-m-selectable\",\n    \"truncate\": \"pf-m-truncate\"\n  },\n  \"themeDark\": \"pf-v5-theme-dark\",\n  \"treeView\": \"pf-v5-c-tree-view\",\n  \"treeViewAction\": \"pf-v5-c-tree-view__action\",\n  \"treeViewContent\": \"pf-v5-c-tree-view__content\",\n  \"treeViewListItem\": \"pf-v5-c-tree-view__list-item\",\n  \"treeViewNode\": \"pf-v5-c-tree-view__node\",\n  \"treeViewNodeCheck\": \"pf-v5-c-tree-view__node-check\",\n  \"treeViewNodeContainer\": \"pf-v5-c-tree-view__node-container\",\n  \"treeViewNodeContent\": \"pf-v5-c-tree-view__node-content\",\n  \"treeViewNodeCount\": \"pf-v5-c-tree-view__node-count\",\n  \"treeViewNodeIcon\": \"pf-v5-c-tree-view__node-icon\",\n  \"treeViewNodeText\": \"pf-v5-c-tree-view__node-text\",\n  \"treeViewNodeTitle\": \"pf-v5-c-tree-view__node-title\",\n  \"treeViewNodeToggle\": \"pf-v5-c-tree-view__node-toggle\",\n  \"treeViewNodeToggleIcon\": \"pf-v5-c-tree-view__node-toggle-icon\",\n  \"treeViewSearch\": \"pf-v5-c-tree-view__search\"\n};"],"names":[],"sourceRoot":""}